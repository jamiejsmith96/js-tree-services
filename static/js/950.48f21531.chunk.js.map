{"version":3,"file":"static/js/950.48f21531.chunk.js","mappings":"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","sources":["../node_modules/@tabler/icons-react/src/icons/IconArrowRight.js","../node_modules/@tabler/icons-react/src/icons/IconCalendar.js","../node_modules/@tabler/icons-react/src/icons/IconSearch.js","../node_modules/@tabler/icons-react/src/icons/IconShare.js","../node_modules/@tabler/icons-react/src/icons/IconUser.js","../node_modules/@mantine/core/src/components/Badge/Badge.tsx","../node_modules/@mantine/core/src/components/Image/Image.tsx","../node_modules/@mantine/core/src/components/Combobox/get-parsed-combobox-data/get-parsed-combobox-data.ts","../node_modules/@mantine/core/src/components/Combobox/get-options-lockup/get-options-lockup.ts","../node_modules/@mantine/hooks/src/use-click-outside/use-click-outside.ts","../node_modules/@mantine/core/src/components/Floating/get-floating-position/get-floating-position.ts","../node_modules/@mantine/core/src/components/Popover/Popover.context.ts","../node_modules/@mantine/core/src/core/utils/noop/noop.ts","../node_modules/@mantine/core/src/core/utils/close-on-escape/close-on-escape.ts","../node_modules/@mantine/core/src/components/Floating/FloatingArrow/get-arrow-position-styles.ts","../node_modules/@mantine/core/src/components/Floating/FloatingArrow/FloatingArrow.tsx","../node_modules/@mantine/core/src/components/Popover/PopoverDropdown/PopoverDropdown.tsx","../node_modules/@mantine/core/src/core/utils/get-ref-prop/get-ref-prop.ts","../node_modules/@mantine/core/src/components/Popover/PopoverTarget/PopoverTarget.tsx","../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","../node_modules/@floating-ui/core/dist/floating-ui.core.mjs","../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs","../node_modules/@floating-ui/react/dist/floating-ui.react.mjs","../node_modules/@mantine/core/src/components/Popover/use-popover.ts","../node_modules/@mantine/core/src/components/Floating/use-floating-auto-update.ts","../node_modules/@mantine/core/src/components/Popover/Popover.tsx","../node_modules/@mantine/core/src/components/Combobox/Combobox.context.ts","../node_modules/@mantine/core/src/components/Combobox/ComboboxChevron/ComboboxChevron.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxClearButton/ComboboxClearButton.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxDropdown/ComboboxDropdown.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxEmpty/ComboboxEmpty.tsx","../node_modules/@mantine/core/src/components/Combobox/use-combobox-target-props/use-combobox-target-props.ts","../node_modules/@mantine/core/src/components/Combobox/ComboboxEventsTarget/ComboboxEventsTarget.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxFooter/ComboboxFooter.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxGroup/ComboboxGroup.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxHeader/ComboboxHeader.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxHiddenInput/ComboboxHiddenInput.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxOption/ComboboxOption.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxOptions/ComboboxOptions.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxSearch/ComboboxSearch.tsx","../node_modules/@mantine/core/src/components/Combobox/ComboboxTarget/ComboboxTarget.tsx","../node_modules/@mantine/core/src/components/Combobox/use-combobox/use-combobox.ts","../node_modules/@mantine/core/src/components/Combobox/use-combobox/get-index/get-index.ts","../node_modules/@mantine/core/src/components/Combobox/Combobox.tsx","../node_modules/@mantine/core/src/components/Checkbox/CheckIcon.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollArea.context.ts","../node_modules/@mantine/hooks/src/use-callback-ref/use-callback-ref.ts","../node_modules/@mantine/core/src/components/ScrollArea/use-resize-observer.ts","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaCorner/ScrollAreaCorner.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaRoot/ScrollAreaRoot.tsx","../node_modules/@mantine/hooks/src/use-debounced-callback/use-debounced-callback.ts","../node_modules/@mantine/core/src/components/ScrollArea/utils/get-thumb-ratio.tsx","../node_modules/@mantine/core/src/components/ScrollArea/utils/get-thumb-size.tsx","../node_modules/@mantine/core/src/components/ScrollArea/utils/linear-scale.ts","../node_modules/@mantine/core/src/components/ScrollArea/utils/get-thumb-offset-from-scroll.ts","../node_modules/@mantine/core/src/components/ScrollArea/utils/is-scrolling-within-scrollbar-bounds.ts","../node_modules/@mantine/core/src/components/ScrollArea/utils/to-int.ts","../node_modules/@mantine/core/src/components/ScrollArea/utils/compose-event-handlers.ts","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/Scrollbar.context.ts","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/Scrollbar.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollbarX.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollbarY.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarVisible.tsx","../node_modules/@mantine/core/src/components/ScrollArea/utils/get-scroll-position-from-pointer.ts","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarAuto.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarHover.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarScroll.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbar.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaThumb/ScrollAreaThumb.tsx","../node_modules/@mantine/core/src/components/ScrollArea/utils/add-unlinked-scroll-listener.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaViewport/ScrollAreaViewport.tsx","../node_modules/@mantine/core/src/components/ScrollArea/ScrollArea.tsx","../node_modules/@mantine/core/src/components/Combobox/OptionsDropdown/is-options-group.ts","../node_modules/@mantine/core/src/components/Combobox/OptionsDropdown/default-options-filter.ts","../node_modules/@mantine/core/src/components/Combobox/OptionsDropdown/validate-options.ts","../node_modules/@mantine/core/src/components/Combobox/OptionsDropdown/OptionsDropdown.tsx","../node_modules/@mantine/core/src/components/Combobox/OptionsDropdown/is-empty-combobox-data.ts","../node_modules/@mantine/core/src/components/Select/Select.tsx","../node_modules/@mantine/hooks/src/use-previous/use-previous.ts","../node_modules/@mantine/hooks/src/use-uncontrolled/use-uncontrolled.ts"],"sourcesContent":["import createReactComponent from '../createReactComponent';\nexport default createReactComponent('arrow-right', 'IconArrowRight', [\n  ['path', { d: 'M5 12l14 0', key: 'svg-0' }],\n  ['path', { d: 'M13 18l6 -6', key: 'svg-1' }],\n  ['path', { d: 'M13 6l6 6', key: 'svg-2' }],\n]);\n","import createReactComponent from '../createReactComponent';\nexport default createReactComponent('calendar', 'IconCalendar', [\n  [\n    'path',\n    {\n      d: 'M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z',\n      key: 'svg-0',\n    },\n  ],\n  ['path', { d: 'M16 3v4', key: 'svg-1' }],\n  ['path', { d: 'M8 3v4', key: 'svg-2' }],\n  ['path', { d: 'M4 11h16', key: 'svg-3' }],\n  ['path', { d: 'M11 15h1', key: 'svg-4' }],\n  ['path', { d: 'M12 15v3', key: 'svg-5' }],\n]);\n","import createReactComponent from '../createReactComponent';\nexport default createReactComponent('search', 'IconSearch', [\n  ['path', { d: 'M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0', key: 'svg-0' }],\n  ['path', { d: 'M21 21l-6 -6', key: 'svg-1' }],\n]);\n","import createReactComponent from '../createReactComponent';\nexport default createReactComponent('share', 'IconShare', [\n  ['path', { d: 'M6 12m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0', key: 'svg-0' }],\n  ['path', { d: 'M18 6m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0', key: 'svg-1' }],\n  ['path', { d: 'M18 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0', key: 'svg-2' }],\n  ['path', { d: 'M8.7 10.7l6.6 -3.4', key: 'svg-3' }],\n  ['path', { d: 'M8.7 13.3l6.6 3.4', key: 'svg-4' }],\n]);\n","import createReactComponent from '../createReactComponent';\nexport default createReactComponent('user', 'IconUser', [\n  ['path', { d: 'M8 7a4 4 0 1 0 8 0a4 4 0 0 0 -8 0', key: 'svg-0' }],\n  ['path', { d: 'M6 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2', key: 'svg-1' }],\n]);\n","import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineGradient,\n  MantineRadius,\n  MantineSize,\n  polymorphicFactory,\n  PolymorphicFactory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Badge.module.css';\n\nexport type BadgeStylesNames = 'root' | 'section' | 'label';\nexport type BadgeVariant =\n  | 'filled'\n  | 'light'\n  | 'outline'\n  | 'dot'\n  | 'transparent'\n  | 'white'\n  | 'default'\n  | 'gradient';\n\nexport type BadgeCssVariables = {\n  root:\n    | '--badge-height'\n    | '--badge-padding-x'\n    | '--badge-fz'\n    | '--badge-radius'\n    | '--badge-bg'\n    | '--badge-color'\n    | '--badge-bd'\n    | '--badge-dot-color';\n};\n\nexport interface BadgeProps extends BoxProps, StylesApiProps<BadgeFactory> {\n  /** Controls `font-size`, `height` and horizontal `padding`, `'md'` by default */\n  size?: MantineSize | (string & {});\n\n  /** If set, badge `min-width` becomes equal to its `height` and horizontal padding is removed */\n  circle?: boolean;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `'xl'` by default */\n  radius?: MantineRadius;\n\n  /** Key of `theme.colors` or any valid CSS color, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Gradient configuration used when `variant=\"gradient\"`, default value is `theme.defaultGradient` */\n  gradient?: MantineGradient;\n\n  /** Content displayed on the left side of the badge label */\n  leftSection?: React.ReactNode;\n\n  /** Content displayed on the right side of the badge label */\n  rightSection?: React.ReactNode;\n\n  /** Determines whether Badge should take 100% of its parent width, `false` by default */\n  fullWidth?: boolean;\n\n  /** Main badge content */\n  children?: React.ReactNode;\n\n  /** Determines whether text color with filled variant should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n}\n\nexport type BadgeFactory = PolymorphicFactory<{\n  props: BadgeProps;\n  defaultRef: HTMLDivElement;\n  defaultComponent: 'div';\n  stylesNames: BadgeStylesNames;\n  vars: BadgeCssVariables;\n  variant: BadgeVariant;\n}>;\n\nconst defaultProps: Partial<BadgeProps> = {};\n\nconst varsResolver = createVarsResolver<BadgeFactory>(\n  (theme, { radius, color, gradient, variant, size, autoContrast }) => {\n    const colors = theme.variantColorResolver({\n      color: color || theme.primaryColor,\n      theme,\n      gradient,\n      variant: variant || 'filled',\n      autoContrast,\n    });\n\n    return {\n      root: {\n        '--badge-height': getSize(size, 'badge-height'),\n        '--badge-padding-x': getSize(size, 'badge-padding-x'),\n        '--badge-fz': getSize(size, 'badge-fz'),\n        '--badge-radius': radius === undefined ? undefined : getRadius(radius),\n        '--badge-bg': color || variant ? colors.background : undefined,\n        '--badge-color': color || variant ? colors.color : undefined,\n        '--badge-bd': color || variant ? colors.border : undefined,\n        '--badge-dot-color': variant === 'dot' ? getThemeColor(color, theme) : undefined,\n      },\n    };\n  }\n);\n\nexport const Badge = polymorphicFactory<BadgeFactory>((_props, ref) => {\n  const props = useProps('Badge', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    radius,\n    color,\n    gradient,\n    leftSection,\n    rightSection,\n    children,\n    variant,\n    fullWidth,\n    autoContrast,\n    circle,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<BadgeFactory>({\n    name: 'Badge',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box\n      variant={variant}\n      mod={[\n        {\n          block: fullWidth,\n          circle,\n          'with-right-section': !!rightSection,\n          'with-left-section': !!leftSection,\n        },\n        mod,\n      ]}\n      {...getStyles('root', { variant })}\n      ref={ref}\n      {...others}\n    >\n      {leftSection && (\n        <span {...getStyles('section')} data-position=\"left\">\n          {leftSection}\n        </span>\n      )}\n      <span {...getStyles('label')}>{children}</span>\n      {rightSection && (\n        <span {...getStyles('section')} data-position=\"right\">\n          {rightSection}\n        </span>\n      )}\n    </Box>\n  );\n});\n\nBadge.classes = classes;\nBadge.displayName = '@mantine/core/Badge';\n","import { useEffect, useState } from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  getRadius,\n  MantineRadius,\n  polymorphicFactory,\n  PolymorphicFactory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Image.module.css';\n\nexport type ImageStylesNames = 'root';\nexport type ImageCssVariables = {\n  root: '--image-radius' | '--image-object-fit';\n};\n\nexport interface ImageProps extends BoxProps, StylesApiProps<ImageFactory> {\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `0` by default */\n  radius?: MantineRadius;\n\n  /** Controls `object-fit` style, `'cover'` by default */\n  fit?: React.CSSProperties['objectFit'];\n\n  /** Image url that will be used as a fallback in case `src` prop is not set or image cannot be loaded */\n  fallbackSrc?: string;\n\n  /** Image url */\n  src?: any;\n\n  /** Called when image fails to load */\n  onError?: (event: React.SyntheticEvent<HTMLImageElement, Event>) => void;\n}\n\nexport type ImageFactory = PolymorphicFactory<{\n  props: ImageProps;\n  defaultRef: HTMLImageElement;\n  defaultComponent: 'img';\n  stylesNames: ImageStylesNames;\n  vars: ImageCssVariables;\n}>;\n\nconst defaultProps: Partial<ImageProps> = {};\n\nconst varsResolver = createVarsResolver<ImageFactory>((_, { radius, fit }) => ({\n  root: {\n    '--image-radius': radius === undefined ? undefined : getRadius(radius),\n    '--image-object-fit': fit,\n  },\n}));\n\nexport const Image = polymorphicFactory<ImageFactory>((_props, ref) => {\n  const props = useProps('Image', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onError,\n    src,\n    radius,\n    fit,\n    fallbackSrc,\n    mod,\n    ...others\n  } = props;\n\n  const [error, setError] = useState(!src);\n\n  useEffect(() => setError(!src), [src]);\n\n  const getStyles = useStyles<ImageFactory>({\n    name: 'Image',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  if (error && fallbackSrc) {\n    return (\n      <Box\n        component=\"img\"\n        ref={ref}\n        src={fallbackSrc}\n        {...getStyles('root')}\n        onError={onError}\n        mod={['fallback', mod]}\n        {...others}\n      />\n    );\n  }\n\n  return (\n    <Box\n      component=\"img\"\n      ref={ref}\n      {...getStyles('root')}\n      src={src}\n      onError={(event) => {\n        onError?.(event);\n        setError(true);\n      }}\n      mod={mod}\n      {...others}\n    />\n  );\n});\n\nImage.classes = classes;\nImage.displayName = '@mantine/core/Image';\n","import {\n  ComboboxData,\n  ComboboxItem,\n  ComboboxItemGroup,\n  ComboboxParsedItem,\n  ComboboxParsedItemGroup,\n  ComboboxStringData,\n  ComboboxStringItem,\n} from '../Combobox.types';\n\nfunction parseItem(\n  item: string | ComboboxItem | ComboboxStringItem | ComboboxItemGroup\n): ComboboxItem | ComboboxParsedItemGroup {\n  if (typeof item === 'string') {\n    return { value: item, label: item };\n  }\n\n  if ('value' in item && !('label' in item)) {\n    return { value: item.value, label: item.value, disabled: item.disabled };\n  }\n\n  if (typeof item === 'number') {\n    return { value: (item as number).toString(), label: (item as number).toString() };\n  }\n\n  if ('group' in item) {\n    return {\n      group: item.group,\n      items: item.items.map((i) => parseItem(i) as ComboboxItem),\n    };\n  }\n\n  return item;\n}\n\nexport function getParsedComboboxData(\n  data: ComboboxData | ComboboxStringData | undefined\n): ComboboxParsedItem[] {\n  if (!data) {\n    return [];\n  }\n\n  return data.map((item) => parseItem(item as ComboboxItem));\n}\n","import { ComboboxItem, ComboboxParsedItem } from '../Combobox.types';\n\nexport function getOptionsLockup(options: ComboboxParsedItem[]): Record<string, ComboboxItem> {\n  return options.reduce<Record<string, ComboboxItem>>((acc, item) => {\n    if ('group' in item) {\n      return { ...acc, ...getOptionsLockup(item.items) };\n    }\n\n    acc[(item as any).value] = item;\n\n    return acc;\n  }, {});\n}\n\nexport function getLabelsLockup(options: ComboboxParsedItem[]): Record<string, string> {\n  return options.reduce<Record<string, string>>((acc, item) => {\n    if ('group' in item) {\n      return { ...acc, ...getLabelsLockup(item.items) };\n    }\n\n    acc[(item as any).label] = item as any;\n\n    return acc;\n  }, {});\n}\n","import { useEffect, useRef } from 'react';\n\nconst DEFAULT_EVENTS = ['mousedown', 'touchstart'];\n\nexport function useClickOutside<T extends HTMLElement = any>(\n  handler: () => void,\n  events?: string[] | null,\n  nodes?: (HTMLElement | null)[]\n) {\n  const ref = useRef<T>(null);\n\n  useEffect(() => {\n    const listener = (event: any) => {\n      const { target } = event ?? {};\n      if (Array.isArray(nodes)) {\n        const shouldIgnore =\n          target?.hasAttribute('data-ignore-outside-clicks') ||\n          (!document.body.contains(target) && target.tagName !== 'HTML');\n        const shouldTrigger = nodes.every((node) => !!node && !event.composedPath().includes(node));\n        shouldTrigger && !shouldIgnore && handler();\n      } else if (ref.current && !ref.current.contains(target)) {\n        handler();\n      }\n    };\n\n    (events || DEFAULT_EVENTS).forEach((fn) => document.addEventListener(fn, listener));\n\n    return () => {\n      (events || DEFAULT_EVENTS).forEach((fn) => document.removeEventListener(fn, listener));\n    };\n  }, [ref, handler, nodes]);\n\n  return ref;\n}\n","import type { FloatingPlacement, FloatingPosition, FloatingSide } from '../types';\n\nexport function getFloatingPosition(\n  dir: 'rtl' | 'ltr',\n  position: FloatingPosition\n): FloatingPosition {\n  if (dir === 'rtl' && (position.includes('right') || position.includes('left'))) {\n    const [side, placement] = position.split('-') as [FloatingSide, FloatingPlacement];\n    const flippedPosition = side === 'right' ? 'left' : 'right';\n    return placement === undefined ? flippedPosition : `${flippedPosition}-${placement}`;\n  }\n\n  return position;\n}\n","import {\n  ClassNames,\n  createSafeContext,\n  GetStylesApi,\n  MantineRadius,\n  MantineShadow,\n  Styles,\n} from '../../core';\nimport { ArrowPosition, FloatingPosition, FloatingStrategy } from '../Floating';\nimport { PortalProps } from '../Portal';\nimport { TransitionOverride } from '../Transition';\nimport type { PopoverFactory } from './Popover';\nimport { PopoverWidth } from './Popover.types';\n\ninterface PopoverContext {\n  x: number;\n  y: number;\n  arrowX: number | undefined;\n  arrowY: number | undefined;\n  arrowRef: React.RefObject<HTMLDivElement | null>;\n  opened: boolean;\n  transitionProps?: TransitionOverride;\n  reference: (node: HTMLElement) => void;\n  floating: (node: HTMLElement) => void;\n  width?: PopoverWidth;\n  withArrow: boolean | undefined;\n  arrowSize: number;\n  arrowOffset: number;\n  arrowRadius: number;\n  arrowPosition: ArrowPosition;\n  trapFocus: boolean | undefined;\n  placement: FloatingPosition;\n  withinPortal: boolean | undefined;\n  portalProps?: Omit<PortalProps, 'children'>;\n  closeOnEscape: boolean | undefined;\n  zIndex: string | number | undefined;\n  radius?: MantineRadius | undefined;\n  shadow?: MantineShadow | undefined;\n  onClose?: () => void;\n  getDropdownId: () => string;\n  getTargetId: () => string;\n  controlled: boolean;\n  onToggle: () => void;\n  withRoles: boolean | undefined;\n  targetProps: Record<string, any>;\n  disabled: boolean | undefined;\n  returnFocus: boolean | undefined;\n  classNames: ClassNames<PopoverFactory> | undefined;\n  styles: Styles<PopoverFactory> | undefined;\n  unstyled: boolean | undefined;\n  __staticSelector: string;\n  variant: string | undefined;\n  keepMounted: boolean | undefined;\n  getStyles: GetStylesApi<PopoverFactory>;\n  resolvedStyles: Record<string, any>;\n  floatingStrategy: FloatingStrategy | undefined;\n}\n\nexport const [PopoverContextProvider, usePopoverContext] = createSafeContext<PopoverContext>(\n  'Popover component was not found in the tree'\n);\n","export const noop = () => {};\n","import { noop } from '../noop/noop';\n\ninterface Options {\n  active: boolean | undefined;\n  onTrigger?: () => void;\n  onKeyDown?: (event: React.KeyboardEvent<any>) => void;\n}\n\nexport function closeOnEscape(\n  callback?: (event: any) => void,\n  options: Options = { active: true }\n) {\n  if (typeof callback !== 'function' || !options.active) {\n    return options.onKeyDown || noop;\n  }\n\n  return (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Escape') {\n      callback(event);\n      options.onTrigger?.();\n    }\n  };\n}\n","import type { ArrowPosition, FloatingPlacement, FloatingPosition, FloatingSide } from '../types';\n\nfunction horizontalSide(\n  placement: FloatingPlacement | 'center',\n  arrowY: number | undefined,\n  arrowOffset: number,\n  arrowPosition: ArrowPosition\n) {\n  if (placement === 'center' || arrowPosition === 'center') {\n    return { top: arrowY };\n  }\n\n  if (placement === 'end') {\n    return { bottom: arrowOffset };\n  }\n\n  if (placement === 'start') {\n    return { top: arrowOffset };\n  }\n\n  return {};\n}\n\nfunction verticalSide(\n  placement: FloatingPlacement | 'center',\n  arrowX: number | undefined,\n  arrowOffset: number,\n  arrowPosition: ArrowPosition,\n  dir: 'rtl' | 'ltr'\n) {\n  if (placement === 'center' || arrowPosition === 'center') {\n    return { left: arrowX };\n  }\n\n  if (placement === 'end') {\n    return { [dir === 'ltr' ? 'right' : 'left']: arrowOffset };\n  }\n\n  if (placement === 'start') {\n    return { [dir === 'ltr' ? 'left' : 'right']: arrowOffset };\n  }\n\n  return {};\n}\n\nconst radiusByFloatingSide: Record<\n  FloatingSide,\n  keyof Pick<\n    React.CSSProperties,\n    | 'borderBottomLeftRadius'\n    | 'borderBottomRightRadius'\n    | 'borderTopLeftRadius'\n    | 'borderTopRightRadius'\n  >\n> = {\n  bottom: 'borderTopLeftRadius',\n  left: 'borderTopRightRadius',\n  right: 'borderBottomLeftRadius',\n  top: 'borderBottomRightRadius',\n};\n\nexport function getArrowPositionStyles({\n  position,\n  arrowSize,\n  arrowOffset,\n  arrowRadius,\n  arrowPosition,\n  arrowX,\n  arrowY,\n  dir,\n}: {\n  position: FloatingPosition;\n  arrowSize: number;\n  arrowOffset: number;\n  arrowRadius: number;\n  arrowPosition: ArrowPosition;\n  arrowX: number | undefined;\n  arrowY: number | undefined;\n  dir: 'rtl' | 'ltr';\n}) {\n  const [side, placement = 'center'] = position.split('-') as [FloatingSide, FloatingPlacement];\n  const baseStyles = {\n    width: arrowSize,\n    height: arrowSize,\n    transform: 'rotate(45deg)',\n    position: 'absolute',\n    [radiusByFloatingSide[side]]: arrowRadius,\n  };\n\n  const arrowPlacement = -arrowSize / 2;\n\n  if (side === 'left') {\n    return {\n      ...baseStyles,\n      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),\n      right: arrowPlacement,\n      borderLeftColor: 'transparent',\n      borderBottomColor: 'transparent',\n      clipPath: 'polygon(100% 0, 0 0, 100% 100%)',\n    };\n  }\n\n  if (side === 'right') {\n    return {\n      ...baseStyles,\n      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),\n      left: arrowPlacement,\n      borderRightColor: 'transparent',\n      borderTopColor: 'transparent',\n      clipPath: 'polygon(0 100%, 0 0, 100% 100%)',\n    };\n  }\n\n  if (side === 'top') {\n    return {\n      ...baseStyles,\n      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),\n      bottom: arrowPlacement,\n      borderTopColor: 'transparent',\n      borderLeftColor: 'transparent',\n      clipPath: 'polygon(0 100%, 100% 100%, 100% 0)',\n    };\n  }\n\n  if (side === 'bottom') {\n    return {\n      ...baseStyles,\n      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),\n      top: arrowPlacement,\n      borderBottomColor: 'transparent',\n      borderRightColor: 'transparent',\n      clipPath: 'polygon(0 100%, 0 0, 100% 0)',\n    };\n  }\n\n  return {};\n}\n","import { forwardRef } from 'react';\nimport { useDirection } from '../../../core';\nimport { ArrowPosition, FloatingPosition } from '../types';\nimport { getArrowPositionStyles } from './get-arrow-position-styles';\n\ninterface FloatingArrowProps extends React.ComponentPropsWithoutRef<'div'> {\n  position: FloatingPosition;\n  arrowSize: number;\n  arrowOffset: number;\n  arrowRadius: number;\n  arrowPosition: ArrowPosition;\n  arrowX: number | undefined;\n  arrowY: number | undefined;\n  visible: boolean | undefined;\n}\n\nexport const FloatingArrow = forwardRef<HTMLDivElement, FloatingArrowProps>(\n  (\n    {\n      position,\n      arrowSize,\n      arrowOffset,\n      arrowRadius,\n      arrowPosition,\n      visible,\n      arrowX,\n      arrowY,\n      style,\n      ...others\n    },\n    ref\n  ) => {\n    const { dir } = useDirection();\n    if (!visible) {\n      return null;\n    }\n\n    return (\n      <div\n        {...others}\n        ref={ref}\n        style={{\n          ...style,\n          ...getArrowPositionStyles({\n            position,\n            arrowSize,\n            arrowOffset,\n            arrowRadius,\n            arrowPosition,\n            dir,\n            arrowX,\n            arrowY,\n          }),\n        }}\n      />\n    );\n  }\n);\n\nFloatingArrow.displayName = '@mantine/core/FloatingArrow';\n","import { useFocusReturn, useMergedRef } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  closeOnEscape,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  rem,\n  useProps,\n} from '../../../core';\nimport { FloatingArrow } from '../../Floating';\nimport { FocusTrap } from '../../FocusTrap';\nimport { OptionalPortal } from '../../Portal';\nimport { Transition } from '../../Transition';\nimport type { PopoverStylesNames } from '../Popover';\nimport { usePopoverContext } from '../Popover.context';\nimport classes from '../Popover.module.css';\n\nexport interface PopoverDropdownProps\n  extends BoxProps,\n    CompoundStylesApiProps<PopoverDropdownFactory>,\n    ElementProps<'div'> {}\n\nexport type PopoverDropdownFactory = Factory<{\n  props: PopoverDropdownProps;\n  ref: HTMLDivElement;\n  stylesNames: PopoverStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<PopoverDropdownProps> = {};\n\nexport const PopoverDropdown = factory<PopoverDropdownFactory>((_props, ref) => {\n  const props = useProps('PopoverDropdown', defaultProps, _props);\n  const {\n    className,\n    style,\n    vars,\n    children,\n    onKeyDownCapture,\n    variant,\n    classNames,\n    styles,\n    ...others\n  } = props;\n\n  const ctx = usePopoverContext();\n\n  const returnFocus = useFocusReturn({\n    opened: ctx.opened,\n    shouldReturnFocus: ctx.returnFocus,\n  });\n\n  const accessibleProps = ctx.withRoles\n    ? {\n        'aria-labelledby': ctx.getTargetId(),\n        id: ctx.getDropdownId(),\n        role: 'dialog',\n        tabIndex: -1,\n      }\n    : {};\n\n  const mergedRef = useMergedRef(ref, ctx.floating);\n\n  if (ctx.disabled) {\n    return null;\n  }\n\n  return (\n    <OptionalPortal {...ctx.portalProps} withinPortal={ctx.withinPortal}>\n      <Transition\n        mounted={ctx.opened}\n        {...ctx.transitionProps}\n        transition={ctx.transitionProps?.transition || 'fade'}\n        duration={ctx.transitionProps?.duration ?? 150}\n        keepMounted={ctx.keepMounted}\n        exitDuration={\n          typeof ctx.transitionProps?.exitDuration === 'number'\n            ? ctx.transitionProps.exitDuration\n            : ctx.transitionProps?.duration\n        }\n      >\n        {(transitionStyles) => (\n          <FocusTrap active={ctx.trapFocus && ctx.opened} innerRef={mergedRef}>\n            <Box\n              {...accessibleProps}\n              {...others}\n              variant={variant}\n              onKeyDownCapture={closeOnEscape(ctx.onClose, {\n                active: ctx.closeOnEscape,\n                onTrigger: returnFocus,\n                onKeyDown: onKeyDownCapture,\n              })}\n              data-position={ctx.placement}\n              data-fixed={ctx.floatingStrategy === 'fixed' || undefined}\n              {...ctx.getStyles('dropdown', {\n                className,\n                props,\n                classNames,\n                styles,\n                style: [\n                  {\n                    ...transitionStyles,\n                    zIndex: ctx.zIndex as React.CSSProperties['zIndex'],\n                    top: ctx.y ?? 0,\n                    left: ctx.x ?? 0,\n                    width: ctx.width === 'target' ? undefined : rem(ctx.width),\n                  },\n                  ctx.resolvedStyles.dropdown,\n                  styles?.dropdown,\n                  style,\n                ],\n              })}\n            >\n              {children}\n\n              <FloatingArrow\n                ref={ctx.arrowRef}\n                arrowX={ctx.arrowX}\n                arrowY={ctx.arrowY}\n                visible={ctx.withArrow}\n                position={ctx.placement}\n                arrowSize={ctx.arrowSize}\n                arrowRadius={ctx.arrowRadius}\n                arrowOffset={ctx.arrowOffset}\n                arrowPosition={ctx.arrowPosition}\n                {...ctx.getStyles('arrow', {\n                  props,\n                  classNames,\n                  styles,\n                })}\n              />\n            </Box>\n          </FocusTrap>\n        )}\n      </Transition>\n    </OptionalPortal>\n  );\n});\n\nPopoverDropdown.classes = classes;\nPopoverDropdown.displayName = '@mantine/core/PopoverDropdown';\n","import React from 'react';\n\nexport function getRefProp(element: any) {\n  const version = React.version;\n\n  if (typeof React.version !== 'string') {\n    return (element as any)?.ref;\n  }\n\n  if (version.startsWith('18.')) {\n    return (element as any)?.ref;\n  }\n\n  return (element as any)?.props?.ref;\n}\n","import { cloneElement } from 'react';\nimport cx from 'clsx';\nimport { useMergedRef } from '@mantine/hooks';\nimport { factory, Factory, getRefProp, isElement, useProps } from '../../../core';\nimport { usePopoverContext } from '../Popover.context';\n\nexport interface PopoverTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to access element ref */\n  refProp?: string;\n\n  /** Popup accessible type, `'dialog'` by default */\n  popupType?: string;\n}\n\nconst defaultProps: Partial<PopoverTargetProps> = {\n  refProp: 'ref',\n  popupType: 'dialog',\n};\n\nexport type PopoverTargetFactory = Factory<{\n  props: PopoverTargetProps;\n  ref: HTMLElement;\n  compound: true;\n}>;\n\nexport const PopoverTarget = factory<PopoverTargetFactory>((props, ref) => {\n  const { children, refProp, popupType, ...others } = useProps(\n    'PopoverTarget',\n    defaultProps,\n    props\n  );\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Popover.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  const forwardedProps: any = others;\n  const ctx = usePopoverContext();\n  const targetRef = useMergedRef(ctx.reference, getRefProp(children), ref);\n\n  const accessibleProps = ctx.withRoles\n    ? {\n        'aria-haspopup': popupType,\n        'aria-expanded': ctx.opened,\n        'aria-controls': ctx.getDropdownId(),\n        id: ctx.getTargetId(),\n      }\n    : {};\n\n  return cloneElement(children, {\n    ...forwardedProps,\n    ...accessibleProps,\n    ...ctx.targetProps,\n    className: cx(\n      ctx.targetProps.className,\n      forwardedProps.className,\n      (children.props as any).className\n    ),\n    [refProp!]: targetRef,\n    ...(!ctx.controlled ? { onClick: ctx.onToggle } : null),\n  });\n});\n\nPopoverTarget.displayName = '@mantine/core/PopoverTarget';\n","/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n  return [':popover-open', ':modal'].some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (e) {\n      return false;\n    }\n  });\n}\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\n  return ['transform', 'translate', 'scale', 'rotate', 'perspective'].some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, detectOverflow as detectOverflow$1, offset as offset$1, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n  if (ignoreScrollbarX === void 0) {\n    ignoreScrollbarX = false;\n  }\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :\n  // RTL <body> scrollbar.\n  getWindowScrollBarX(documentElement, htmlRect));\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n      // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n","import { computePosition, arrow as arrow$2, offset as offset$1, shift as shift$1, limitShift as limitShift$1, flip as flip$1, size as size$1, autoPlacement as autoPlacement$1, hide as hide$1, inline as inline$1 } from '@floating-ui/dom';\nexport { autoUpdate, computePosition, detectOverflow, getOverflowAncestors, platform } from '@floating-ui/dom';\nimport * as React from 'react';\nimport { useLayoutEffect, useEffect } from 'react';\nimport * as ReactDOM from 'react-dom';\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n  let length;\n  let i;\n  let keys;\n  if (a && b && typeof a === 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length !== b.length) return false;\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0;) {\n      if (!{}.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\n\nfunction getDPR(element) {\n  if (typeof window === 'undefined') {\n    return 1;\n  }\n  const win = element.ownerDocument.defaultView || window;\n  return win.devicePixelRatio || 1;\n}\n\nfunction roundByDPR(element, value) {\n  const dpr = getDPR(element);\n  return Math.round(value * dpr) / dpr;\n}\n\nfunction useLatestRef(value) {\n  const ref = React.useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\n/**\n * Provides data to position a floating element.\n * @see https://floating-ui.com/docs/useFloating\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform,\n    elements: {\n      reference: externalReference,\n      floating: externalFloating\n    } = {},\n    transform = true,\n    whileElementsMounted,\n    open\n  } = options;\n  const [data, setData] = React.useState({\n    x: 0,\n    y: 0,\n    strategy,\n    placement,\n    middlewareData: {},\n    isPositioned: false\n  });\n  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  const [_reference, _setReference] = React.useState(null);\n  const [_floating, _setFloating] = React.useState(null);\n  const setReference = React.useCallback(node => {\n    if (node !== referenceRef.current) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, []);\n  const setFloating = React.useCallback(node => {\n    if (node !== floatingRef.current) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, []);\n  const referenceEl = externalReference || _reference;\n  const floatingEl = externalFloating || _floating;\n  const referenceRef = React.useRef(null);\n  const floatingRef = React.useRef(null);\n  const dataRef = React.useRef(data);\n  const hasWhileElementsMounted = whileElementsMounted != null;\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const platformRef = useLatestRef(platform);\n  const openRef = useLatestRef(open);\n  const update = React.useCallback(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    const config = {\n      placement,\n      strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition(referenceRef.current, floatingRef.current, config).then(data => {\n      const fullData = {\n        ...data,\n        // The floating element's position may be recomputed while it's closed\n        // but still mounted (such as when transitioning out). To ensure\n        // `isPositioned` will be `false` initially on the next open, avoid\n        // setting it to `true` when `open === false` (must be specified).\n        isPositioned: openRef.current !== false\n      };\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        ReactDOM.flushSync(() => {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef, openRef]);\n  index(() => {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData(data => ({\n        ...data,\n        isPositioned: false\n      }));\n    }\n  }, [open]);\n  const isMountedRef = React.useRef(false);\n  index(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  index(() => {\n    if (referenceEl) referenceRef.current = referenceEl;\n    if (floatingEl) floatingRef.current = floatingEl;\n    if (referenceEl && floatingEl) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(referenceEl, floatingEl, update);\n      }\n      update();\n    }\n  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);\n  const refs = React.useMemo(() => ({\n    reference: referenceRef,\n    floating: floatingRef,\n    setReference,\n    setFloating\n  }), [setReference, setFloating]);\n  const elements = React.useMemo(() => ({\n    reference: referenceEl,\n    floating: floatingEl\n  }), [referenceEl, floatingEl]);\n  const floatingStyles = React.useMemo(() => {\n    const initialStyles = {\n      position: strategy,\n      left: 0,\n      top: 0\n    };\n    if (!elements.floating) {\n      return initialStyles;\n    }\n    const x = roundByDPR(elements.floating, data.x);\n    const y = roundByDPR(elements.floating, data.y);\n    if (transform) {\n      return {\n        ...initialStyles,\n        transform: \"translate(\" + x + \"px, \" + y + \"px)\",\n        ...(getDPR(elements.floating) >= 1.5 && {\n          willChange: 'transform'\n        })\n      };\n    }\n    return {\n      position: strategy,\n      left: x,\n      top: y\n    };\n  }, [strategy, transform, elements.floating, data.x, data.y]);\n  return React.useMemo(() => ({\n    ...data,\n    update,\n    refs,\n    elements,\n    floatingStyles\n  }), [data, update, refs, elements, floatingStyles]);\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow$1 = options => {\n  function isRef(value) {\n    return {}.hasOwnProperty.call(value, 'current');\n  }\n  return {\n    name: 'arrow',\n    options,\n    fn(state) {\n      const {\n        element,\n        padding\n      } = typeof options === 'function' ? options(state) : options;\n      if (element && isRef(element)) {\n        if (element.current != null) {\n          return arrow$2({\n            element: element.current,\n            padding\n          }).fn(state);\n        }\n        return {};\n      }\n      if (element) {\n        return arrow$2({\n          element,\n          padding\n        }).fn(state);\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = (options, deps) => ({\n  ...offset$1(options),\n  options: [options, deps]\n});\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = (options, deps) => ({\n  ...shift$1(options),\n  options: [options, deps]\n});\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = (options, deps) => ({\n  ...limitShift$1(options),\n  options: [options, deps]\n});\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = (options, deps) => ({\n  ...flip$1(options),\n  options: [options, deps]\n});\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = (options, deps) => ({\n  ...size$1(options),\n  options: [options, deps]\n});\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = (options, deps) => ({\n  ...autoPlacement$1(options),\n  options: [options, deps]\n});\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = (options, deps) => ({\n  ...hide$1(options),\n  options: [options, deps]\n});\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = (options, deps) => ({\n  ...inline$1(options),\n  options: [options, deps]\n});\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = (options, deps) => ({\n  ...arrow$1(options),\n  options: [options, deps]\n});\n\nexport { arrow, autoPlacement, flip, hide, inline, limitShift, offset, shift, size, useFloating };\n","import * as React from 'react';\nimport { useLayoutEffect, useEffect, useRef } from 'react';\nimport { stopEvent, getDocument, isMouseLikePointerType, contains, activeElement, isSafari, isTypeableCombobox, isVirtualClick, isVirtualPointerEvent, getTarget, getPlatform, isTypeableElement, isReactEvent, isRootElement, isEventTargetWithin, isMac, getUserAgent } from '@floating-ui/react/utils';\nimport { floor, evaluate, max, min, round } from '@floating-ui/utils';\nimport { getComputedStyle, isElement, getNodeName, isHTMLElement, getWindow, isLastTraversableNode, getParentNode, isWebKit } from '@floating-ui/utils/dom';\nimport { tabbable, isTabbable } from 'tabbable';\nimport * as ReactDOM from 'react-dom';\nimport { getOverflowAncestors, useFloating as useFloating$1, offset, detectOverflow } from '@floating-ui/react-dom';\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/react-dom';\n\n/**\n * Merges an array of refs into a single memoized callback ref or `null`.\n * @see https://floating-ui.com/docs/react-utils#usemergerefs\n */\nfunction useMergeRefs(refs) {\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return value => {\n      refs.forEach(ref => {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref != null) {\n          ref.current = value;\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n\n// https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379\nconst SafeReact = {\n  ...React\n};\n\nconst useInsertionEffect = SafeReact.useInsertionEffect;\nconst useSafeInsertionEffect = useInsertionEffect || (fn => fn());\nfunction useEffectEvent(callback) {\n  const ref = React.useRef(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      throw new Error('Cannot call an event handler while rendering.');\n    }\n  });\n  useSafeInsertionEffect(() => {\n    ref.current = callback;\n  });\n  return React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return ref.current == null ? void 0 : ref.current(...args);\n  }, []);\n}\n\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\nfunction isDifferentRow(index, cols, prevRow) {\n  return Math.floor(index / cols) !== prevRow;\n}\nfunction isIndexOutOfBounds(listRef, index) {\n  return index < 0 || index >= listRef.current.length;\n}\nfunction getMinIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    disabledIndices\n  });\n}\nfunction getMaxIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    decrement: true,\n    startingIndex: listRef.current.length,\n    disabledIndices\n  });\n}\nfunction findNonDisabledIndex(listRef, _temp) {\n  let {\n    startingIndex = -1,\n    decrement = false,\n    disabledIndices,\n    amount = 1\n  } = _temp === void 0 ? {} : _temp;\n  const list = listRef.current;\n  let index = startingIndex;\n  do {\n    index += decrement ? -amount : amount;\n  } while (index >= 0 && index <= list.length - 1 && isDisabled(list, index, disabledIndices));\n  return index;\n}\nfunction getGridNavigatedIndex(elementsRef, _ref) {\n  let {\n    event,\n    orientation,\n    loop,\n    rtl,\n    cols,\n    disabledIndices,\n    minIndex,\n    maxIndex,\n    prevIndex,\n    stopEvent: stop = false\n  } = _ref;\n  let nextIndex = prevIndex;\n  if (event.key === ARROW_UP) {\n    stop && stopEvent(event);\n    if (prevIndex === -1) {\n      nextIndex = maxIndex;\n    } else {\n      nextIndex = findNonDisabledIndex(elementsRef, {\n        startingIndex: nextIndex,\n        amount: cols,\n        decrement: true,\n        disabledIndices\n      });\n      if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {\n        const col = prevIndex % cols;\n        const maxCol = maxIndex % cols;\n        const offset = maxIndex - (maxCol - col);\n        if (maxCol === col) {\n          nextIndex = maxIndex;\n        } else {\n          nextIndex = maxCol > col ? offset : offset - cols;\n        }\n      }\n    }\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\n      nextIndex = prevIndex;\n    }\n  }\n  if (event.key === ARROW_DOWN) {\n    stop && stopEvent(event);\n    if (prevIndex === -1) {\n      nextIndex = minIndex;\n    } else {\n      nextIndex = findNonDisabledIndex(elementsRef, {\n        startingIndex: prevIndex,\n        amount: cols,\n        disabledIndices\n      });\n      if (loop && prevIndex + cols > maxIndex) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex % cols - cols,\n          amount: cols,\n          disabledIndices\n        });\n      }\n    }\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\n      nextIndex = prevIndex;\n    }\n  }\n\n  // Remains on the same row/column.\n  if (orientation === 'both') {\n    const prevRow = floor(prevIndex / cols);\n    if (event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT)) {\n      stop && stopEvent(event);\n      if (prevIndex % cols !== cols - 1) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex,\n          disabledIndices\n        });\n        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {\n          nextIndex = findNonDisabledIndex(elementsRef, {\n            startingIndex: prevIndex - prevIndex % cols - 1,\n            disabledIndices\n          });\n        }\n      } else if (loop) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex - prevIndex % cols - 1,\n          disabledIndices\n        });\n      }\n      if (isDifferentRow(nextIndex, cols, prevRow)) {\n        nextIndex = prevIndex;\n      }\n    }\n    if (event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT)) {\n      stop && stopEvent(event);\n      if (prevIndex % cols !== 0) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex,\n          decrement: true,\n          disabledIndices\n        });\n        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {\n          nextIndex = findNonDisabledIndex(elementsRef, {\n            startingIndex: prevIndex + (cols - prevIndex % cols),\n            decrement: true,\n            disabledIndices\n          });\n        }\n      } else if (loop) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex + (cols - prevIndex % cols),\n          decrement: true,\n          disabledIndices\n        });\n      }\n      if (isDifferentRow(nextIndex, cols, prevRow)) {\n        nextIndex = prevIndex;\n      }\n    }\n    const lastRow = floor(maxIndex / cols) === prevRow;\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\n      if (loop && lastRow) {\n        nextIndex = event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT) ? maxIndex : findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex - prevIndex % cols - 1,\n          disabledIndices\n        });\n      } else {\n        nextIndex = prevIndex;\n      }\n    }\n  }\n  return nextIndex;\n}\n\n/** For each cell index, gets the item index that occupies that cell */\nfunction buildCellMap(sizes, cols, dense) {\n  const cellMap = [];\n  let startIndex = 0;\n  sizes.forEach((_ref2, index) => {\n    let {\n      width,\n      height\n    } = _ref2;\n    if (width > cols) {\n      if (process.env.NODE_ENV !== \"production\") {\n        throw new Error(\"[Floating UI]: Invalid grid - item width at index \" + index + \" is greater than grid columns\");\n      }\n    }\n    let itemPlaced = false;\n    if (dense) {\n      startIndex = 0;\n    }\n    while (!itemPlaced) {\n      const targetCells = [];\n      for (let i = 0; i < width; i++) {\n        for (let j = 0; j < height; j++) {\n          targetCells.push(startIndex + i + j * cols);\n        }\n      }\n      if (startIndex % cols + width <= cols && targetCells.every(cell => cellMap[cell] == null)) {\n        targetCells.forEach(cell => {\n          cellMap[cell] = index;\n        });\n        itemPlaced = true;\n      } else {\n        startIndex++;\n      }\n    }\n  });\n\n  // convert into a non-sparse array\n  return [...cellMap];\n}\n\n/** Gets cell index of an item's corner or -1 when index is -1. */\nfunction getCellIndexOfCorner(index, sizes, cellMap, cols, corner) {\n  if (index === -1) return -1;\n  const firstCellIndex = cellMap.indexOf(index);\n  const sizeItem = sizes[index];\n  switch (corner) {\n    case 'tl':\n      return firstCellIndex;\n    case 'tr':\n      if (!sizeItem) {\n        return firstCellIndex;\n      }\n      return firstCellIndex + sizeItem.width - 1;\n    case 'bl':\n      if (!sizeItem) {\n        return firstCellIndex;\n      }\n      return firstCellIndex + (sizeItem.height - 1) * cols;\n    case 'br':\n      return cellMap.lastIndexOf(index);\n  }\n}\n\n/** Gets all cell indices that correspond to the specified indices */\nfunction getCellIndices(indices, cellMap) {\n  return cellMap.flatMap((index, cellIndex) => indices.includes(index) ? [cellIndex] : []);\n}\nfunction isDisabled(list, index, disabledIndices) {\n  if (disabledIndices) {\n    return disabledIndices.includes(index);\n  }\n  const element = list[index];\n  return element == null || element.hasAttribute('disabled') || element.getAttribute('aria-disabled') === 'true';\n}\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\nfunction sortByDocumentPosition(a, b) {\n  const position = a.compareDocumentPosition(b);\n  if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n    return -1;\n  }\n  if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {\n    return 1;\n  }\n  return 0;\n}\nfunction areMapsEqual(map1, map2) {\n  if (map1.size !== map2.size) {\n    return false;\n  }\n  for (const [key, value] of map1.entries()) {\n    if (value !== map2.get(key)) {\n      return false;\n    }\n  }\n  return true;\n}\nconst FloatingListContext = /*#__PURE__*/React.createContext({\n  register: () => {},\n  unregister: () => {},\n  map: /*#__PURE__*/new Map(),\n  elementsRef: {\n    current: []\n  }\n});\n/**\n * Provides context for a list of items within the floating element.\n * @see https://floating-ui.com/docs/FloatingList\n */\nfunction FloatingList(props) {\n  const {\n    children,\n    elementsRef,\n    labelsRef\n  } = props;\n  const [map, setMap] = React.useState(() => new Map());\n  const register = React.useCallback(node => {\n    setMap(prevMap => new Map(prevMap).set(node, null));\n  }, []);\n  const unregister = React.useCallback(node => {\n    setMap(prevMap => {\n      const map = new Map(prevMap);\n      map.delete(node);\n      return map;\n    });\n  }, []);\n  index(() => {\n    const newMap = new Map(map);\n    const nodes = Array.from(newMap.keys()).sort(sortByDocumentPosition);\n    nodes.forEach((node, index) => {\n      newMap.set(node, index);\n    });\n    if (!areMapsEqual(map, newMap)) {\n      setMap(newMap);\n    }\n  }, [map]);\n  return /*#__PURE__*/React.createElement(FloatingListContext.Provider, {\n    value: React.useMemo(() => ({\n      register,\n      unregister,\n      map,\n      elementsRef,\n      labelsRef\n    }), [register, unregister, map, elementsRef, labelsRef])\n  }, children);\n}\n/**\n * Used to register a list item and its index (DOM position) in the\n * `FloatingList`.\n * @see https://floating-ui.com/docs/FloatingList#uselistitem\n */\nfunction useListItem(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    label\n  } = props;\n  const {\n    register,\n    unregister,\n    map,\n    elementsRef,\n    labelsRef\n  } = React.useContext(FloatingListContext);\n  const [index$1, setIndex] = React.useState(null);\n  const componentRef = React.useRef(null);\n  const ref = React.useCallback(node => {\n    componentRef.current = node;\n    if (index$1 !== null) {\n      elementsRef.current[index$1] = node;\n      if (labelsRef) {\n        var _node$textContent;\n        const isLabelDefined = label !== undefined;\n        labelsRef.current[index$1] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;\n      }\n    }\n  }, [index$1, elementsRef, labelsRef, label]);\n  index(() => {\n    const node = componentRef.current;\n    if (node) {\n      register(node);\n      return () => {\n        unregister(node);\n      };\n    }\n  }, [register, unregister]);\n  index(() => {\n    const index = componentRef.current ? map.get(componentRef.current) : null;\n    if (index != null) {\n      setIndex(index);\n    }\n  }, [map]);\n  return React.useMemo(() => ({\n    ref,\n    index: index$1 == null ? -1 : index$1\n  }), [index$1, ref]);\n}\n\nfunction renderJsx(render, computedProps) {\n  if (typeof render === 'function') {\n    return render(computedProps);\n  }\n  if (render) {\n    return /*#__PURE__*/React.cloneElement(render, computedProps);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", computedProps);\n}\nconst CompositeContext = /*#__PURE__*/React.createContext({\n  activeIndex: 0,\n  onNavigate: () => {}\n});\nconst horizontalKeys = [ARROW_LEFT, ARROW_RIGHT];\nconst verticalKeys = [ARROW_UP, ARROW_DOWN];\nconst allKeys = [...horizontalKeys, ...verticalKeys];\n\n/**\n * Creates a single tab stop whose items are navigated by arrow keys, which\n * provides list navigation outside of floating element contexts.\n *\n * This is useful to enable navigation of a list of items that aren’t part of a\n * floating element. A menubar is an example of a composite, with each reference\n * element being an item.\n * @see https://floating-ui.com/docs/Composite\n */\nconst Composite = /*#__PURE__*/React.forwardRef(function Composite(props, forwardedRef) {\n  const {\n    render,\n    orientation = 'both',\n    loop = true,\n    rtl = false,\n    cols = 1,\n    disabledIndices,\n    activeIndex: externalActiveIndex,\n    onNavigate: externalSetActiveIndex,\n    itemSizes,\n    dense = false,\n    ...domProps\n  } = props;\n  const [internalActiveIndex, internalSetActiveIndex] = React.useState(0);\n  const activeIndex = externalActiveIndex != null ? externalActiveIndex : internalActiveIndex;\n  const onNavigate = useEffectEvent(externalSetActiveIndex != null ? externalSetActiveIndex : internalSetActiveIndex);\n  const elementsRef = React.useRef([]);\n  const renderElementProps = render && typeof render !== 'function' ? render.props : {};\n  const contextValue = React.useMemo(() => ({\n    activeIndex,\n    onNavigate\n  }), [activeIndex, onNavigate]);\n  const isGrid = cols > 1;\n  function handleKeyDown(event) {\n    if (!allKeys.includes(event.key)) return;\n    let nextIndex = activeIndex;\n    const minIndex = getMinIndex(elementsRef, disabledIndices);\n    const maxIndex = getMaxIndex(elementsRef, disabledIndices);\n    const horizontalEndKey = rtl ? ARROW_LEFT : ARROW_RIGHT;\n    const horizontalStartKey = rtl ? ARROW_RIGHT : ARROW_LEFT;\n    if (isGrid) {\n      const sizes = itemSizes || Array.from({\n        length: elementsRef.current.length\n      }, () => ({\n        width: 1,\n        height: 1\n      }));\n      // To calculate movements on the grid, we use hypothetical cell indices\n      // as if every item was 1x1, then convert back to real indices.\n      const cellMap = buildCellMap(sizes, cols, dense);\n      const minGridIndex = cellMap.findIndex(index => index != null && !isDisabled(elementsRef.current, index, disabledIndices));\n      // last enabled index\n      const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex) => index != null && !isDisabled(elementsRef.current, index, disabledIndices) ? cellIndex : foundIndex, -1);\n      const maybeNextIndex = cellMap[getGridNavigatedIndex({\n        current: cellMap.map(itemIndex => itemIndex ? elementsRef.current[itemIndex] : null)\n      }, {\n        event,\n        orientation,\n        loop,\n        rtl,\n        cols,\n        // treat undefined (empty grid spaces) as disabled indices so we\n        // don't end up in them\n        disabledIndices: getCellIndices([...(disabledIndices || elementsRef.current.map((_, index) => isDisabled(elementsRef.current, index) ? index : undefined)), undefined], cellMap),\n        minIndex: minGridIndex,\n        maxIndex: maxGridIndex,\n        prevIndex: getCellIndexOfCorner(activeIndex > maxIndex ? minIndex : activeIndex, sizes, cellMap, cols,\n        // use a corner matching the edge closest to the direction we're\n        // moving in so we don't end up in the same item. Prefer\n        // top/left over bottom/right.\n        event.key === ARROW_DOWN ? 'bl' : event.key === horizontalEndKey ? 'tr' : 'tl')\n      })];\n      if (maybeNextIndex != null) {\n        nextIndex = maybeNextIndex;\n      }\n    }\n    const toEndKeys = {\n      horizontal: [horizontalEndKey],\n      vertical: [ARROW_DOWN],\n      both: [horizontalEndKey, ARROW_DOWN]\n    }[orientation];\n    const toStartKeys = {\n      horizontal: [horizontalStartKey],\n      vertical: [ARROW_UP],\n      both: [horizontalStartKey, ARROW_UP]\n    }[orientation];\n    const preventedKeys = isGrid ? allKeys : {\n      horizontal: horizontalKeys,\n      vertical: verticalKeys,\n      both: allKeys\n    }[orientation];\n    if (nextIndex === activeIndex && [...toEndKeys, ...toStartKeys].includes(event.key)) {\n      if (loop && nextIndex === maxIndex && toEndKeys.includes(event.key)) {\n        nextIndex = minIndex;\n      } else if (loop && nextIndex === minIndex && toStartKeys.includes(event.key)) {\n        nextIndex = maxIndex;\n      } else {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: nextIndex,\n          decrement: toStartKeys.includes(event.key),\n          disabledIndices\n        });\n      }\n    }\n    if (nextIndex !== activeIndex && !isIndexOutOfBounds(elementsRef, nextIndex)) {\n      var _elementsRef$current$;\n      event.stopPropagation();\n      if (preventedKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n      onNavigate(nextIndex);\n      (_elementsRef$current$ = elementsRef.current[nextIndex]) == null || _elementsRef$current$.focus();\n    }\n  }\n  const computedProps = {\n    ...domProps,\n    ...renderElementProps,\n    ref: forwardedRef,\n    'aria-orientation': orientation === 'both' ? undefined : orientation,\n    onKeyDown(e) {\n      domProps.onKeyDown == null || domProps.onKeyDown(e);\n      renderElementProps.onKeyDown == null || renderElementProps.onKeyDown(e);\n      handleKeyDown(e);\n    }\n  };\n  return /*#__PURE__*/React.createElement(CompositeContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(FloatingList, {\n    elementsRef: elementsRef\n  }, renderJsx(render, computedProps)));\n});\n/**\n * @see https://floating-ui.com/docs/Composite\n */\nconst CompositeItem = /*#__PURE__*/React.forwardRef(function CompositeItem(props, forwardedRef) {\n  const {\n    render,\n    ...domProps\n  } = props;\n  const renderElementProps = render && typeof render !== 'function' ? render.props : {};\n  const {\n    activeIndex,\n    onNavigate\n  } = React.useContext(CompositeContext);\n  const {\n    ref,\n    index\n  } = useListItem();\n  const mergedRef = useMergeRefs([ref, forwardedRef, renderElementProps.ref]);\n  const isActive = activeIndex === index;\n  const computedProps = {\n    ...domProps,\n    ...renderElementProps,\n    ref: mergedRef,\n    tabIndex: isActive ? 0 : -1,\n    'data-active': isActive ? '' : undefined,\n    onFocus(e) {\n      domProps.onFocus == null || domProps.onFocus(e);\n      renderElementProps.onFocus == null || renderElementProps.onFocus(e);\n      onNavigate(index);\n    }\n  };\n  return renderJsx(render, computedProps);\n});\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nlet serverHandoffComplete = false;\nlet count = 0;\nconst genId = () => // Ensure the id is unique with multiple independent versions of Floating UI\n// on <React 18\n\"floating-ui-\" + Math.random().toString(36).slice(2, 6) + count++;\nfunction useFloatingId() {\n  const [id, setId] = React.useState(() => serverHandoffComplete ? genId() : undefined);\n  index(() => {\n    if (id == null) {\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  React.useEffect(() => {\n    serverHandoffComplete = true;\n  }, []);\n  return id;\n}\nconst useReactId = SafeReact.useId;\n\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n * @see https://floating-ui.com/docs/react-utils#useid\n */\nconst useId = useReactId || useFloatingId;\n\nlet devMessageSet;\nif (process.env.NODE_ENV !== \"production\") {\n  devMessageSet = /*#__PURE__*/new Set();\n}\nfunction warn() {\n  var _devMessageSet;\n  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {\n    messages[_key] = arguments[_key];\n  }\n  const message = \"Floating UI: \" + messages.join(' ');\n  if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {\n    var _devMessageSet2;\n    (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);\n    console.warn(message);\n  }\n}\nfunction error() {\n  var _devMessageSet3;\n  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    messages[_key2] = arguments[_key2];\n  }\n  const message = \"Floating UI: \" + messages.join(' ');\n  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {\n    var _devMessageSet4;\n    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);\n    console.error(message);\n  }\n}\n\n/**\n * Renders a pointing arrow triangle.\n * @see https://floating-ui.com/docs/FloatingArrow\n */\nconst FloatingArrow = /*#__PURE__*/React.forwardRef(function FloatingArrow(props, ref) {\n  const {\n    context: {\n      placement,\n      elements: {\n        floating\n      },\n      middlewareData: {\n        arrow,\n        shift\n      }\n    },\n    width = 14,\n    height = 7,\n    tipRadius = 0,\n    strokeWidth = 0,\n    staticOffset,\n    stroke,\n    d,\n    style: {\n      transform,\n      ...restStyle\n    } = {},\n    ...rest\n  } = props;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!ref) {\n      warn('The `ref` prop is required for `FloatingArrow`.');\n    }\n  }\n  const clipPathId = useId();\n  const [isRTL, setIsRTL] = React.useState(false);\n\n  // https://github.com/floating-ui/floating-ui/issues/2932\n  index(() => {\n    if (!floating) return;\n    const isRTL = getComputedStyle(floating).direction === 'rtl';\n    if (isRTL) {\n      setIsRTL(true);\n    }\n  }, [floating]);\n  if (!floating) {\n    return null;\n  }\n  const [side, alignment] = placement.split('-');\n  const isVerticalSide = side === 'top' || side === 'bottom';\n  let computedStaticOffset = staticOffset;\n  if (isVerticalSide && shift != null && shift.x || !isVerticalSide && shift != null && shift.y) {\n    computedStaticOffset = null;\n  }\n\n  // Strokes must be double the border width, this ensures the stroke's width\n  // works as you'd expect.\n  const computedStrokeWidth = strokeWidth * 2;\n  const halfStrokeWidth = computedStrokeWidth / 2;\n  const svgX = width / 2 * (tipRadius / -8 + 1);\n  const svgY = height / 2 * tipRadius / 4;\n  const isCustomShape = !!d;\n  const yOffsetProp = computedStaticOffset && alignment === 'end' ? 'bottom' : 'top';\n  let xOffsetProp = computedStaticOffset && alignment === 'end' ? 'right' : 'left';\n  if (computedStaticOffset && isRTL) {\n    xOffsetProp = alignment === 'end' ? 'left' : 'right';\n  }\n  const arrowX = (arrow == null ? void 0 : arrow.x) != null ? computedStaticOffset || arrow.x : '';\n  const arrowY = (arrow == null ? void 0 : arrow.y) != null ? computedStaticOffset || arrow.y : '';\n  const dValue = d || 'M0,0' + (\" H\" + width) + (\" L\" + (width - svgX) + \",\" + (height - svgY)) + (\" Q\" + width / 2 + \",\" + height + \" \" + svgX + \",\" + (height - svgY)) + ' Z';\n  const rotation = {\n    top: isCustomShape ? 'rotate(180deg)' : '',\n    left: isCustomShape ? 'rotate(90deg)' : 'rotate(-90deg)',\n    bottom: isCustomShape ? '' : 'rotate(180deg)',\n    right: isCustomShape ? 'rotate(-90deg)' : 'rotate(90deg)'\n  }[side];\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({}, rest, {\n    \"aria-hidden\": true,\n    ref: ref,\n    width: isCustomShape ? width : width + computedStrokeWidth,\n    height: width,\n    viewBox: \"0 0 \" + width + \" \" + (height > width ? height : width),\n    style: {\n      position: 'absolute',\n      pointerEvents: 'none',\n      [xOffsetProp]: arrowX,\n      [yOffsetProp]: arrowY,\n      [side]: isVerticalSide || isCustomShape ? '100%' : \"calc(100% - \" + computedStrokeWidth / 2 + \"px)\",\n      transform: [rotation, transform].filter(t => !!t).join(' '),\n      ...restStyle\n    }\n  }), computedStrokeWidth > 0 && /*#__PURE__*/React.createElement(\"path\", {\n    clipPath: \"url(#\" + clipPathId + \")\",\n    fill: \"none\",\n    stroke: stroke\n    // Account for the stroke on the fill path rendered below.\n    ,\n    strokeWidth: computedStrokeWidth + (d ? 0 : 1),\n    d: dValue\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    stroke: computedStrokeWidth && !d ? rest.fill : 'none',\n    d: dValue\n  }), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: clipPathId\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: -halfStrokeWidth,\n    y: halfStrokeWidth * (isCustomShape ? -1 : 1),\n    width: width + computedStrokeWidth,\n    height: width\n  })));\n});\n\nfunction createPubSub() {\n  const map = new Map();\n  return {\n    emit(event, data) {\n      var _map$get;\n      (_map$get = map.get(event)) == null || _map$get.forEach(handler => handler(data));\n    },\n    on(event, listener) {\n      map.set(event, [...(map.get(event) || []), listener]);\n    },\n    off(event, listener) {\n      var _map$get2;\n      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter(l => l !== listener)) || []);\n    }\n  };\n}\n\nconst FloatingNodeContext = /*#__PURE__*/React.createContext(null);\nconst FloatingTreeContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the parent node id for nested floating elements, if available.\n * Returns `null` for top-level floating elements.\n */\nconst useFloatingParentNodeId = () => {\n  var _React$useContext;\n  return ((_React$useContext = React.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\n};\n\n/**\n * Returns the nearest floating tree context, if available.\n */\nconst useFloatingTree = () => React.useContext(FloatingTreeContext);\n\n/**\n * Registers a node into the `FloatingTree`, returning its id.\n * @see https://floating-ui.com/docs/FloatingTree\n */\nfunction useFloatingNodeId(customParentId) {\n  const id = useId();\n  const tree = useFloatingTree();\n  const reactParentId = useFloatingParentNodeId();\n  const parentId = customParentId || reactParentId;\n  index(() => {\n    const node = {\n      id,\n      parentId\n    };\n    tree == null || tree.addNode(node);\n    return () => {\n      tree == null || tree.removeNode(node);\n    };\n  }, [tree, id, parentId]);\n  return id;\n}\n/**\n * Provides parent node context for nested floating elements.\n * @see https://floating-ui.com/docs/FloatingTree\n */\nfunction FloatingNode(props) {\n  const {\n    children,\n    id\n  } = props;\n  const parentId = useFloatingParentNodeId();\n  return /*#__PURE__*/React.createElement(FloatingNodeContext.Provider, {\n    value: React.useMemo(() => ({\n      id,\n      parentId\n    }), [id, parentId])\n  }, children);\n}\n/**\n * Provides context for nested floating elements when they are not children of\n * each other on the DOM.\n * This is not necessary in all cases, except when there must be explicit communication between parent and child floating elements. It is necessary for:\n * - The `bubbles` option in the `useDismiss()` Hook\n * - Nested virtual list navigation\n * - Nested floating elements that each open on hover\n * - Custom communication between parent and child floating elements\n * @see https://floating-ui.com/docs/FloatingTree\n */\nfunction FloatingTree(props) {\n  const {\n    children\n  } = props;\n  const nodesRef = React.useRef([]);\n  const addNode = React.useCallback(node => {\n    nodesRef.current = [...nodesRef.current, node];\n  }, []);\n  const removeNode = React.useCallback(node => {\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\n  }, []);\n  const events = React.useState(() => createPubSub())[0];\n  return /*#__PURE__*/React.createElement(FloatingTreeContext.Provider, {\n    value: React.useMemo(() => ({\n      nodesRef,\n      addNode,\n      removeNode,\n      events\n    }), [addNode, removeNode, events])\n  }, children);\n}\n\nfunction createAttribute(name) {\n  return \"data-floating-ui-\" + name;\n}\n\nfunction useLatestRef(value) {\n  const ref = useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\nconst safePolygonIdentifier = /*#__PURE__*/createAttribute('safe-polygon');\nfunction getDelay(value, prop, pointerType) {\n  if (pointerType && !isMouseLikePointerType(pointerType)) {\n    return 0;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value == null ? void 0 : value[prop];\n}\n/**\n * Opens the floating element while hovering over the reference element, like\n * CSS `:hover`.\n * @see https://floating-ui.com/docs/useHover\n */\nfunction useHover(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    elements\n  } = context;\n  const {\n    enabled = true,\n    delay = 0,\n    handleClose = null,\n    mouseOnly = false,\n    restMs = 0,\n    move = true\n  } = props;\n  const tree = useFloatingTree();\n  const parentId = useFloatingParentNodeId();\n  const handleCloseRef = useLatestRef(handleClose);\n  const delayRef = useLatestRef(delay);\n  const openRef = useLatestRef(open);\n  const pointerTypeRef = React.useRef();\n  const timeoutRef = React.useRef(-1);\n  const handlerRef = React.useRef();\n  const restTimeoutRef = React.useRef(-1);\n  const blockMouseMoveRef = React.useRef(true);\n  const performedPointerEventsMutationRef = React.useRef(false);\n  const unbindMouseMoveRef = React.useRef(() => {});\n  const restTimeoutPendingRef = React.useRef(false);\n  const isHoverOpen = React.useCallback(() => {\n    var _dataRef$current$open;\n    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\n  }, [dataRef]);\n\n  // When closing before opening, clear the delay timeouts to cancel it\n  // from showing.\n  React.useEffect(() => {\n    if (!enabled) return;\n    function onOpenChange(_ref) {\n      let {\n        open\n      } = _ref;\n      if (!open) {\n        clearTimeout(timeoutRef.current);\n        clearTimeout(restTimeoutRef.current);\n        blockMouseMoveRef.current = true;\n        restTimeoutPendingRef.current = false;\n      }\n    }\n    events.on('openchange', onOpenChange);\n    return () => {\n      events.off('openchange', onOpenChange);\n    };\n  }, [enabled, events]);\n  React.useEffect(() => {\n    if (!enabled) return;\n    if (!handleCloseRef.current) return;\n    if (!open) return;\n    function onLeave(event) {\n      if (isHoverOpen()) {\n        onOpenChange(false, event, 'hover');\n      }\n    }\n    const html = getDocument(elements.floating).documentElement;\n    html.addEventListener('mouseleave', onLeave);\n    return () => {\n      html.removeEventListener('mouseleave', onLeave);\n    };\n  }, [elements.floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);\n  const closeWithDelay = React.useCallback(function (event, runElseBranch, reason) {\n    if (runElseBranch === void 0) {\n      runElseBranch = true;\n    }\n    if (reason === void 0) {\n      reason = 'hover';\n    }\n    const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);\n    if (closeDelay && !handlerRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);\n    } else if (runElseBranch) {\n      clearTimeout(timeoutRef.current);\n      onOpenChange(false, event, reason);\n    }\n  }, [delayRef, onOpenChange]);\n  const cleanupMouseMoveHandler = useEffectEvent(() => {\n    unbindMouseMoveRef.current();\n    handlerRef.current = undefined;\n  });\n  const clearPointerEvents = useEffectEvent(() => {\n    if (performedPointerEventsMutationRef.current) {\n      const body = getDocument(elements.floating).body;\n      body.style.pointerEvents = '';\n      body.removeAttribute(safePolygonIdentifier);\n      performedPointerEventsMutationRef.current = false;\n    }\n  });\n  const isClickLikeOpenEvent = useEffectEvent(() => {\n    return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\n  });\n\n  // Registering the mouse events on the reference directly to bypass React's\n  // delegation system. If the cursor was on a disabled element and then entered\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\n  React.useEffect(() => {\n    if (!enabled) return;\n    function onMouseEnter(event) {\n      clearTimeout(timeoutRef.current);\n      blockMouseMoveRef.current = false;\n      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && !getDelay(delayRef.current, 'open')) {\n        return;\n      }\n      const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);\n      if (openDelay) {\n        timeoutRef.current = window.setTimeout(() => {\n          if (!openRef.current) {\n            onOpenChange(true, event, 'hover');\n          }\n        }, openDelay);\n      } else if (!open) {\n        onOpenChange(true, event, 'hover');\n      }\n    }\n    function onMouseLeave(event) {\n      if (isClickLikeOpenEvent()) return;\n      unbindMouseMoveRef.current();\n      const doc = getDocument(elements.floating);\n      clearTimeout(restTimeoutRef.current);\n      restTimeoutPendingRef.current = false;\n      if (handleCloseRef.current && dataRef.current.floatingContext) {\n        // Prevent clearing `onScrollMouseLeave` timeout.\n        if (!open) {\n          clearTimeout(timeoutRef.current);\n        }\n        handlerRef.current = handleCloseRef.current({\n          ...dataRef.current.floatingContext,\n          tree,\n          x: event.clientX,\n          y: event.clientY,\n          onClose() {\n            clearPointerEvents();\n            cleanupMouseMoveHandler();\n            if (!isClickLikeOpenEvent()) {\n              closeWithDelay(event, true, 'safe-polygon');\n            }\n          }\n        });\n        const handler = handlerRef.current;\n        doc.addEventListener('mousemove', handler);\n        unbindMouseMoveRef.current = () => {\n          doc.removeEventListener('mousemove', handler);\n        };\n        return;\n      }\n\n      // Allow interactivity without `safePolygon` on touch devices. With a\n      // pointer, a short close delay is an alternative, so it should work\n      // consistently.\n      const shouldClose = pointerTypeRef.current === 'touch' ? !contains(elements.floating, event.relatedTarget) : true;\n      if (shouldClose) {\n        closeWithDelay(event);\n      }\n    }\n\n    // Ensure the floating element closes after scrolling even if the pointer\n    // did not move.\n    // https://github.com/floating-ui/floating-ui/discussions/1692\n    function onScrollMouseLeave(event) {\n      if (isClickLikeOpenEvent()) return;\n      if (!dataRef.current.floatingContext) return;\n      handleCloseRef.current == null || handleCloseRef.current({\n        ...dataRef.current.floatingContext,\n        tree,\n        x: event.clientX,\n        y: event.clientY,\n        onClose() {\n          clearPointerEvents();\n          cleanupMouseMoveHandler();\n          if (!isClickLikeOpenEvent()) {\n            closeWithDelay(event);\n          }\n        }\n      })(event);\n    }\n    if (isElement(elements.domReference)) {\n      var _elements$floating;\n      const ref = elements.domReference;\n      open && ref.addEventListener('mouseleave', onScrollMouseLeave);\n      (_elements$floating = elements.floating) == null || _elements$floating.addEventListener('mouseleave', onScrollMouseLeave);\n      move && ref.addEventListener('mousemove', onMouseEnter, {\n        once: true\n      });\n      ref.addEventListener('mouseenter', onMouseEnter);\n      ref.addEventListener('mouseleave', onMouseLeave);\n      return () => {\n        var _elements$floating2;\n        open && ref.removeEventListener('mouseleave', onScrollMouseLeave);\n        (_elements$floating2 = elements.floating) == null || _elements$floating2.removeEventListener('mouseleave', onScrollMouseLeave);\n        move && ref.removeEventListener('mousemove', onMouseEnter);\n        ref.removeEventListener('mouseenter', onMouseEnter);\n        ref.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n  }, [elements, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, openRef, tree, delayRef, handleCloseRef, dataRef, isClickLikeOpenEvent]);\n\n  // Block pointer-events of every element other than the reference and floating\n  // while the floating element is open and has a `handleClose` handler. Also\n  // handles nested floating elements.\n  // https://github.com/floating-ui/floating-ui/issues/1722\n  index(() => {\n    var _handleCloseRef$curre;\n    if (!enabled) return;\n    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {\n      performedPointerEventsMutationRef.current = true;\n      const floatingEl = elements.floating;\n      if (isElement(elements.domReference) && floatingEl) {\n        var _tree$nodesRef$curren;\n        const body = getDocument(elements.floating).body;\n        body.setAttribute(safePolygonIdentifier, '');\n        const ref = elements.domReference;\n        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;\n        if (parentFloating) {\n          parentFloating.style.pointerEvents = '';\n        }\n        body.style.pointerEvents = 'none';\n        ref.style.pointerEvents = 'auto';\n        floatingEl.style.pointerEvents = 'auto';\n        return () => {\n          body.style.pointerEvents = '';\n          ref.style.pointerEvents = '';\n          floatingEl.style.pointerEvents = '';\n        };\n      }\n    }\n  }, [enabled, open, parentId, elements, tree, handleCloseRef, isHoverOpen]);\n  index(() => {\n    if (!open) {\n      pointerTypeRef.current = undefined;\n      restTimeoutPendingRef.current = false;\n      cleanupMouseMoveHandler();\n      clearPointerEvents();\n    }\n  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);\n  React.useEffect(() => {\n    return () => {\n      cleanupMouseMoveHandler();\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      clearPointerEvents();\n    };\n  }, [enabled, elements.domReference, cleanupMouseMoveHandler, clearPointerEvents]);\n  const reference = React.useMemo(() => {\n    function setPointerRef(event) {\n      pointerTypeRef.current = event.pointerType;\n    }\n    return {\n      onPointerDown: setPointerRef,\n      onPointerEnter: setPointerRef,\n      onMouseMove(event) {\n        const {\n          nativeEvent\n        } = event;\n        function handleMouseMove() {\n          if (!blockMouseMoveRef.current && !openRef.current) {\n            onOpenChange(true, nativeEvent, 'hover');\n          }\n        }\n        if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current)) {\n          return;\n        }\n        if (open || restMs === 0) {\n          return;\n        }\n\n        // Ignore insignificant movements to account for tremors.\n        if (restTimeoutPendingRef.current && event.movementX ** 2 + event.movementY ** 2 < 2) {\n          return;\n        }\n        clearTimeout(restTimeoutRef.current);\n        if (pointerTypeRef.current === 'touch') {\n          handleMouseMove();\n        } else {\n          restTimeoutPendingRef.current = true;\n          restTimeoutRef.current = window.setTimeout(handleMouseMove, restMs);\n        }\n      }\n    };\n  }, [mouseOnly, onOpenChange, open, openRef, restMs]);\n  const floating = React.useMemo(() => ({\n    onMouseEnter() {\n      clearTimeout(timeoutRef.current);\n    },\n    onMouseLeave(event) {\n      if (!isClickLikeOpenEvent()) {\n        closeWithDelay(event.nativeEvent, false);\n      }\n    }\n  }), [closeWithDelay, isClickLikeOpenEvent]);\n  return React.useMemo(() => enabled ? {\n    reference,\n    floating\n  } : {}, [enabled, reference, floating]);\n}\n\nconst NOOP = () => {};\nconst FloatingDelayGroupContext = /*#__PURE__*/React.createContext({\n  delay: 0,\n  initialDelay: 0,\n  timeoutMs: 0,\n  currentId: null,\n  setCurrentId: NOOP,\n  setState: NOOP,\n  isInstantPhase: false\n});\n\n/**\n * @deprecated\n * Use the return value of `useDelayGroup()` instead.\n */\nconst useDelayGroupContext = () => React.useContext(FloatingDelayGroupContext);\n/**\n * Provides context for a group of floating elements that should share a\n * `delay`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\nfunction FloatingDelayGroup(props) {\n  const {\n    children,\n    delay,\n    timeoutMs = 0\n  } = props;\n  const [state, setState] = React.useReducer((prev, next) => ({\n    ...prev,\n    ...next\n  }), {\n    delay,\n    timeoutMs,\n    initialDelay: delay,\n    currentId: null,\n    isInstantPhase: false\n  });\n  const initialCurrentIdRef = React.useRef(null);\n  const setCurrentId = React.useCallback(currentId => {\n    setState({\n      currentId\n    });\n  }, []);\n  index(() => {\n    if (state.currentId) {\n      if (initialCurrentIdRef.current === null) {\n        initialCurrentIdRef.current = state.currentId;\n      } else if (!state.isInstantPhase) {\n        setState({\n          isInstantPhase: true\n        });\n      }\n    } else {\n      if (state.isInstantPhase) {\n        setState({\n          isInstantPhase: false\n        });\n      }\n      initialCurrentIdRef.current = null;\n    }\n  }, [state.currentId, state.isInstantPhase]);\n  return /*#__PURE__*/React.createElement(FloatingDelayGroupContext.Provider, {\n    value: React.useMemo(() => ({\n      ...state,\n      setState,\n      setCurrentId\n    }), [state, setCurrentId])\n  }, children);\n}\n/**\n * Enables grouping when called inside a component that's a child of a\n * `FloatingDelayGroup`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\nfunction useDelayGroup(context, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    floatingId\n  } = context;\n  const {\n    id: optionId,\n    enabled = true\n  } = options;\n  const id = optionId != null ? optionId : floatingId;\n  const groupContext = useDelayGroupContext();\n  const {\n    currentId,\n    setCurrentId,\n    initialDelay,\n    setState,\n    timeoutMs\n  } = groupContext;\n  index(() => {\n    if (!enabled) return;\n    if (!currentId) return;\n    setState({\n      delay: {\n        open: 1,\n        close: getDelay(initialDelay, 'close')\n      }\n    });\n    if (currentId !== id) {\n      onOpenChange(false);\n    }\n  }, [enabled, id, onOpenChange, setState, currentId, initialDelay]);\n  index(() => {\n    function unset() {\n      onOpenChange(false);\n      setState({\n        delay: initialDelay,\n        currentId: null\n      });\n    }\n    if (!enabled) return;\n    if (!currentId) return;\n    if (!open && currentId === id) {\n      if (timeoutMs) {\n        const timeout = window.setTimeout(unset, timeoutMs);\n        return () => {\n          clearTimeout(timeout);\n        };\n      }\n      unset();\n    }\n  }, [enabled, open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);\n  index(() => {\n    if (!enabled) return;\n    if (setCurrentId === NOOP || !open) return;\n    setCurrentId(id);\n  }, [enabled, open, setCurrentId, id]);\n  return groupContext;\n}\n\nlet rafId = 0;\nfunction enqueueFocus(el, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    preventScroll = false,\n    cancelPrevious = true,\n    sync = false\n  } = options;\n  cancelPrevious && cancelAnimationFrame(rafId);\n  const exec = () => el == null ? void 0 : el.focus({\n    preventScroll\n  });\n  if (sync) {\n    exec();\n  } else {\n    rafId = requestAnimationFrame(exec);\n  }\n}\n\nfunction getAncestors(nodes, id) {\n  var _nodes$find;\n  let allAncestors = [];\n  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;\n  while (currentParentId) {\n    const currentNode = nodes.find(node => node.id === currentParentId);\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\n    if (currentNode) {\n      allAncestors = allAncestors.concat(currentNode);\n    }\n  }\n  return allAncestors;\n}\n\nfunction getChildren(nodes, id) {\n  let allChildren = nodes.filter(node => {\n    var _node$context;\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n  });\n  let currentChildren = allChildren;\n  while (currentChildren.length) {\n    currentChildren = nodes.filter(node => {\n      var _currentChildren;\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\n        var _node$context2;\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n      });\n    });\n    allChildren = allChildren.concat(currentChildren);\n  }\n  return allChildren;\n}\nfunction getDeepestNode(nodes, id) {\n  let deepestNodeId;\n  let maxDepth = -1;\n  function findDeepest(nodeId, depth) {\n    if (depth > maxDepth) {\n      deepestNodeId = nodeId;\n      maxDepth = depth;\n    }\n    const children = getChildren(nodes, nodeId);\n    children.forEach(child => {\n      findDeepest(child.id, depth + 1);\n    });\n  }\n  findDeepest(id, 0);\n  return nodes.find(node => node.id === deepestNodeId);\n}\n\n// Modified to add conditional `aria-hidden` support:\n// https://github.com/theKashey/aria-hidden/blob/9220c8f4a4fd35f63bee5510a9f41a37264382d4/src/index.ts\nlet counterMap = /*#__PURE__*/new WeakMap();\nlet uncontrolledElementsSet = /*#__PURE__*/new WeakSet();\nlet markerMap = {};\nlet lockCount$1 = 0;\nconst supportsInert = () => typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;\nconst unwrapHost = node => node && (node.host || unwrapHost(node.parentNode));\nconst correctElements = (parent, targets) => targets.map(target => {\n  if (parent.contains(target)) {\n    return target;\n  }\n  const correctedTarget = unwrapHost(target);\n  if (parent.contains(correctedTarget)) {\n    return correctedTarget;\n  }\n  return null;\n}).filter(x => x != null);\nfunction applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {\n  const markerName = 'data-floating-ui-inert';\n  const controlAttribute = inert ? 'inert' : ariaHidden ? 'aria-hidden' : null;\n  const avoidElements = correctElements(body, uncorrectedAvoidElements);\n  const elementsToKeep = new Set();\n  const elementsToStop = new Set(avoidElements);\n  const hiddenElements = [];\n  if (!markerMap[markerName]) {\n    markerMap[markerName] = new WeakMap();\n  }\n  const markerCounter = markerMap[markerName];\n  avoidElements.forEach(keep);\n  deep(body);\n  elementsToKeep.clear();\n  function keep(el) {\n    if (!el || elementsToKeep.has(el)) {\n      return;\n    }\n    elementsToKeep.add(el);\n    el.parentNode && keep(el.parentNode);\n  }\n  function deep(parent) {\n    if (!parent || elementsToStop.has(parent)) {\n      return;\n    }\n    [].forEach.call(parent.children, node => {\n      if (getNodeName(node) === 'script') return;\n      if (elementsToKeep.has(node)) {\n        deep(node);\n      } else {\n        const attr = controlAttribute ? node.getAttribute(controlAttribute) : null;\n        const alreadyHidden = attr !== null && attr !== 'false';\n        const counterValue = (counterMap.get(node) || 0) + 1;\n        const markerValue = (markerCounter.get(node) || 0) + 1;\n        counterMap.set(node, counterValue);\n        markerCounter.set(node, markerValue);\n        hiddenElements.push(node);\n        if (counterValue === 1 && alreadyHidden) {\n          uncontrolledElementsSet.add(node);\n        }\n        if (markerValue === 1) {\n          node.setAttribute(markerName, '');\n        }\n        if (!alreadyHidden && controlAttribute) {\n          node.setAttribute(controlAttribute, 'true');\n        }\n      }\n    });\n  }\n  lockCount$1++;\n  return () => {\n    hiddenElements.forEach(element => {\n      const counterValue = (counterMap.get(element) || 0) - 1;\n      const markerValue = (markerCounter.get(element) || 0) - 1;\n      counterMap.set(element, counterValue);\n      markerCounter.set(element, markerValue);\n      if (!counterValue) {\n        if (!uncontrolledElementsSet.has(element) && controlAttribute) {\n          element.removeAttribute(controlAttribute);\n        }\n        uncontrolledElementsSet.delete(element);\n      }\n      if (!markerValue) {\n        element.removeAttribute(markerName);\n      }\n    });\n    lockCount$1--;\n    if (!lockCount$1) {\n      counterMap = new WeakMap();\n      counterMap = new WeakMap();\n      uncontrolledElementsSet = new WeakSet();\n      markerMap = {};\n    }\n  };\n}\nfunction markOthers(avoidElements, ariaHidden, inert) {\n  if (ariaHidden === void 0) {\n    ariaHidden = false;\n  }\n  if (inert === void 0) {\n    inert = false;\n  }\n  const body = getDocument(avoidElements[0]).body;\n  return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll('[aria-live]'))), body, ariaHidden, inert);\n}\n\nconst getTabbableOptions = () => ({\n  getShadowRoot: true,\n  displayCheck:\n  // JSDOM does not support the `tabbable` library. To solve this we can\n  // check if `ResizeObserver` is a real function (not polyfilled), which\n  // determines if the current environment is JSDOM-like.\n  typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'\n});\nfunction getTabbableIn(container, direction) {\n  const allTabbable = tabbable(container, getTabbableOptions());\n  if (direction === 'prev') {\n    allTabbable.reverse();\n  }\n  const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));\n  const nextTabbableElements = allTabbable.slice(activeIndex + 1);\n  return nextTabbableElements[0];\n}\nfunction getNextTabbable() {\n  return getTabbableIn(document.body, 'next');\n}\nfunction getPreviousTabbable() {\n  return getTabbableIn(document.body, 'prev');\n}\nfunction isOutsideEvent(event, container) {\n  const containerElement = container || event.currentTarget;\n  const relatedTarget = event.relatedTarget;\n  return !relatedTarget || !contains(containerElement, relatedTarget);\n}\nfunction disableFocusInside(container) {\n  const tabbableElements = tabbable(container, getTabbableOptions());\n  tabbableElements.forEach(element => {\n    element.dataset.tabindex = element.getAttribute('tabindex') || '';\n    element.setAttribute('tabindex', '-1');\n  });\n}\nfunction enableFocusInside(container) {\n  const elements = container.querySelectorAll('[data-tabindex]');\n  elements.forEach(element => {\n    const tabindex = element.dataset.tabindex;\n    delete element.dataset.tabindex;\n    if (tabindex) {\n      element.setAttribute('tabindex', tabindex);\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  });\n}\n\n// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:\n// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx\n\nconst HIDDEN_STYLES = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  height: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'fixed',\n  whiteSpace: 'nowrap',\n  width: '1px',\n  top: 0,\n  left: 0\n};\nlet timeoutId;\nfunction setActiveElementOnTab(event) {\n  if (event.key === 'Tab') {\n    event.target;\n    clearTimeout(timeoutId);\n  }\n}\nconst FocusGuard = /*#__PURE__*/React.forwardRef(function FocusGuard(props, ref) {\n  const [role, setRole] = React.useState();\n  index(() => {\n    if (isSafari()) {\n      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\n      // on VoiceOver does trigger the onFocus event, so we can use the focus\n      // trap element. On Safari, only buttons trigger the onFocus event.\n      // NB: \"group\" role in the Sandbox no longer appears to work, must be a\n      // button role.\n      setRole('button');\n    }\n    document.addEventListener('keydown', setActiveElementOnTab);\n    return () => {\n      document.removeEventListener('keydown', setActiveElementOnTab);\n    };\n  }, []);\n  const restProps = {\n    ref,\n    tabIndex: 0,\n    // Role is only for VoiceOver\n    role,\n    'aria-hidden': role ? undefined : true,\n    [createAttribute('focus-guard')]: '',\n    style: HIDDEN_STYLES\n  };\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, props, restProps));\n});\n\nconst PortalContext = /*#__PURE__*/React.createContext(null);\nconst attr = /*#__PURE__*/createAttribute('portal');\n/**\n * @see https://floating-ui.com/docs/FloatingPortal#usefloatingportalnode\n */\nfunction useFloatingPortalNode(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    id,\n    root\n  } = props;\n  const uniqueId = useId();\n  const portalContext = usePortalContext();\n  const [portalNode, setPortalNode] = React.useState(null);\n  const portalNodeRef = React.useRef(null);\n  index(() => {\n    return () => {\n      portalNode == null || portalNode.remove();\n      // Allow the subsequent layout effects to create a new node on updates.\n      // The portal node will still be cleaned up on unmount.\n      // https://github.com/floating-ui/floating-ui/issues/2454\n      queueMicrotask(() => {\n        portalNodeRef.current = null;\n      });\n    };\n  }, [portalNode]);\n  index(() => {\n    // Wait for the uniqueId to be generated before creating the portal node in\n    // React <18 (using `useFloatingId` instead of the native `useId`).\n    // https://github.com/floating-ui/floating-ui/issues/2778\n    if (!uniqueId) return;\n    if (portalNodeRef.current) return;\n    const existingIdRoot = id ? document.getElementById(id) : null;\n    if (!existingIdRoot) return;\n    const subRoot = document.createElement('div');\n    subRoot.id = uniqueId;\n    subRoot.setAttribute(attr, '');\n    existingIdRoot.appendChild(subRoot);\n    portalNodeRef.current = subRoot;\n    setPortalNode(subRoot);\n  }, [id, uniqueId]);\n  index(() => {\n    // Wait for the root to exist before creating the portal node. The root must\n    // be stored in state, not a ref, for this to work reactively.\n    if (root === null) return;\n    if (!uniqueId) return;\n    if (portalNodeRef.current) return;\n    let container = root || (portalContext == null ? void 0 : portalContext.portalNode);\n    if (container && !isElement(container)) container = container.current;\n    container = container || document.body;\n    let idWrapper = null;\n    if (id) {\n      idWrapper = document.createElement('div');\n      idWrapper.id = id;\n      container.appendChild(idWrapper);\n    }\n    const subRoot = document.createElement('div');\n    subRoot.id = uniqueId;\n    subRoot.setAttribute(attr, '');\n    container = idWrapper || container;\n    container.appendChild(subRoot);\n    portalNodeRef.current = subRoot;\n    setPortalNode(subRoot);\n  }, [id, root, uniqueId, portalContext]);\n  return portalNode;\n}\n/**\n * Portals the floating element into a given container element — by default,\n * outside of the app root and into the body.\n * This is necessary to ensure the floating element can appear outside any\n * potential parent containers that cause clipping (such as `overflow: hidden`),\n * while retaining its location in the React tree.\n * @see https://floating-ui.com/docs/FloatingPortal\n */\nfunction FloatingPortal(props) {\n  const {\n    children,\n    id,\n    root,\n    preserveTabOrder = true\n  } = props;\n  const portalNode = useFloatingPortalNode({\n    id,\n    root\n  });\n  const [focusManagerState, setFocusManagerState] = React.useState(null);\n  const beforeOutsideRef = React.useRef(null);\n  const afterOutsideRef = React.useRef(null);\n  const beforeInsideRef = React.useRef(null);\n  const afterInsideRef = React.useRef(null);\n  const modal = focusManagerState == null ? void 0 : focusManagerState.modal;\n  const open = focusManagerState == null ? void 0 : focusManagerState.open;\n  const shouldRenderGuards =\n  // The FocusManager and therefore floating element are currently open/\n  // rendered.\n  !!focusManagerState &&\n  // Guards are only for non-modal focus management.\n  !focusManagerState.modal &&\n  // Don't render if unmount is transitioning.\n  focusManagerState.open && preserveTabOrder && !!(root || portalNode);\n\n  // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\n  React.useEffect(() => {\n    if (!portalNode || !preserveTabOrder || modal) {\n      return;\n    }\n\n    // Make sure elements inside the portal element are tabbable only when the\n    // portal has already been focused, either by tabbing into a focus trap\n    // element outside or using the mouse.\n    function onFocus(event) {\n      if (portalNode && isOutsideEvent(event)) {\n        const focusing = event.type === 'focusin';\n        const manageFocus = focusing ? enableFocusInside : disableFocusInside;\n        manageFocus(portalNode);\n      }\n    }\n    // Listen to the event on the capture phase so they run before the focus\n    // trap elements onFocus prop is called.\n    portalNode.addEventListener('focusin', onFocus, true);\n    portalNode.addEventListener('focusout', onFocus, true);\n    return () => {\n      portalNode.removeEventListener('focusin', onFocus, true);\n      portalNode.removeEventListener('focusout', onFocus, true);\n    };\n  }, [portalNode, preserveTabOrder, modal]);\n  React.useEffect(() => {\n    if (!portalNode) return;\n    if (open) return;\n    enableFocusInside(portalNode);\n  }, [open, portalNode]);\n  return /*#__PURE__*/React.createElement(PortalContext.Provider, {\n    value: React.useMemo(() => ({\n      preserveTabOrder,\n      beforeOutsideRef,\n      afterOutsideRef,\n      beforeInsideRef,\n      afterInsideRef,\n      portalNode,\n      setFocusManagerState\n    }), [preserveTabOrder, portalNode])\n  }, shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: beforeOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _beforeInsideRef$curr;\n        (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();\n      } else {\n        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        prevTabbable == null || prevTabbable.focus();\n      }\n    }\n  }), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-owns\": portalNode.id,\n    style: HIDDEN_STYLES\n  }), portalNode && /*#__PURE__*/ReactDOM.createPortal(children, portalNode), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: afterOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _afterInsideRef$curre;\n        (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();\n      } else {\n        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        nextTabbable == null || nextTabbable.focus();\n        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent, 'focus-out'));\n      }\n    }\n  }));\n}\nconst usePortalContext = () => React.useContext(PortalContext);\n\nconst FOCUSABLE_ATTRIBUTE = 'data-floating-ui-focusable';\nfunction getFloatingFocusElement(floatingElement) {\n  if (!floatingElement) {\n    return null;\n  }\n  // Try to find the element that has `{...getFloatingProps()}` spread on it.\n  // This indicates the floating element is acting as a positioning wrapper, and\n  // so focus should be managed on the child element with the event handlers and\n  // aria props.\n  return floatingElement.hasAttribute(FOCUSABLE_ATTRIBUTE) ? floatingElement : floatingElement.querySelector(\"[\" + FOCUSABLE_ATTRIBUTE + \"]\") || floatingElement;\n}\n\nconst LIST_LIMIT = 20;\nlet previouslyFocusedElements = [];\nfunction addPreviouslyFocusedElement(element) {\n  previouslyFocusedElements = previouslyFocusedElements.filter(el => el.isConnected);\n  let tabbableEl = element;\n  if (!tabbableEl || getNodeName(tabbableEl) === 'body') return;\n  if (!isTabbable(tabbableEl, getTabbableOptions())) {\n    const tabbableChild = tabbable(tabbableEl, getTabbableOptions())[0];\n    if (tabbableChild) {\n      tabbableEl = tabbableChild;\n    }\n  }\n  previouslyFocusedElements.push(tabbableEl);\n  if (previouslyFocusedElements.length > LIST_LIMIT) {\n    previouslyFocusedElements = previouslyFocusedElements.slice(-LIST_LIMIT);\n  }\n}\nfunction getPreviouslyFocusedElement() {\n  return previouslyFocusedElements.slice().reverse().find(el => el.isConnected);\n}\nconst VisuallyHiddenDismiss = /*#__PURE__*/React.forwardRef(function VisuallyHiddenDismiss(props, ref) {\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\n    type: \"button\",\n    ref: ref,\n    tabIndex: -1,\n    style: HIDDEN_STYLES\n  }));\n});\n/**\n * Provides focus management for the floating element.\n * @see https://floating-ui.com/docs/FloatingFocusManager\n */\nfunction FloatingFocusManager(props) {\n  const {\n    context,\n    children,\n    disabled = false,\n    order = ['content'],\n    guards: _guards = true,\n    initialFocus = 0,\n    returnFocus = true,\n    restoreFocus = false,\n    modal = true,\n    visuallyHiddenDismiss = false,\n    closeOnFocusOut = true\n  } = props;\n  const {\n    open,\n    refs,\n    nodeId,\n    onOpenChange,\n    events,\n    dataRef,\n    floatingId,\n    elements: {\n      domReference,\n      floating\n    }\n  } = context;\n  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;\n  // If the reference is a combobox and is typeable (e.g. input/textarea),\n  // there are different focus semantics. The guards should not be rendered, but\n  // aria-hidden should be applied to all nodes still. Further, the visually\n  // hidden dismiss button should only appear at the end of the list, not the\n  // start.\n  const isUntrappedTypeableCombobox = isTypeableCombobox(domReference) && ignoreInitialFocus;\n\n  // Force the guards to be rendered if the `inert` attribute is not supported.\n  const guards = supportsInert() ? _guards : true;\n  const orderRef = useLatestRef(order);\n  const initialFocusRef = useLatestRef(initialFocus);\n  const returnFocusRef = useLatestRef(returnFocus);\n  const tree = useFloatingTree();\n  const portalContext = usePortalContext();\n  const startDismissButtonRef = React.useRef(null);\n  const endDismissButtonRef = React.useRef(null);\n  const preventReturnFocusRef = React.useRef(false);\n  const isPointerDownRef = React.useRef(false);\n  const tabbableIndexRef = React.useRef(-1);\n  const isInsidePortal = portalContext != null;\n  const floatingFocusElement = getFloatingFocusElement(floating);\n  const getTabbableContent = useEffectEvent(function (container) {\n    if (container === void 0) {\n      container = floatingFocusElement;\n    }\n    return container ? tabbable(container, getTabbableOptions()) : [];\n  });\n  const getTabbableElements = useEffectEvent(container => {\n    const content = getTabbableContent(container);\n    return orderRef.current.map(type => {\n      if (domReference && type === 'reference') {\n        return domReference;\n      }\n      if (floatingFocusElement && type === 'floating') {\n        return floatingFocusElement;\n      }\n      return content;\n    }).filter(Boolean).flat();\n  });\n  React.useEffect(() => {\n    if (disabled) return;\n    if (!modal) return;\n    function onKeyDown(event) {\n      if (event.key === 'Tab') {\n        // The focus guards have nothing to focus, so we need to stop the event.\n        if (contains(floatingFocusElement, activeElement(getDocument(floatingFocusElement))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {\n          stopEvent(event);\n        }\n        const els = getTabbableElements();\n        const target = getTarget(event);\n        if (orderRef.current[0] === 'reference' && target === domReference) {\n          stopEvent(event);\n          if (event.shiftKey) {\n            enqueueFocus(els[els.length - 1]);\n          } else {\n            enqueueFocus(els[1]);\n          }\n        }\n        if (orderRef.current[1] === 'floating' && target === floatingFocusElement && event.shiftKey) {\n          stopEvent(event);\n          enqueueFocus(els[0]);\n        }\n      }\n    }\n    const doc = getDocument(floatingFocusElement);\n    doc.addEventListener('keydown', onKeyDown);\n    return () => {\n      doc.removeEventListener('keydown', onKeyDown);\n    };\n  }, [disabled, domReference, floatingFocusElement, modal, orderRef, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);\n  React.useEffect(() => {\n    if (disabled) return;\n    if (!floating) return;\n    function handleFocusIn(event) {\n      const target = getTarget(event);\n      const tabbableContent = getTabbableContent();\n      const tabbableIndex = tabbableContent.indexOf(target);\n      if (tabbableIndex !== -1) {\n        tabbableIndexRef.current = tabbableIndex;\n      }\n    }\n    floating.addEventListener('focusin', handleFocusIn);\n    return () => {\n      floating.removeEventListener('focusin', handleFocusIn);\n    };\n  }, [disabled, floating, getTabbableContent]);\n  React.useEffect(() => {\n    if (disabled) return;\n    if (!closeOnFocusOut) return;\n\n    // In Safari, buttons lose focus when pressing them.\n    function handlePointerDown() {\n      isPointerDownRef.current = true;\n      setTimeout(() => {\n        isPointerDownRef.current = false;\n      });\n    }\n    function handleFocusOutside(event) {\n      const relatedTarget = event.relatedTarget;\n      queueMicrotask(() => {\n        const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute('focus-guard')) || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {\n          var _node$context, _node$context2;\n          return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\n        }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {\n          var _node$context3, _node$context4;\n          return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;\n        })));\n\n        // Restore focus to the previous tabbable element index to prevent\n        // focus from being lost outside the floating tree.\n        if (restoreFocus && movedToUnrelatedNode && activeElement(getDocument(floatingFocusElement)) === getDocument(floatingFocusElement).body) {\n          // Let `FloatingPortal` effect knows that focus is still inside the\n          // floating tree.\n          if (isHTMLElement(floatingFocusElement)) {\n            floatingFocusElement.focus();\n          }\n          const prevTabbableIndex = tabbableIndexRef.current;\n          const tabbableContent = getTabbableContent();\n          const nodeToFocus = tabbableContent[prevTabbableIndex] || tabbableContent[tabbableContent.length - 1] || floatingFocusElement;\n          if (isHTMLElement(nodeToFocus)) {\n            nodeToFocus.focus();\n          }\n        }\n\n        // Focus did not move inside the floating tree, and there are no tabbable\n        // portal guards to handle closing.\n        if ((isUntrappedTypeableCombobox ? true : !modal) && relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&\n        // Fix React 18 Strict Mode returnFocus due to double rendering.\n        relatedTarget !== getPreviouslyFocusedElement()) {\n          preventReturnFocusRef.current = true;\n          onOpenChange(false, event, 'focus-out');\n        }\n      });\n    }\n    if (floating && isHTMLElement(domReference)) {\n      domReference.addEventListener('focusout', handleFocusOutside);\n      domReference.addEventListener('pointerdown', handlePointerDown);\n      floating.addEventListener('focusout', handleFocusOutside);\n      return () => {\n        domReference.removeEventListener('focusout', handleFocusOutside);\n        domReference.removeEventListener('pointerdown', handlePointerDown);\n        floating.removeEventListener('focusout', handleFocusOutside);\n      };\n    }\n  }, [disabled, domReference, floating, floatingFocusElement, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut, restoreFocus, getTabbableContent, isUntrappedTypeableCombobox]);\n  React.useEffect(() => {\n    var _portalContext$portal;\n    if (disabled) return;\n\n    // Don't hide portals nested within the parent portal.\n    const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll(\"[\" + createAttribute('portal') + \"]\")) || []);\n    if (floating) {\n      const insideElements = [floating, ...portalNodes, startDismissButtonRef.current, endDismissButtonRef.current, orderRef.current.includes('reference') || isUntrappedTypeableCombobox ? domReference : null].filter(x => x != null);\n      const cleanup = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, guards, !guards) : markOthers(insideElements);\n      return () => {\n        cleanup();\n      };\n    }\n  }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards]);\n  index(() => {\n    if (disabled || !isHTMLElement(floatingFocusElement)) return;\n    const doc = getDocument(floatingFocusElement);\n    const previouslyFocusedElement = activeElement(doc);\n\n    // Wait for any layout effect state setters to execute to set `tabIndex`.\n    queueMicrotask(() => {\n      const focusableElements = getTabbableElements(floatingFocusElement);\n      const initialFocusValue = initialFocusRef.current;\n      const elToFocus = (typeof initialFocusValue === 'number' ? focusableElements[initialFocusValue] : initialFocusValue.current) || floatingFocusElement;\n      const focusAlreadyInsideFloatingEl = contains(floatingFocusElement, previouslyFocusedElement);\n      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {\n        enqueueFocus(elToFocus, {\n          preventScroll: elToFocus === floatingFocusElement\n        });\n      }\n    });\n  }, [disabled, open, floatingFocusElement, ignoreInitialFocus, getTabbableElements, initialFocusRef]);\n  index(() => {\n    if (disabled || !floatingFocusElement) return;\n    let preventReturnFocusScroll = false;\n    const doc = getDocument(floatingFocusElement);\n    const previouslyFocusedElement = activeElement(doc);\n    const contextData = dataRef.current;\n    let openEvent = contextData.openEvent;\n    addPreviouslyFocusedElement(previouslyFocusedElement);\n\n    // Dismissing via outside press should always ignore `returnFocus` to\n    // prevent unwanted scrolling.\n    function onOpenChange(_ref) {\n      let {\n        open,\n        reason,\n        event,\n        nested\n      } = _ref;\n      if (open) {\n        openEvent = event;\n      }\n      if (reason === 'escape-key' && refs.domReference.current) {\n        addPreviouslyFocusedElement(refs.domReference.current);\n      }\n      if (reason === 'hover' && event.type === 'mouseleave') {\n        preventReturnFocusRef.current = true;\n      }\n      if (reason !== 'outside-press') return;\n      if (nested) {\n        preventReturnFocusRef.current = false;\n        preventReturnFocusScroll = true;\n      } else {\n        preventReturnFocusRef.current = !(isVirtualClick(event) || isVirtualPointerEvent(event));\n      }\n    }\n    events.on('openchange', onOpenChange);\n    const fallbackEl = doc.createElement('span');\n    fallbackEl.setAttribute('tabindex', '-1');\n    fallbackEl.setAttribute('aria-hidden', 'true');\n    Object.assign(fallbackEl.style, HIDDEN_STYLES);\n    if (isInsidePortal && domReference) {\n      domReference.insertAdjacentElement('afterend', fallbackEl);\n    }\n    function getReturnElement() {\n      if (typeof returnFocusRef.current === 'boolean') {\n        return getPreviouslyFocusedElement() || fallbackEl;\n      }\n      return returnFocusRef.current.current || fallbackEl;\n    }\n    return () => {\n      events.off('openchange', onOpenChange);\n      const activeEl = activeElement(doc);\n      const isFocusInsideFloatingTree = contains(floating, activeEl) || tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\n        var _node$context5;\n        return contains((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);\n      });\n      const shouldFocusReference = isFocusInsideFloatingTree || openEvent && ['click', 'mousedown'].includes(openEvent.type);\n      if (shouldFocusReference && refs.domReference.current) {\n        addPreviouslyFocusedElement(refs.domReference.current);\n      }\n      const returnElement = getReturnElement();\n      queueMicrotask(() => {\n        if (\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        returnFocusRef.current && !preventReturnFocusRef.current && isHTMLElement(returnElement) && (\n        // If the focus moved somewhere else after mount, avoid returning focus\n        // since it likely entered a different element which should be\n        // respected: https://github.com/floating-ui/floating-ui/issues/2607\n        returnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)) {\n          returnElement.focus({\n            preventScroll: preventReturnFocusScroll\n          });\n        }\n        fallbackEl.remove();\n      });\n    };\n  }, [disabled, floating, floatingFocusElement, returnFocusRef, dataRef, refs, events, tree, nodeId, isInsidePortal, domReference]);\n  React.useEffect(() => {\n    // The `returnFocus` cleanup behavior is inside a microtask; ensure we\n    // wait for it to complete before resetting the flag.\n    queueMicrotask(() => {\n      preventReturnFocusRef.current = false;\n    });\n  }, [disabled]);\n\n  // Synchronize the `context` & `modal` value to the FloatingPortal context.\n  // It will decide whether or not it needs to render its own guards.\n  index(() => {\n    if (disabled) return;\n    if (!portalContext) return;\n    portalContext.setFocusManagerState({\n      modal,\n      closeOnFocusOut,\n      open,\n      onOpenChange,\n      refs\n    });\n    return () => {\n      portalContext.setFocusManagerState(null);\n    };\n  }, [disabled, portalContext, modal, open, onOpenChange, refs, closeOnFocusOut]);\n  index(() => {\n    if (disabled) return;\n    if (!floatingFocusElement) return;\n    if (typeof MutationObserver !== 'function') return;\n    if (ignoreInitialFocus) return;\n    const handleMutation = () => {\n      const tabIndex = floatingFocusElement.getAttribute('tabindex');\n      const tabbableContent = getTabbableContent();\n      const activeEl = activeElement(getDocument(floating));\n      const tabbableIndex = tabbableContent.indexOf(activeEl);\n      if (tabbableIndex !== -1) {\n        tabbableIndexRef.current = tabbableIndex;\n      }\n      if (orderRef.current.includes('floating') || activeEl !== refs.domReference.current && tabbableContent.length === 0) {\n        if (tabIndex !== '0') {\n          floatingFocusElement.setAttribute('tabindex', '0');\n        }\n      } else if (tabIndex !== '-1') {\n        floatingFocusElement.setAttribute('tabindex', '-1');\n      }\n    };\n    handleMutation();\n    const observer = new MutationObserver(handleMutation);\n    observer.observe(floatingFocusElement, {\n      childList: true,\n      subtree: true,\n      attributes: true\n    });\n    return () => {\n      observer.disconnect();\n    };\n  }, [disabled, floating, floatingFocusElement, refs, orderRef, getTabbableContent, ignoreInitialFocus]);\n  function renderDismissButton(location) {\n    if (disabled || !visuallyHiddenDismiss || !modal) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(VisuallyHiddenDismiss, {\n      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,\n      onClick: event => onOpenChange(false, event.nativeEvent)\n    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss');\n  }\n  const shouldRenderGuards = !disabled && guards && (modal ? !isUntrappedTypeableCombobox : true) && (isInsidePortal || modal);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,\n    onFocus: event => {\n      if (modal) {\n        const els = getTabbableElements();\n        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        preventReturnFocusRef.current = false;\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const nextTabbable = getNextTabbable() || domReference;\n          nextTabbable == null || nextTabbable.focus();\n        } else {\n          var _portalContext$before;\n          (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();\n        }\n      }\n    }\n  }), !isUntrappedTypeableCombobox && renderDismissButton('start'), children, renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,\n    onFocus: event => {\n      if (modal) {\n        enqueueFocus(getTabbableElements()[0]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        if (closeOnFocusOut) {\n          preventReturnFocusRef.current = true;\n        }\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const prevTabbable = getPreviousTabbable() || domReference;\n          prevTabbable == null || prevTabbable.focus();\n        } else {\n          var _portalContext$afterO;\n          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();\n        }\n      }\n    }\n  }));\n}\n\nlet lockCount = 0;\nfunction enableScrollLock() {\n  const isIOS = /iP(hone|ad|od)|iOS/.test(getPlatform());\n  const bodyStyle = document.body.style;\n  // RTL <body> scrollbar\n  const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\n  const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\n  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n  const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.scrollX;\n  const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.scrollY;\n  bodyStyle.overflow = 'hidden';\n  if (scrollbarWidth) {\n    bodyStyle[paddingProp] = scrollbarWidth + \"px\";\n  }\n\n  // Only iOS doesn't respect `overflow: hidden` on document.body, and this\n  // technique has fewer side effects.\n  if (isIOS) {\n    var _window$visualViewpor, _window$visualViewpor2;\n    // iOS 12 does not support `visualViewport`.\n    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\n    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\n    Object.assign(bodyStyle, {\n      position: 'fixed',\n      top: -(scrollY - Math.floor(offsetTop)) + \"px\",\n      left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\n      right: '0'\n    });\n  }\n  return () => {\n    Object.assign(bodyStyle, {\n      overflow: '',\n      [paddingProp]: ''\n    });\n    if (isIOS) {\n      Object.assign(bodyStyle, {\n        position: '',\n        top: '',\n        left: '',\n        right: ''\n      });\n      window.scrollTo(scrollX, scrollY);\n    }\n  };\n}\nlet cleanup = () => {};\n\n/**\n * Provides base styling for a fixed overlay element to dim content or block\n * pointer events behind a floating element.\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\n * @see https://floating-ui.com/docs/FloatingOverlay\n */\nconst FloatingOverlay = /*#__PURE__*/React.forwardRef(function FloatingOverlay(props, ref) {\n  const {\n    lockScroll = false,\n    ...rest\n  } = props;\n  index(() => {\n    if (!lockScroll) return;\n    lockCount++;\n    if (lockCount === 1) {\n      cleanup = enableScrollLock();\n    }\n    return () => {\n      lockCount--;\n      if (lockCount === 0) {\n        cleanup();\n      }\n    };\n  }, [lockScroll]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    style: {\n      position: 'fixed',\n      overflow: 'auto',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      ...rest.style\n    }\n  }));\n});\n\nfunction isButtonTarget(event) {\n  return isHTMLElement(event.target) && event.target.tagName === 'BUTTON';\n}\nfunction isSpaceIgnored(element) {\n  return isTypeableElement(element);\n}\n/**\n * Opens or closes the floating element when clicking the reference element.\n * @see https://floating-ui.com/docs/useClick\n */\nfunction useClick(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    elements: {\n      domReference\n    }\n  } = context;\n  const {\n    enabled = true,\n    event: eventOption = 'click',\n    toggle = true,\n    ignoreMouse = false,\n    keyboardHandlers = true,\n    stickIfOpen = true\n  } = props;\n  const pointerTypeRef = React.useRef();\n  const didKeyDownRef = React.useRef(false);\n  const reference = React.useMemo(() => ({\n    onPointerDown(event) {\n      pointerTypeRef.current = event.pointerType;\n    },\n    onMouseDown(event) {\n      const pointerType = pointerTypeRef.current;\n\n      // Ignore all buttons except for the \"main\" button.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n      if (event.button !== 0) return;\n      if (eventOption === 'click') return;\n      if (isMouseLikePointerType(pointerType, true) && ignoreMouse) return;\n      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === 'mousedown' : true)) {\n        onOpenChange(false, event.nativeEvent, 'click');\n      } else {\n        // Prevent stealing focus from the floating element\n        event.preventDefault();\n        onOpenChange(true, event.nativeEvent, 'click');\n      }\n    },\n    onClick(event) {\n      const pointerType = pointerTypeRef.current;\n      if (eventOption === 'mousedown' && pointerTypeRef.current) {\n        pointerTypeRef.current = undefined;\n        return;\n      }\n      if (isMouseLikePointerType(pointerType, true) && ignoreMouse) return;\n      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === 'click' : true)) {\n        onOpenChange(false, event.nativeEvent, 'click');\n      } else {\n        onOpenChange(true, event.nativeEvent, 'click');\n      }\n    },\n    onKeyDown(event) {\n      pointerTypeRef.current = undefined;\n      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {\n        return;\n      }\n      if (event.key === ' ' && !isSpaceIgnored(domReference)) {\n        // Prevent scrolling\n        event.preventDefault();\n        didKeyDownRef.current = true;\n      }\n      if (event.key === 'Enter') {\n        if (open && toggle) {\n          onOpenChange(false, event.nativeEvent, 'click');\n        } else {\n          onOpenChange(true, event.nativeEvent, 'click');\n        }\n      }\n    },\n    onKeyUp(event) {\n      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {\n        return;\n      }\n      if (event.key === ' ' && didKeyDownRef.current) {\n        didKeyDownRef.current = false;\n        if (open && toggle) {\n          onOpenChange(false, event.nativeEvent, 'click');\n        } else {\n          onOpenChange(true, event.nativeEvent, 'click');\n        }\n      }\n    }\n  }), [dataRef, domReference, eventOption, ignoreMouse, keyboardHandlers, onOpenChange, open, stickIfOpen, toggle]);\n  return React.useMemo(() => enabled ? {\n    reference\n  } : {}, [enabled, reference]);\n}\n\nfunction createVirtualElement(domElement, data) {\n  let offsetX = null;\n  let offsetY = null;\n  let isAutoUpdateEvent = false;\n  return {\n    contextElement: domElement || undefined,\n    getBoundingClientRect() {\n      var _data$dataRef$current;\n      const domRect = (domElement == null ? void 0 : domElement.getBoundingClientRect()) || {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n      const isXAxis = data.axis === 'x' || data.axis === 'both';\n      const isYAxis = data.axis === 'y' || data.axis === 'both';\n      const canTrackCursorOnAutoUpdate = ['mouseenter', 'mousemove'].includes(((_data$dataRef$current = data.dataRef.current.openEvent) == null ? void 0 : _data$dataRef$current.type) || '') && data.pointerType !== 'touch';\n      let width = domRect.width;\n      let height = domRect.height;\n      let x = domRect.x;\n      let y = domRect.y;\n      if (offsetX == null && data.x && isXAxis) {\n        offsetX = domRect.x - data.x;\n      }\n      if (offsetY == null && data.y && isYAxis) {\n        offsetY = domRect.y - data.y;\n      }\n      x -= offsetX || 0;\n      y -= offsetY || 0;\n      width = 0;\n      height = 0;\n      if (!isAutoUpdateEvent || canTrackCursorOnAutoUpdate) {\n        width = data.axis === 'y' ? domRect.width : 0;\n        height = data.axis === 'x' ? domRect.height : 0;\n        x = isXAxis && data.x != null ? data.x : x;\n        y = isYAxis && data.y != null ? data.y : y;\n      } else if (isAutoUpdateEvent && !canTrackCursorOnAutoUpdate) {\n        height = data.axis === 'x' ? domRect.height : height;\n        width = data.axis === 'y' ? domRect.width : width;\n      }\n      isAutoUpdateEvent = true;\n      return {\n        width,\n        height,\n        x,\n        y,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        left: x\n      };\n    }\n  };\n}\nfunction isMouseBasedEvent(event) {\n  return event != null && event.clientX != null;\n}\n/**\n * Positions the floating element relative to a client point (in the viewport),\n * such as the mouse position. By default, it follows the mouse cursor.\n * @see https://floating-ui.com/docs/useClientPoint\n */\nfunction useClientPoint(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    dataRef,\n    elements: {\n      floating,\n      domReference\n    },\n    refs\n  } = context;\n  const {\n    enabled = true,\n    axis = 'both',\n    x = null,\n    y = null\n  } = props;\n  const initialRef = React.useRef(false);\n  const cleanupListenerRef = React.useRef(null);\n  const [pointerType, setPointerType] = React.useState();\n  const [reactive, setReactive] = React.useState([]);\n  const setReference = useEffectEvent((x, y) => {\n    if (initialRef.current) return;\n\n    // Prevent setting if the open event was not a mouse-like one\n    // (e.g. focus to open, then hover over the reference element).\n    // Only apply if the event exists.\n    if (dataRef.current.openEvent && !isMouseBasedEvent(dataRef.current.openEvent)) {\n      return;\n    }\n    refs.setPositionReference(createVirtualElement(domReference, {\n      x,\n      y,\n      axis,\n      dataRef,\n      pointerType\n    }));\n  });\n  const handleReferenceEnterOrMove = useEffectEvent(event => {\n    if (x != null || y != null) return;\n    if (!open) {\n      setReference(event.clientX, event.clientY);\n    } else if (!cleanupListenerRef.current) {\n      // If there's no cleanup, there's no listener, but we want to ensure\n      // we add the listener if the cursor landed on the floating element and\n      // then back on the reference (i.e. it's interactive).\n      setReactive([]);\n    }\n  });\n\n  // If the pointer is a mouse-like pointer, we want to continue following the\n  // mouse even if the floating element is transitioning out. On touch\n  // devices, this is undesirable because the floating element will move to\n  // the dismissal touch point.\n  const openCheck = isMouseLikePointerType(pointerType) ? floating : open;\n  const addListener = React.useCallback(() => {\n    // Explicitly specified `x`/`y` coordinates shouldn't add a listener.\n    if (!openCheck || !enabled || x != null || y != null) return;\n    const win = getWindow(floating);\n    function handleMouseMove(event) {\n      const target = getTarget(event);\n      if (!contains(floating, target)) {\n        setReference(event.clientX, event.clientY);\n      } else {\n        win.removeEventListener('mousemove', handleMouseMove);\n        cleanupListenerRef.current = null;\n      }\n    }\n    if (!dataRef.current.openEvent || isMouseBasedEvent(dataRef.current.openEvent)) {\n      win.addEventListener('mousemove', handleMouseMove);\n      const cleanup = () => {\n        win.removeEventListener('mousemove', handleMouseMove);\n        cleanupListenerRef.current = null;\n      };\n      cleanupListenerRef.current = cleanup;\n      return cleanup;\n    }\n    refs.setPositionReference(domReference);\n  }, [openCheck, enabled, x, y, floating, dataRef, refs, domReference, setReference]);\n  React.useEffect(() => {\n    return addListener();\n  }, [addListener, reactive]);\n  React.useEffect(() => {\n    if (enabled && !floating) {\n      initialRef.current = false;\n    }\n  }, [enabled, floating]);\n  React.useEffect(() => {\n    if (!enabled && open) {\n      initialRef.current = true;\n    }\n  }, [enabled, open]);\n  index(() => {\n    if (enabled && (x != null || y != null)) {\n      initialRef.current = false;\n      setReference(x, y);\n    }\n  }, [enabled, x, y, setReference]);\n  const reference = React.useMemo(() => {\n    function setPointerTypeRef(_ref) {\n      let {\n        pointerType\n      } = _ref;\n      setPointerType(pointerType);\n    }\n    return {\n      onPointerDown: setPointerTypeRef,\n      onPointerEnter: setPointerTypeRef,\n      onMouseMove: handleReferenceEnterOrMove,\n      onMouseEnter: handleReferenceEnterOrMove\n    };\n  }, [handleReferenceEnterOrMove]);\n  return React.useMemo(() => enabled ? {\n    reference\n  } : {}, [enabled, reference]);\n}\n\nconst bubbleHandlerKeys = {\n  pointerdown: 'onPointerDown',\n  mousedown: 'onMouseDown',\n  click: 'onClick'\n};\nconst captureHandlerKeys = {\n  pointerdown: 'onPointerDownCapture',\n  mousedown: 'onMouseDownCapture',\n  click: 'onClickCapture'\n};\nconst normalizeProp = normalizable => {\n  var _normalizable$escapeK, _normalizable$outside;\n  return {\n    escapeKey: typeof normalizable === 'boolean' ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,\n    outsidePress: typeof normalizable === 'boolean' ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true\n  };\n};\n/**\n * Closes the floating element when a dismissal is requested — by default, when\n * the user presses the `escape` key or outside of the floating element.\n * @see https://floating-ui.com/docs/useDismiss\n */\nfunction useDismiss(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    elements,\n    dataRef\n  } = context;\n  const {\n    enabled = true,\n    escapeKey = true,\n    outsidePress: unstable_outsidePress = true,\n    outsidePressEvent = 'pointerdown',\n    referencePress = false,\n    referencePressEvent = 'pointerdown',\n    ancestorScroll = false,\n    bubbles,\n    capture\n  } = props;\n  const tree = useFloatingTree();\n  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);\n  const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;\n  const insideReactTreeRef = React.useRef(false);\n  const endedOrStartedInsideRef = React.useRef(false);\n  const {\n    escapeKey: escapeKeyBubbles,\n    outsidePress: outsidePressBubbles\n  } = normalizeProp(bubbles);\n  const {\n    escapeKey: escapeKeyCapture,\n    outsidePress: outsidePressCapture\n  } = normalizeProp(capture);\n  const isComposingRef = React.useRef(false);\n  const closeOnEscapeKeyDown = useEffectEvent(event => {\n    var _dataRef$current$floa;\n    if (!open || !enabled || !escapeKey || event.key !== 'Escape') {\n      return;\n    }\n\n    // Wait until IME is settled. Pressing `Escape` while composing should\n    // close the compose menu, but not the floating element.\n    if (isComposingRef.current) {\n      return;\n    }\n    const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n    if (!escapeKeyBubbles) {\n      event.stopPropagation();\n      if (children.length > 0) {\n        let shouldDismiss = true;\n        children.forEach(child => {\n          var _child$context;\n          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\n            shouldDismiss = false;\n            return;\n          }\n        });\n        if (!shouldDismiss) {\n          return;\n        }\n      }\n    }\n    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event, 'escape-key');\n  });\n  const closeOnEscapeKeyDownCapture = useEffectEvent(event => {\n    var _getTarget2;\n    const callback = () => {\n      var _getTarget;\n      closeOnEscapeKeyDown(event);\n      (_getTarget = getTarget(event)) == null || _getTarget.removeEventListener('keydown', callback);\n    };\n    (_getTarget2 = getTarget(event)) == null || _getTarget2.addEventListener('keydown', callback);\n  });\n  const closeOnPressOutside = useEffectEvent(event => {\n    var _dataRef$current$floa2;\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = insideReactTreeRef.current;\n    insideReactTreeRef.current = false;\n\n    // When click outside is lazy (`click` event), handle dragging.\n    // Don't close if:\n    // - The click started inside the floating element.\n    // - The click ended inside the floating element.\n    const endedOrStartedInside = endedOrStartedInsideRef.current;\n    endedOrStartedInsideRef.current = false;\n    if (outsidePressEvent === 'click' && endedOrStartedInside) {\n      return;\n    }\n    if (insideReactTree) {\n      return;\n    }\n    if (typeof outsidePress === 'function' && !outsidePress(event)) {\n      return;\n    }\n    const target = getTarget(event);\n    const inertSelector = \"[\" + createAttribute('inert') + \"]\";\n    const markers = getDocument(elements.floating).querySelectorAll(inertSelector);\n    let targetRootAncestor = isElement(target) ? target : null;\n    while (targetRootAncestor && !isLastTraversableNode(targetRootAncestor)) {\n      const nextParent = getParentNode(targetRootAncestor);\n      if (isLastTraversableNode(nextParent) || !isElement(nextParent)) {\n        break;\n      }\n      targetRootAncestor = nextParent;\n    }\n\n    // Check if the click occurred on a third-party element injected after the\n    // floating element rendered.\n    if (markers.length && isElement(target) && !isRootElement(target) &&\n    // Clicked on a direct ancestor (e.g. FloatingOverlay).\n    !contains(target, elements.floating) &&\n    // If the target root element contains none of the markers, then the\n    // element was injected after the floating element rendered.\n    Array.from(markers).every(marker => !contains(targetRootAncestor, marker))) {\n      return;\n    }\n\n    // Check if the click occurred on the scrollbar\n    if (isHTMLElement(target) && floating) {\n      // In Firefox, `target.scrollWidth > target.clientWidth` for inline\n      // elements.\n      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;\n      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;\n      let xCond = canScrollY && event.offsetX > target.clientWidth;\n\n      // In some browsers it is possible to change the <body> (or window)\n      // scrollbar to the left side, but is very rare and is difficult to\n      // check for. Plus, for modal dialogs with backdrops, it is more\n      // important that the backdrop is checked but not so much the window.\n      if (canScrollY) {\n        const isRTL = getComputedStyle(target).direction === 'rtl';\n        if (isRTL) {\n          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;\n        }\n      }\n      if (xCond || canScrollX && event.offsetY > target.clientHeight) {\n        return;\n      }\n    }\n    const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa2.nodeId;\n    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\n      var _node$context;\n      return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\n    });\n    if (isEventTargetWithin(event, elements.floating) || isEventTargetWithin(event, elements.domReference) || targetIsInsideChildren) {\n      return;\n    }\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n    if (children.length > 0) {\n      let shouldDismiss = true;\n      children.forEach(child => {\n        var _child$context2;\n        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\n          shouldDismiss = false;\n          return;\n        }\n      });\n      if (!shouldDismiss) {\n        return;\n      }\n    }\n    onOpenChange(false, event, 'outside-press');\n  });\n  const closeOnPressOutsideCapture = useEffectEvent(event => {\n    var _getTarget4;\n    const callback = () => {\n      var _getTarget3;\n      closeOnPressOutside(event);\n      (_getTarget3 = getTarget(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);\n    };\n    (_getTarget4 = getTarget(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);\n  });\n  React.useEffect(() => {\n    if (!open || !enabled) {\n      return;\n    }\n    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\n    dataRef.current.__outsidePressBubbles = outsidePressBubbles;\n    let compositionTimeout = -1;\n    function onScroll(event) {\n      onOpenChange(false, event, 'ancestor-scroll');\n    }\n    function handleCompositionStart() {\n      window.clearTimeout(compositionTimeout);\n      isComposingRef.current = true;\n    }\n    function handleCompositionEnd() {\n      // Safari fires `compositionend` before `keydown`, so we need to wait\n      // until the next tick to set `isComposing` to `false`.\n      // https://bugs.webkit.org/show_bug.cgi?id=165004\n      compositionTimeout = window.setTimeout(() => {\n        isComposingRef.current = false;\n      },\n      // 0ms or 1ms don't work in Safari. 5ms appears to consistently work.\n      // Only apply to WebKit for the test to remain 0ms.\n      isWebKit() ? 5 : 0);\n    }\n    const doc = getDocument(elements.floating);\n    if (escapeKey) {\n      doc.addEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\n      doc.addEventListener('compositionstart', handleCompositionStart);\n      doc.addEventListener('compositionend', handleCompositionEnd);\n    }\n    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\n    let ancestors = [];\n    if (ancestorScroll) {\n      if (isElement(elements.domReference)) {\n        ancestors = getOverflowAncestors(elements.domReference);\n      }\n      if (isElement(elements.floating)) {\n        ancestors = ancestors.concat(getOverflowAncestors(elements.floating));\n      }\n      if (!isElement(elements.reference) && elements.reference && elements.reference.contextElement) {\n        ancestors = ancestors.concat(getOverflowAncestors(elements.reference.contextElement));\n      }\n    }\n\n    // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\n    ancestors = ancestors.filter(ancestor => {\n      var _doc$defaultView;\n      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\n    });\n    ancestors.forEach(ancestor => {\n      ancestor.addEventListener('scroll', onScroll, {\n        passive: true\n      });\n    });\n    return () => {\n      if (escapeKey) {\n        doc.removeEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\n        doc.removeEventListener('compositionstart', handleCompositionStart);\n        doc.removeEventListener('compositionend', handleCompositionEnd);\n      }\n      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\n      ancestors.forEach(ancestor => {\n        ancestor.removeEventListener('scroll', onScroll);\n      });\n      window.clearTimeout(compositionTimeout);\n    };\n  }, [dataRef, elements, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);\n  React.useEffect(() => {\n    insideReactTreeRef.current = false;\n  }, [outsidePress, outsidePressEvent]);\n  const reference = React.useMemo(() => ({\n    onKeyDown: closeOnEscapeKeyDown,\n    [bubbleHandlerKeys[referencePressEvent]]: event => {\n      if (referencePress) {\n        onOpenChange(false, event.nativeEvent, 'reference-press');\n      }\n    }\n  }), [closeOnEscapeKeyDown, onOpenChange, referencePress, referencePressEvent]);\n  const floating = React.useMemo(() => ({\n    onKeyDown: closeOnEscapeKeyDown,\n    onMouseDown() {\n      endedOrStartedInsideRef.current = true;\n    },\n    onMouseUp() {\n      endedOrStartedInsideRef.current = true;\n    },\n    [captureHandlerKeys[outsidePressEvent]]: () => {\n      insideReactTreeRef.current = true;\n    }\n  }), [closeOnEscapeKeyDown, outsidePressEvent]);\n  return React.useMemo(() => enabled ? {\n    reference,\n    floating\n  } : {}, [enabled, reference, floating]);\n}\n\nfunction useFloatingRootContext(options) {\n  const {\n    open = false,\n    onOpenChange: onOpenChangeProp,\n    elements: elementsProp\n  } = options;\n  const floatingId = useId();\n  const dataRef = React.useRef({});\n  const [events] = React.useState(() => createPubSub());\n  const nested = useFloatingParentNodeId() != null;\n  if (process.env.NODE_ENV !== \"production\") {\n    const optionDomReference = elementsProp.reference;\n    if (optionDomReference && !isElement(optionDomReference)) {\n      error('Cannot pass a virtual element to the `elements.reference` option,', 'as it must be a real DOM element. Use `refs.setPositionReference()`', 'instead.');\n    }\n  }\n  const [positionReference, setPositionReference] = React.useState(elementsProp.reference);\n  const onOpenChange = useEffectEvent((open, event, reason) => {\n    dataRef.current.openEvent = open ? event : undefined;\n    events.emit('openchange', {\n      open,\n      event,\n      reason,\n      nested\n    });\n    onOpenChangeProp == null || onOpenChangeProp(open, event, reason);\n  });\n  const refs = React.useMemo(() => ({\n    setPositionReference\n  }), []);\n  const elements = React.useMemo(() => ({\n    reference: positionReference || elementsProp.reference || null,\n    floating: elementsProp.floating || null,\n    domReference: elementsProp.reference\n  }), [positionReference, elementsProp.reference, elementsProp.floating]);\n  return React.useMemo(() => ({\n    dataRef,\n    open,\n    onOpenChange,\n    elements,\n    events,\n    floatingId,\n    refs\n  }), [open, onOpenChange, elements, events, floatingId, refs]);\n}\n\n/**\n * Provides data to position a floating element and context to add interactions.\n * @see https://floating-ui.com/docs/useFloating\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    nodeId\n  } = options;\n  const internalRootContext = useFloatingRootContext({\n    ...options,\n    elements: {\n      reference: null,\n      floating: null,\n      ...options.elements\n    }\n  });\n  const rootContext = options.rootContext || internalRootContext;\n  const computedElements = rootContext.elements;\n  const [_domReference, setDomReference] = React.useState(null);\n  const [positionReference, _setPositionReference] = React.useState(null);\n  const optionDomReference = computedElements == null ? void 0 : computedElements.domReference;\n  const domReference = optionDomReference || _domReference;\n  const domReferenceRef = React.useRef(null);\n  const tree = useFloatingTree();\n  index(() => {\n    if (domReference) {\n      domReferenceRef.current = domReference;\n    }\n  }, [domReference]);\n  const position = useFloating$1({\n    ...options,\n    elements: {\n      ...computedElements,\n      ...(positionReference && {\n        reference: positionReference\n      })\n    }\n  });\n  const setPositionReference = React.useCallback(node => {\n    const computedPositionReference = isElement(node) ? {\n      getBoundingClientRect: () => node.getBoundingClientRect(),\n      contextElement: node\n    } : node;\n    // Store the positionReference in state if the DOM reference is specified externally via the\n    // `elements.reference` option. This ensures that it won't be overridden on future renders.\n    _setPositionReference(computedPositionReference);\n    position.refs.setReference(computedPositionReference);\n  }, [position.refs]);\n  const setReference = React.useCallback(node => {\n    if (isElement(node) || node === null) {\n      domReferenceRef.current = node;\n      setDomReference(node);\n    }\n\n    // Backwards-compatibility for passing a virtual element to `reference`\n    // after it has set the DOM reference.\n    if (isElement(position.refs.reference.current) || position.refs.reference.current === null ||\n    // Don't allow setting virtual elements using the old technique back to\n    // `null` to support `positionReference` + an unstable `reference`\n    // callback ref.\n    node !== null && !isElement(node)) {\n      position.refs.setReference(node);\n    }\n  }, [position.refs]);\n  const refs = React.useMemo(() => ({\n    ...position.refs,\n    setReference,\n    setPositionReference,\n    domReference: domReferenceRef\n  }), [position.refs, setReference, setPositionReference]);\n  const elements = React.useMemo(() => ({\n    ...position.elements,\n    domReference: domReference\n  }), [position.elements, domReference]);\n  const context = React.useMemo(() => ({\n    ...position,\n    ...rootContext,\n    refs,\n    elements,\n    nodeId\n  }), [position, refs, elements, nodeId, rootContext]);\n  index(() => {\n    rootContext.dataRef.current.floatingContext = context;\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\n    if (node) {\n      node.context = context;\n    }\n  });\n  return React.useMemo(() => ({\n    ...position,\n    context,\n    refs,\n    elements\n  }), [position, refs, elements, context]);\n}\n\n/**\n * Opens the floating element while the reference element has focus, like CSS\n * `:focus`.\n * @see https://floating-ui.com/docs/useFocus\n */\nfunction useFocus(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    events,\n    dataRef,\n    elements\n  } = context;\n  const {\n    enabled = true,\n    visibleOnly = true\n  } = props;\n  const blockFocusRef = React.useRef(false);\n  const timeoutRef = React.useRef();\n  const keyboardModalityRef = React.useRef(true);\n  React.useEffect(() => {\n    if (!enabled) return;\n    const win = getWindow(elements.domReference);\n\n    // If the reference was focused and the user left the tab/window, and the\n    // floating element was not open, the focus should be blocked when they\n    // return to the tab/window.\n    function onBlur() {\n      if (!open && isHTMLElement(elements.domReference) && elements.domReference === activeElement(getDocument(elements.domReference))) {\n        blockFocusRef.current = true;\n      }\n    }\n    function onKeyDown() {\n      keyboardModalityRef.current = true;\n    }\n    win.addEventListener('blur', onBlur);\n    win.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      win.removeEventListener('blur', onBlur);\n      win.removeEventListener('keydown', onKeyDown, true);\n    };\n  }, [elements.domReference, open, enabled]);\n  React.useEffect(() => {\n    if (!enabled) return;\n    function onOpenChange(_ref) {\n      let {\n        reason\n      } = _ref;\n      if (reason === 'reference-press' || reason === 'escape-key') {\n        blockFocusRef.current = true;\n      }\n    }\n    events.on('openchange', onOpenChange);\n    return () => {\n      events.off('openchange', onOpenChange);\n    };\n  }, [events, enabled]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, []);\n  const reference = React.useMemo(() => ({\n    onPointerDown(event) {\n      if (isVirtualPointerEvent(event.nativeEvent)) return;\n      keyboardModalityRef.current = false;\n    },\n    onMouseLeave() {\n      blockFocusRef.current = false;\n    },\n    onFocus(event) {\n      if (blockFocusRef.current) return;\n      const target = getTarget(event.nativeEvent);\n      if (visibleOnly && isElement(target)) {\n        try {\n          // Mac Safari unreliably matches `:focus-visible` on the reference\n          // if focus was outside the page initially - use the fallback\n          // instead.\n          if (isSafari() && isMac()) throw Error();\n          if (!target.matches(':focus-visible')) return;\n        } catch (e) {\n          // Old browsers will throw an error when using `:focus-visible`.\n          if (!keyboardModalityRef.current && !isTypeableElement(target)) {\n            return;\n          }\n        }\n      }\n      onOpenChange(true, event.nativeEvent, 'focus');\n    },\n    onBlur(event) {\n      blockFocusRef.current = false;\n      const relatedTarget = event.relatedTarget;\n      const nativeEvent = event.nativeEvent;\n\n      // Hit the non-modal focus management portal guard. Focus will be\n      // moved into the floating element immediately after.\n      const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute(createAttribute('focus-guard')) && relatedTarget.getAttribute('data-type') === 'outside';\n\n      // Wait for the window blur listener to fire.\n      timeoutRef.current = window.setTimeout(() => {\n        var _dataRef$current$floa;\n        const activeEl = activeElement(elements.domReference ? elements.domReference.ownerDocument : document);\n\n        // Focus left the page, keep it open.\n        if (!relatedTarget && activeEl === elements.domReference) return;\n\n        // When focusing the reference element (e.g. regular click), then\n        // clicking into the floating element, prevent it from hiding.\n        // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\n        // We can not rely on relatedTarget to point to the correct element\n        // as it will only point to the shadow host of the newly focused element\n        // and not the element that actually has received focus if it is located\n        // inside a shadow root.\n        if (contains((_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.refs.floating.current, activeEl) || contains(elements.domReference, activeEl) || movedToFocusGuard) {\n          return;\n        }\n        onOpenChange(false, nativeEvent, 'focus');\n      });\n    }\n  }), [dataRef, elements.domReference, onOpenChange, visibleOnly]);\n  return React.useMemo(() => enabled ? {\n    reference\n  } : {}, [enabled, reference]);\n}\n\nconst ACTIVE_KEY = 'active';\nconst SELECTED_KEY = 'selected';\nfunction mergeProps(userProps, propsList, elementKey) {\n  const map = new Map();\n  const isItem = elementKey === 'item';\n  let domUserProps = userProps;\n  if (isItem && userProps) {\n    const {\n      [ACTIVE_KEY]: _,\n      [SELECTED_KEY]: __,\n      ...validProps\n    } = userProps;\n    domUserProps = validProps;\n  }\n  return {\n    ...(elementKey === 'floating' && {\n      tabIndex: -1,\n      [FOCUSABLE_ATTRIBUTE]: ''\n    }),\n    ...domUserProps,\n    ...propsList.map(value => {\n      const propsOrGetProps = value ? value[elementKey] : null;\n      if (typeof propsOrGetProps === 'function') {\n        return userProps ? propsOrGetProps(userProps) : null;\n      }\n      return propsOrGetProps;\n    }).concat(userProps).reduce((acc, props) => {\n      if (!props) {\n        return acc;\n      }\n      Object.entries(props).forEach(_ref => {\n        let [key, value] = _ref;\n        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {\n          return;\n        }\n        if (key.indexOf('on') === 0) {\n          if (!map.has(key)) {\n            map.set(key, []);\n          }\n          if (typeof value === 'function') {\n            var _map$get;\n            (_map$get = map.get(key)) == null || _map$get.push(value);\n            acc[key] = function () {\n              var _map$get2;\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map(fn => fn(...args)).find(val => val !== undefined);\n            };\n          }\n        } else {\n          acc[key] = value;\n        }\n      });\n      return acc;\n    }, {})\n  };\n}\n/**\n * Merges an array of interaction hooks' props into prop getters, allowing\n * event handler functions to be composed together without overwriting one\n * another.\n * @see https://floating-ui.com/docs/useInteractions\n */\nfunction useInteractions(propsList) {\n  if (propsList === void 0) {\n    propsList = [];\n  }\n  const referenceDeps = propsList.map(key => key == null ? void 0 : key.reference);\n  const floatingDeps = propsList.map(key => key == null ? void 0 : key.floating);\n  const itemDeps = propsList.map(key => key == null ? void 0 : key.item);\n  const getReferenceProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'reference'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  referenceDeps);\n  const getFloatingProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'floating'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  floatingDeps);\n  const getItemProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'item'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  itemDeps);\n  return React.useMemo(() => ({\n    getReferenceProps,\n    getFloatingProps,\n    getItemProps\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\n}\n\nlet isPreventScrollSupported = false;\nfunction doSwitch(orientation, vertical, horizontal) {\n  switch (orientation) {\n    case 'vertical':\n      return vertical;\n    case 'horizontal':\n      return horizontal;\n    default:\n      return vertical || horizontal;\n  }\n}\nfunction isMainOrientationKey(key, orientation) {\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\n  const vertical = key === ARROW_DOWN;\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key === ' ' || key === '';\n}\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  const horizontal = key === ARROW_DOWN;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n  const horizontal = key === ARROW_UP;\n  return doSwitch(orientation, vertical, horizontal);\n}\n/**\n * Adds arrow key-based navigation of a list of items, either using real DOM\n * focus or virtual focus.\n * @see https://floating-ui.com/docs/useListNavigation\n */\nfunction useListNavigation(context, props) {\n  const {\n    open,\n    onOpenChange,\n    elements\n  } = context;\n  const {\n    listRef,\n    activeIndex,\n    onNavigate: unstable_onNavigate = () => {},\n    enabled = true,\n    selectedIndex = null,\n    allowEscape = false,\n    loop = false,\n    nested = false,\n    rtl = false,\n    virtual = false,\n    focusItemOnOpen = 'auto',\n    focusItemOnHover = true,\n    openOnArrowKeyDown = true,\n    disabledIndices = undefined,\n    orientation = 'vertical',\n    cols = 1,\n    scrollItemIntoView = true,\n    virtualItemRef,\n    itemSizes,\n    dense = false\n  } = props;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (allowEscape) {\n      if (!loop) {\n        warn('`useListNavigation` looping must be enabled to allow escaping.');\n      }\n      if (!virtual) {\n        warn('`useListNavigation` must be virtual to allow escaping.');\n      }\n    }\n    if (orientation === 'vertical' && cols > 1) {\n      warn('In grid list navigation mode (`cols` > 1), the `orientation` should', 'be either \"horizontal\" or \"both\".');\n    }\n  }\n  const floatingFocusElement = getFloatingFocusElement(elements.floating);\n  const floatingFocusElementRef = useLatestRef(floatingFocusElement);\n  const parentId = useFloatingParentNodeId();\n  const tree = useFloatingTree();\n  const onNavigate = useEffectEvent(unstable_onNavigate);\n  const typeableComboboxReference = isTypeableCombobox(elements.domReference);\n  const focusItemOnOpenRef = React.useRef(focusItemOnOpen);\n  const indexRef = React.useRef(selectedIndex != null ? selectedIndex : -1);\n  const keyRef = React.useRef(null);\n  const isPointerModalityRef = React.useRef(true);\n  const previousOnNavigateRef = React.useRef(onNavigate);\n  const previousMountedRef = React.useRef(!!elements.floating);\n  const previousOpenRef = React.useRef(open);\n  const forceSyncFocus = React.useRef(false);\n  const forceScrollIntoViewRef = React.useRef(false);\n  const disabledIndicesRef = useLatestRef(disabledIndices);\n  const latestOpenRef = useLatestRef(open);\n  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);\n  const selectedIndexRef = useLatestRef(selectedIndex);\n  const [activeId, setActiveId] = React.useState();\n  const [virtualId, setVirtualId] = React.useState();\n  const focusItem = useEffectEvent(function (listRef, indexRef, forceScrollIntoView) {\n    if (forceScrollIntoView === void 0) {\n      forceScrollIntoView = false;\n    }\n    function runFocus(item) {\n      if (virtual) {\n        setActiveId(item.id);\n        tree == null || tree.events.emit('virtualfocus', item);\n        if (virtualItemRef) {\n          virtualItemRef.current = item;\n        }\n      } else {\n        enqueueFocus(item, {\n          preventScroll: true,\n          // Mac Safari does not move the virtual cursor unless the focus call\n          // is sync. However, for the very first focus call, we need to wait\n          // for the position to be ready in order to prevent unwanted\n          // scrolling. This means the virtual cursor will not move to the first\n          // item when first opening the floating element, but will on\n          // subsequent calls. `preventScroll` is supported in modern Safari,\n          // so we can use that instead.\n          // iOS Safari must be async or the first item will not be focused.\n          sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false\n        });\n      }\n    }\n    const initialItem = listRef.current[indexRef.current];\n    if (initialItem) {\n      runFocus(initialItem);\n    }\n    requestAnimationFrame(() => {\n      const waitedItem = listRef.current[indexRef.current] || initialItem;\n      if (!waitedItem) return;\n      if (!initialItem) {\n        runFocus(waitedItem);\n      }\n      const scrollIntoViewOptions = scrollItemIntoViewRef.current;\n      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\n      if (shouldScrollIntoView) {\n        // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\n        // by all browsers.\n        waitedItem.scrollIntoView == null || waitedItem.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {\n          block: 'nearest',\n          inline: 'nearest'\n        } : scrollIntoViewOptions);\n      }\n    });\n  });\n  index(() => {\n    document.createElement('div').focus({\n      get preventScroll() {\n        isPreventScrollSupported = true;\n        return false;\n      }\n    });\n  }, []);\n\n  // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\n  // element. Also, reset `activeIndex` upon closing the floating element.\n  index(() => {\n    if (!enabled) return;\n    if (open && elements.floating) {\n      if (focusItemOnOpenRef.current && selectedIndex != null) {\n        // Regardless of the pointer modality, we want to ensure the selected\n        // item comes into view when the floating element is opened.\n        forceScrollIntoViewRef.current = true;\n        indexRef.current = selectedIndex;\n        onNavigate(selectedIndex);\n      }\n    } else if (previousMountedRef.current) {\n      // Since the user can specify `onNavigate` conditionally\n      // (onNavigate: open ? setActiveIndex : setSelectedIndex),\n      // we store and call the previous function.\n      indexRef.current = -1;\n      previousOnNavigateRef.current(null);\n    }\n  }, [enabled, open, elements.floating, selectedIndex, onNavigate]);\n\n  // Sync `activeIndex` to be the focused item while the floating element is\n  // open.\n  index(() => {\n    if (!enabled) return;\n    if (open && elements.floating) {\n      if (activeIndex == null) {\n        forceSyncFocus.current = false;\n        if (selectedIndexRef.current != null) {\n          return;\n        }\n\n        // Reset while the floating element was open (e.g. the list changed).\n        if (previousMountedRef.current) {\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n        }\n\n        // Initial sync.\n        if ((!previousOpenRef.current || !previousMountedRef.current) && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\n          let runs = 0;\n          const waitForListPopulated = () => {\n            if (listRef.current[0] == null) {\n              // Avoid letting the browser paint if possible on the first try,\n              // otherwise use rAF. Don't try more than twice, since something\n              // is wrong otherwise.\n              if (runs < 2) {\n                const scheduler = runs ? requestAnimationFrame : queueMicrotask;\n                scheduler(waitForListPopulated);\n              }\n              runs++;\n            } else {\n              indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\n              keyRef.current = null;\n              onNavigate(indexRef.current);\n            }\n          };\n          waitForListPopulated();\n        }\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\n        indexRef.current = activeIndex;\n        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);\n        forceScrollIntoViewRef.current = false;\n      }\n    }\n  }, [enabled, open, elements.floating, activeIndex, selectedIndexRef, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);\n\n  // Ensure the parent floating element has focus when a nested child closes\n  // to allow arrow key navigation to work after the pointer leaves the child.\n  index(() => {\n    var _nodes$find;\n    if (!enabled || elements.floating || !tree || virtual || !previousMountedRef.current) {\n      return;\n    }\n    const nodes = tree.nodesRef.current;\n    const parent = (_nodes$find = nodes.find(node => node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;\n    const activeEl = activeElement(getDocument(elements.floating));\n    const treeContainsActiveEl = nodes.some(node => node.context && contains(node.context.elements.floating, activeEl));\n    if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {\n      parent.focus({\n        preventScroll: true\n      });\n    }\n  }, [enabled, elements.floating, tree, parentId, virtual]);\n  index(() => {\n    if (!enabled) return;\n    if (!tree) return;\n    if (!virtual) return;\n    if (parentId) return;\n    function handleVirtualFocus(item) {\n      setVirtualId(item.id);\n      if (virtualItemRef) {\n        virtualItemRef.current = item;\n      }\n    }\n    tree.events.on('virtualfocus', handleVirtualFocus);\n    return () => {\n      tree.events.off('virtualfocus', handleVirtualFocus);\n    };\n  }, [enabled, tree, virtual, parentId, virtualItemRef]);\n  index(() => {\n    previousOnNavigateRef.current = onNavigate;\n    previousMountedRef.current = !!elements.floating;\n  });\n  index(() => {\n    if (!open) {\n      keyRef.current = null;\n    }\n  }, [open]);\n  index(() => {\n    previousOpenRef.current = open;\n  }, [open]);\n  const hasActiveIndex = activeIndex != null;\n  const item = React.useMemo(() => {\n    function syncCurrentTarget(currentTarget) {\n      if (!open) return;\n      const index = listRef.current.indexOf(currentTarget);\n      if (index !== -1) {\n        onNavigate(index);\n      }\n    }\n    const props = {\n      onFocus(_ref) {\n        let {\n          currentTarget\n        } = _ref;\n        syncCurrentTarget(currentTarget);\n      },\n      onClick: _ref2 => {\n        let {\n          currentTarget\n        } = _ref2;\n        return currentTarget.focus({\n          preventScroll: true\n        });\n      },\n      // Safari\n      ...(focusItemOnHover && {\n        onMouseMove(_ref3) {\n          let {\n            currentTarget\n          } = _ref3;\n          syncCurrentTarget(currentTarget);\n        },\n        onPointerLeave(_ref4) {\n          let {\n            pointerType\n          } = _ref4;\n          if (!isPointerModalityRef.current || pointerType === 'touch') {\n            return;\n          }\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n          onNavigate(null);\n          if (!virtual) {\n            enqueueFocus(floatingFocusElementRef.current, {\n              preventScroll: true\n            });\n          }\n        }\n      })\n    };\n    return props;\n  }, [open, floatingFocusElementRef, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);\n  const commonOnKeyDown = useEffectEvent(event => {\n    isPointerModalityRef.current = false;\n    forceSyncFocus.current = true;\n\n    // When composing a character, Chrome fires ArrowDown twice. Firefox/Safari\n    // don't appear to suffer from this. `event.isComposing` is avoided due to\n    // Safari not supporting it properly (although it's not needed in the first\n    // place for Safari, just avoiding any possible issues).\n    if (event.which === 229) {\n      return;\n    }\n\n    // If the floating element is animating out, ignore navigation. Otherwise,\n    // the `activeIndex` gets set to 0 despite not being open so the next time\n    // the user ArrowDowns, the first item won't be focused.\n    if (!latestOpenRef.current && event.currentTarget === floatingFocusElementRef.current) {\n      return;\n    }\n    if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\n      stopEvent(event);\n      onOpenChange(false, event.nativeEvent, 'list-navigation');\n      if (isHTMLElement(elements.domReference)) {\n        if (virtual) {\n          tree == null || tree.events.emit('virtualfocus', elements.domReference);\n        } else {\n          elements.domReference.focus();\n        }\n      }\n      return;\n    }\n    const currentIndex = indexRef.current;\n    const minIndex = getMinIndex(listRef, disabledIndices);\n    const maxIndex = getMaxIndex(listRef, disabledIndices);\n    if (!typeableComboboxReference) {\n      if (event.key === 'Home') {\n        stopEvent(event);\n        indexRef.current = minIndex;\n        onNavigate(indexRef.current);\n      }\n      if (event.key === 'End') {\n        stopEvent(event);\n        indexRef.current = maxIndex;\n        onNavigate(indexRef.current);\n      }\n    }\n\n    // Grid navigation.\n    if (cols > 1) {\n      const sizes = itemSizes || Array.from({\n        length: listRef.current.length\n      }, () => ({\n        width: 1,\n        height: 1\n      }));\n      // To calculate movements on the grid, we use hypothetical cell indices\n      // as if every item was 1x1, then convert back to real indices.\n      const cellMap = buildCellMap(sizes, cols, dense);\n      const minGridIndex = cellMap.findIndex(index => index != null && !isDisabled(listRef.current, index, disabledIndices));\n      // last enabled index\n      const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex) => index != null && !isDisabled(listRef.current, index, disabledIndices) ? cellIndex : foundIndex, -1);\n      const index = cellMap[getGridNavigatedIndex({\n        current: cellMap.map(itemIndex => itemIndex != null ? listRef.current[itemIndex] : null)\n      }, {\n        event,\n        orientation,\n        loop,\n        rtl,\n        cols,\n        // treat undefined (empty grid spaces) as disabled indices so we\n        // don't end up in them\n        disabledIndices: getCellIndices([...(disabledIndices || listRef.current.map((_, index) => isDisabled(listRef.current, index) ? index : undefined)), undefined], cellMap),\n        minIndex: minGridIndex,\n        maxIndex: maxGridIndex,\n        prevIndex: getCellIndexOfCorner(indexRef.current > maxIndex ? minIndex : indexRef.current, sizes, cellMap, cols,\n        // use a corner matching the edge closest to the direction\n        // we're moving in so we don't end up in the same item. Prefer\n        // top/left over bottom/right.\n        event.key === ARROW_DOWN ? 'bl' : event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT) ? 'tr' : 'tl'),\n        stopEvent: true\n      })];\n      if (index != null) {\n        indexRef.current = index;\n        onNavigate(indexRef.current);\n      }\n      if (orientation === 'both') {\n        return;\n      }\n    }\n    if (isMainOrientationKey(event.key, orientation)) {\n      stopEvent(event);\n\n      // Reset the index if no item is focused.\n      if (open && !virtual && activeElement(event.currentTarget.ownerDocument) === event.currentTarget) {\n        indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\n        onNavigate(indexRef.current);\n        return;\n      }\n      if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\n        if (loop) {\n          indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            disabledIndices\n          });\n        } else {\n          indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            disabledIndices\n          }));\n        }\n      } else {\n        if (loop) {\n          indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            decrement: true,\n            disabledIndices\n          });\n        } else {\n          indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            decrement: true,\n            disabledIndices\n          }));\n        }\n      }\n      if (isIndexOutOfBounds(listRef, indexRef.current)) {\n        onNavigate(null);\n      } else {\n        onNavigate(indexRef.current);\n      }\n    }\n  });\n  const ariaActiveDescendantProp = React.useMemo(() => {\n    return virtual && open && hasActiveIndex && {\n      'aria-activedescendant': virtualId || activeId\n    };\n  }, [virtual, open, hasActiveIndex, virtualId, activeId]);\n  const floating = React.useMemo(() => {\n    return {\n      'aria-orientation': orientation === 'both' ? undefined : orientation,\n      ...(!isTypeableCombobox(elements.domReference) && ariaActiveDescendantProp),\n      onKeyDown: commonOnKeyDown,\n      onPointerMove() {\n        isPointerModalityRef.current = true;\n      }\n    };\n  }, [ariaActiveDescendantProp, commonOnKeyDown, elements.domReference, orientation]);\n  const reference = React.useMemo(() => {\n    function checkVirtualMouse(event) {\n      if (focusItemOnOpen === 'auto' && isVirtualClick(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    function checkVirtualPointer(event) {\n      // `pointerdown` fires first, reset the state then perform the checks.\n      focusItemOnOpenRef.current = focusItemOnOpen;\n      if (focusItemOnOpen === 'auto' && isVirtualPointerEvent(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    return {\n      ...ariaActiveDescendantProp,\n      onKeyDown(event) {\n        isPointerModalityRef.current = false;\n        const isArrowKey = event.key.startsWith('Arrow');\n        const isHomeOrEndKey = ['Home', 'End'].includes(event.key);\n        const isMoveKey = isArrowKey || isHomeOrEndKey;\n        const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);\n        const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl);\n        const isMainKey = isMainOrientationKey(event.key, orientation);\n        const isNavigationKey = (nested ? isCrossOpenKey : isMainKey) || event.key === 'Enter' || event.key.trim() === '';\n        if (virtual && open) {\n          const rootNode = tree == null ? void 0 : tree.nodesRef.current.find(node => node.parentId == null);\n          const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;\n          if (isMoveKey && deepestNode && virtualItemRef) {\n            const eventObject = new KeyboardEvent('keydown', {\n              key: event.key,\n              bubbles: true\n            });\n            if (isCrossOpenKey || isCrossCloseKey) {\n              var _deepestNode$context, _deepestNode$context2;\n              const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;\n              const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? listRef.current.find(item => (item == null ? void 0 : item.id) === activeId) : null;\n              if (dispatchItem) {\n                stopEvent(event);\n                dispatchItem.dispatchEvent(eventObject);\n                setVirtualId(undefined);\n              }\n            }\n            if ((isMainKey || isHomeOrEndKey) && deepestNode.context) {\n              if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {\n                var _deepestNode$context$;\n                stopEvent(event);\n                (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);\n                return;\n              }\n            }\n          }\n          return commonOnKeyDown(event);\n        }\n\n        // If a floating element should not open on arrow key down, avoid\n        // setting `activeIndex` while it's closed.\n        if (!open && !openOnArrowKeyDown && isArrowKey) {\n          return;\n        }\n        if (isNavigationKey) {\n          keyRef.current = nested && isMainKey ? null : event.key;\n        }\n        if (nested) {\n          if (isCrossOpenKey) {\n            stopEvent(event);\n            if (open) {\n              indexRef.current = getMinIndex(listRef, disabledIndicesRef.current);\n              onNavigate(indexRef.current);\n            } else {\n              onOpenChange(true, event.nativeEvent, 'list-navigation');\n            }\n          }\n          return;\n        }\n        if (isMainKey) {\n          if (selectedIndex != null) {\n            indexRef.current = selectedIndex;\n          }\n          stopEvent(event);\n          if (!open && openOnArrowKeyDown) {\n            onOpenChange(true, event.nativeEvent, 'list-navigation');\n          } else {\n            commonOnKeyDown(event);\n          }\n          if (open) {\n            onNavigate(indexRef.current);\n          }\n        }\n      },\n      onFocus() {\n        if (open && !virtual) {\n          onNavigate(null);\n        }\n      },\n      onPointerDown: checkVirtualPointer,\n      onMouseDown: checkVirtualMouse,\n      onClick: checkVirtualMouse\n    };\n  }, [activeId, ariaActiveDescendantProp, commonOnKeyDown, disabledIndicesRef, focusItemOnOpen, listRef, nested, onNavigate, onOpenChange, open, openOnArrowKeyDown, orientation, rtl, selectedIndex, tree, virtual, virtualItemRef]);\n  return React.useMemo(() => enabled ? {\n    reference,\n    floating,\n    item\n  } : {}, [enabled, reference, floating, item]);\n}\n\nconst componentRoleToAriaRoleMap = /*#__PURE__*/new Map([['select', 'listbox'], ['combobox', 'listbox'], ['label', false]]);\n\n/**\n * Adds base screen reader props to the reference and floating elements for a\n * given floating element `role`.\n * @see https://floating-ui.com/docs/useRole\n */\nfunction useRole(context, props) {\n  var _componentRoleToAriaR;\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    floatingId\n  } = context;\n  const {\n    enabled = true,\n    role = 'dialog'\n  } = props;\n  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;\n  const referenceId = useId();\n  const parentId = useFloatingParentNodeId();\n  const isNested = parentId != null;\n  const reference = React.useMemo(() => {\n    if (ariaRole === 'tooltip' || role === 'label') {\n      return {\n        [\"aria-\" + (role === 'label' ? 'labelledby' : 'describedby')]: open ? floatingId : undefined\n      };\n    }\n    return {\n      'aria-expanded': open ? 'true' : 'false',\n      'aria-haspopup': ariaRole === 'alertdialog' ? 'dialog' : ariaRole,\n      'aria-controls': open ? floatingId : undefined,\n      ...(ariaRole === 'listbox' && {\n        role: 'combobox'\n      }),\n      ...(ariaRole === 'menu' && {\n        id: referenceId\n      }),\n      ...(ariaRole === 'menu' && isNested && {\n        role: 'menuitem'\n      }),\n      ...(role === 'select' && {\n        'aria-autocomplete': 'none'\n      }),\n      ...(role === 'combobox' && {\n        'aria-autocomplete': 'list'\n      })\n    };\n  }, [ariaRole, floatingId, isNested, open, referenceId, role]);\n  const floating = React.useMemo(() => {\n    const floatingProps = {\n      id: floatingId,\n      ...(ariaRole && {\n        role: ariaRole\n      })\n    };\n    if (ariaRole === 'tooltip' || role === 'label') {\n      return floatingProps;\n    }\n    return {\n      ...floatingProps,\n      ...(ariaRole === 'menu' && {\n        'aria-labelledby': referenceId\n      })\n    };\n  }, [ariaRole, floatingId, referenceId, role]);\n  const item = React.useCallback(_ref => {\n    let {\n      active,\n      selected\n    } = _ref;\n    const commonProps = {\n      role: 'option',\n      ...(active && {\n        id: floatingId + \"-option\"\n      })\n    };\n\n    // For `menu`, we are unable to tell if the item is a `menuitemradio`\n    // or `menuitemcheckbox`. For backwards-compatibility reasons, also\n    // avoid defaulting to `menuitem` as it may overwrite custom role props.\n    switch (role) {\n      case 'select':\n        return {\n          ...commonProps,\n          'aria-selected': active && selected\n        };\n      case 'combobox':\n        {\n          return {\n            ...commonProps,\n            ...(active && {\n              'aria-selected': true\n            })\n          };\n        }\n    }\n    return {};\n  }, [floatingId, role]);\n  return React.useMemo(() => enabled ? {\n    reference,\n    floating,\n    item\n  } : {}, [enabled, reference, floating, item]);\n}\n\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\n// like `background-color`.\nconst camelCaseToKebabCase = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\nfunction execWithArgsOrReturn(valueOrFn, args) {\n  return typeof valueOrFn === 'function' ? valueOrFn(args) : valueOrFn;\n}\nfunction useDelayUnmount(open, durationMs) {\n  const [isMounted, setIsMounted] = React.useState(open);\n  if (open && !isMounted) {\n    setIsMounted(true);\n  }\n  React.useEffect(() => {\n    if (!open && isMounted) {\n      const timeout = setTimeout(() => setIsMounted(false), durationMs);\n      return () => clearTimeout(timeout);\n    }\n  }, [open, isMounted, durationMs]);\n  return isMounted;\n}\n/**\n * Provides a status string to apply CSS transitions to a floating element,\n * correctly handling placement-aware transitions.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\n */\nfunction useTransitionStatus(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    elements: {\n      floating\n    }\n  } = context;\n  const {\n    duration = 250\n  } = props;\n  const isNumberDuration = typeof duration === 'number';\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  const [status, setStatus] = React.useState('unmounted');\n  const isMounted = useDelayUnmount(open, closeDuration);\n  if (!isMounted && status === 'close') {\n    setStatus('unmounted');\n  }\n  index(() => {\n    if (!floating) return;\n    if (open) {\n      setStatus('initial');\n      const frame = requestAnimationFrame(() => {\n        setStatus('open');\n      });\n      return () => {\n        cancelAnimationFrame(frame);\n      };\n    }\n    setStatus('close');\n  }, [open, floating]);\n  return {\n    isMounted,\n    status\n  };\n}\n/**\n * Provides styles to apply CSS transitions to a floating element, correctly\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\n */\nfunction useTransitionStyles(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    initial: unstable_initial = {\n      opacity: 0\n    },\n    open: unstable_open,\n    close: unstable_close,\n    common: unstable_common,\n    duration = 250\n  } = props;\n  const placement = context.placement;\n  const side = placement.split('-')[0];\n  const fnArgs = React.useMemo(() => ({\n    side,\n    placement\n  }), [side, placement]);\n  const isNumberDuration = typeof duration === 'number';\n  const openDuration = (isNumberDuration ? duration : duration.open) || 0;\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  const [styles, setStyles] = React.useState(() => ({\n    ...execWithArgsOrReturn(unstable_common, fnArgs),\n    ...execWithArgsOrReturn(unstable_initial, fnArgs)\n  }));\n  const {\n    isMounted,\n    status\n  } = useTransitionStatus(context, {\n    duration\n  });\n  const initialRef = useLatestRef(unstable_initial);\n  const openRef = useLatestRef(unstable_open);\n  const closeRef = useLatestRef(unstable_close);\n  const commonRef = useLatestRef(unstable_common);\n  index(() => {\n    const initialStyles = execWithArgsOrReturn(initialRef.current, fnArgs);\n    const closeStyles = execWithArgsOrReturn(closeRef.current, fnArgs);\n    const commonStyles = execWithArgsOrReturn(commonRef.current, fnArgs);\n    const openStyles = execWithArgsOrReturn(openRef.current, fnArgs) || Object.keys(initialStyles).reduce((acc, key) => {\n      acc[key] = '';\n      return acc;\n    }, {});\n    if (status === 'initial') {\n      setStyles(styles => ({\n        transitionProperty: styles.transitionProperty,\n        ...commonStyles,\n        ...initialStyles\n      }));\n    }\n    if (status === 'open') {\n      setStyles({\n        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: openDuration + \"ms\",\n        ...commonStyles,\n        ...openStyles\n      });\n    }\n    if (status === 'close') {\n      const styles = closeStyles || initialStyles;\n      setStyles({\n        transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: closeDuration + \"ms\",\n        ...commonStyles,\n        ...styles\n      });\n    }\n  }, [closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status, fnArgs]);\n  return {\n    isMounted,\n    styles\n  };\n}\n\n/**\n * Provides a matching callback that can be used to focus an item as the user\n * types, often used in tandem with `useListNavigation()`.\n * @see https://floating-ui.com/docs/useTypeahead\n */\nfunction useTypeahead(context, props) {\n  var _ref;\n  const {\n    open,\n    dataRef\n  } = context;\n  const {\n    listRef,\n    activeIndex,\n    onMatch: unstable_onMatch,\n    onTypingChange: unstable_onTypingChange,\n    enabled = true,\n    findMatch = null,\n    resetMs = 750,\n    ignoreKeys = [],\n    selectedIndex = null\n  } = props;\n  const timeoutIdRef = React.useRef();\n  const stringRef = React.useRef('');\n  const prevIndexRef = React.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);\n  const matchIndexRef = React.useRef(null);\n  const onMatch = useEffectEvent(unstable_onMatch);\n  const onTypingChange = useEffectEvent(unstable_onTypingChange);\n  const findMatchRef = useLatestRef(findMatch);\n  const ignoreKeysRef = useLatestRef(ignoreKeys);\n  index(() => {\n    if (open) {\n      clearTimeout(timeoutIdRef.current);\n      matchIndexRef.current = null;\n      stringRef.current = '';\n    }\n  }, [open]);\n  index(() => {\n    // Sync arrow key navigation but not typeahead navigation.\n    if (open && stringRef.current === '') {\n      var _ref2;\n      prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;\n    }\n  }, [open, selectedIndex, activeIndex]);\n  const setTypingChange = useEffectEvent(value => {\n    if (value) {\n      if (!dataRef.current.typing) {\n        dataRef.current.typing = value;\n        onTypingChange(value);\n      }\n    } else {\n      if (dataRef.current.typing) {\n        dataRef.current.typing = value;\n        onTypingChange(value);\n      }\n    }\n  });\n  const onKeyDown = useEffectEvent(event => {\n    function getMatchingIndex(list, orderedList, string) {\n      const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);\n      return str ? list.indexOf(str) : -1;\n    }\n    const listContent = listRef.current;\n    if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\n      if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {\n        setTypingChange(false);\n      } else if (event.key === ' ') {\n        stopEvent(event);\n      }\n    }\n    if (listContent == null || ignoreKeysRef.current.includes(event.key) ||\n    // Character key.\n    event.key.length !== 1 ||\n    // Modifier key.\n    event.ctrlKey || event.metaKey || event.altKey) {\n      return;\n    }\n    if (open && event.key !== ' ') {\n      stopEvent(event);\n      setTypingChange(true);\n    }\n\n    // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\n    // allow it in this case, too.\n    const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\n      var _text$, _text$2;\n      return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\n    });\n\n    // Allows the user to cycle through items that start with the same letter\n    // in rapid succession.\n    if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\n      stringRef.current = '';\n      prevIndexRef.current = matchIndexRef.current;\n    }\n    stringRef.current += event.key;\n    clearTimeout(timeoutIdRef.current);\n    timeoutIdRef.current = setTimeout(() => {\n      stringRef.current = '';\n      prevIndexRef.current = matchIndexRef.current;\n      setTypingChange(false);\n    }, resetMs);\n    const prevIndex = prevIndexRef.current;\n    const index = getMatchingIndex(listContent, [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)], stringRef.current);\n    if (index !== -1) {\n      onMatch(index);\n      matchIndexRef.current = index;\n    } else if (event.key !== ' ') {\n      stringRef.current = '';\n      setTypingChange(false);\n    }\n  });\n  const reference = React.useMemo(() => ({\n    onKeyDown\n  }), [onKeyDown]);\n  const floating = React.useMemo(() => {\n    return {\n      onKeyDown,\n      onKeyUp(event) {\n        if (event.key === ' ') {\n          setTypingChange(false);\n        }\n      }\n    };\n  }, [onKeyDown, setTypingChange]);\n  return React.useMemo(() => enabled ? {\n    reference,\n    floating\n  } : {}, [enabled, reference, floating]);\n}\n\nfunction getArgsWithCustomFloatingHeight(state, height) {\n  return {\n    ...state,\n    rects: {\n      ...state.rects,\n      floating: {\n        ...state.rects.floating,\n        height\n      }\n    }\n  };\n}\n/**\n * Positions the floating element such that an inner element inside of it is\n * anchored to the reference element.\n * @see https://floating-ui.com/docs/inner\n */\nconst inner = props => ({\n  name: 'inner',\n  options: props,\n  async fn(state) {\n    const {\n      listRef,\n      overflowRef,\n      onFallbackChange,\n      offset: innerOffset = 0,\n      index = 0,\n      minItemsVisible = 4,\n      referenceOverflowThreshold = 0,\n      scrollRef,\n      ...detectOverflowOptions\n    } = evaluate(props, state);\n    const {\n      rects,\n      elements: {\n        floating\n      }\n    } = state;\n    const item = listRef.current[index];\n    const scrollEl = (scrollRef == null ? void 0 : scrollRef.current) || floating;\n\n    // Valid combinations:\n    // 1. Floating element is the scrollRef and has a border (default)\n    // 2. Floating element is not the scrollRef, floating element has a border\n    // 3. Floating element is not the scrollRef, scrollRef has a border\n    // Floating > {...getFloatingProps()} wrapper > scrollRef > items is not\n    // allowed as VoiceOver doesn't work.\n    const clientTop = floating.clientTop || scrollEl.clientTop;\n    const floatingIsBordered = floating.clientTop !== 0;\n    const scrollElIsBordered = scrollEl.clientTop !== 0;\n    const floatingIsScrollEl = floating === scrollEl;\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!state.placement.startsWith('bottom')) {\n        warn('`placement` side must be \"bottom\" when using the `inner`', 'middleware.');\n      }\n    }\n    if (!item) {\n      return {};\n    }\n    const nextArgs = {\n      ...state,\n      ...(await offset(-item.offsetTop - floating.clientTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state))\n    };\n    const overflow = await detectOverflow(getArgsWithCustomFloatingHeight(nextArgs, scrollEl.scrollHeight + clientTop + floating.clientTop), detectOverflowOptions);\n    const refOverflow = await detectOverflow(nextArgs, {\n      ...detectOverflowOptions,\n      elementContext: 'reference'\n    });\n    const diffY = max(0, overflow.top);\n    const nextY = nextArgs.y + diffY;\n    const isScrollable = scrollEl.scrollHeight > scrollEl.clientHeight;\n    const rounder = isScrollable ? v => v : round;\n    const maxHeight = rounder(max(0, scrollEl.scrollHeight + (floatingIsBordered && floatingIsScrollEl || scrollElIsBordered ? clientTop * 2 : 0) - diffY - max(0, overflow.bottom)));\n    scrollEl.style.maxHeight = maxHeight + \"px\";\n    scrollEl.scrollTop = diffY;\n\n    // There is not enough space, fallback to standard anchored positioning\n    if (onFallbackChange) {\n      const shouldFallback = scrollEl.offsetHeight < item.offsetHeight * min(minItemsVisible, listRef.current.length) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold;\n      ReactDOM.flushSync(() => onFallbackChange(shouldFallback));\n    }\n    if (overflowRef) {\n      overflowRef.current = await detectOverflow(getArgsWithCustomFloatingHeight({\n        ...nextArgs,\n        y: nextY\n      }, scrollEl.offsetHeight + clientTop + floating.clientTop), detectOverflowOptions);\n    }\n    return {\n      y: nextY\n    };\n  }\n});\n/**\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\n * expand the floating element's height, revealing more list items.\n * @see https://floating-ui.com/docs/inner\n */\nfunction useInnerOffset(context, props) {\n  const {\n    open,\n    elements\n  } = context;\n  const {\n    enabled = true,\n    overflowRef,\n    scrollRef,\n    onChange: unstable_onChange\n  } = props;\n  const onChange = useEffectEvent(unstable_onChange);\n  const controlledScrollingRef = React.useRef(false);\n  const prevScrollTopRef = React.useRef(null);\n  const initialOverflowRef = React.useRef(null);\n  React.useEffect(() => {\n    if (!enabled) return;\n    function onWheel(e) {\n      if (e.ctrlKey || !el || overflowRef.current == null) {\n        return;\n      }\n      const dY = e.deltaY;\n      const isAtTop = overflowRef.current.top >= -0.5;\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\n      const remainingScroll = el.scrollHeight - el.clientHeight;\n      const sign = dY < 0 ? -1 : 1;\n      const method = dY < 0 ? 'max' : 'min';\n      if (el.scrollHeight <= el.clientHeight) {\n        return;\n      }\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\n        e.preventDefault();\n        ReactDOM.flushSync(() => {\n          onChange(d => d + Math[method](dY, remainingScroll * sign));\n        });\n      } else if (/firefox/i.test(getUserAgent())) {\n        // Needed to propagate scrolling during momentum scrolling phase once\n        // it gets limited by the boundary. UX improvement, not critical.\n        el.scrollTop += dY;\n      }\n    }\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n    if (open && el) {\n      el.addEventListener('wheel', onWheel);\n\n      // Wait for the position to be ready.\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n        if (overflowRef.current != null) {\n          initialOverflowRef.current = {\n            ...overflowRef.current\n          };\n        }\n      });\n      return () => {\n        prevScrollTopRef.current = null;\n        initialOverflowRef.current = null;\n        el.removeEventListener('wheel', onWheel);\n      };\n    }\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\n  const floating = React.useMemo(() => ({\n    onKeyDown() {\n      controlledScrollingRef.current = true;\n    },\n    onWheel() {\n      controlledScrollingRef.current = false;\n    },\n    onPointerMove() {\n      controlledScrollingRef.current = false;\n    },\n    onScroll() {\n      const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n      if (!overflowRef.current || !el || !controlledScrollingRef.current) {\n        return;\n      }\n      if (prevScrollTopRef.current !== null) {\n        const scrollDiff = el.scrollTop - prevScrollTopRef.current;\n        if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\n          ReactDOM.flushSync(() => onChange(d => d + scrollDiff));\n        }\n      }\n\n      // [Firefox] Wait for the height change to have been applied.\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n      });\n    }\n  }), [elements.floating, onChange, overflowRef, scrollRef]);\n  return React.useMemo(() => enabled ? {\n    floating\n  } : {}, [enabled, floating]);\n}\n\nfunction isPointInPolygon(point, polygon) {\n  const [x, y] = point;\n  let isInside = false;\n  const length = polygon.length;\n  for (let i = 0, j = length - 1; i < length; j = i++) {\n    const [xi, yi] = polygon[i] || [0, 0];\n    const [xj, yj] = polygon[j] || [0, 0];\n    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n}\nfunction isInside(point, rect) {\n  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\n}\n/**\n * Generates a safe polygon area that the user can traverse without closing the\n * floating element once leaving the reference element.\n * @see https://floating-ui.com/docs/useHover#safepolygon\n */\nfunction safePolygon(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    buffer = 0.5,\n    blockPointerEvents = false,\n    requireIntent = true\n  } = options;\n  let timeoutId;\n  let hasLanded = false;\n  let lastX = null;\n  let lastY = null;\n  let lastCursorTime = performance.now();\n  function getCursorSpeed(x, y) {\n    const currentTime = performance.now();\n    const elapsedTime = currentTime - lastCursorTime;\n    if (lastX === null || lastY === null || elapsedTime === 0) {\n      lastX = x;\n      lastY = y;\n      lastCursorTime = currentTime;\n      return null;\n    }\n    const deltaX = x - lastX;\n    const deltaY = y - lastY;\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    const speed = distance / elapsedTime; // px / ms\n\n    lastX = x;\n    lastY = y;\n    lastCursorTime = currentTime;\n    return speed;\n  }\n  const fn = _ref => {\n    let {\n      x,\n      y,\n      placement,\n      elements,\n      onClose,\n      nodeId,\n      tree\n    } = _ref;\n    return function onMouseMove(event) {\n      function close() {\n        clearTimeout(timeoutId);\n        onClose();\n      }\n      clearTimeout(timeoutId);\n      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\n        return;\n      }\n      const {\n        clientX,\n        clientY\n      } = event;\n      const clientPoint = [clientX, clientY];\n      const target = getTarget(event);\n      const isLeave = event.type === 'mouseleave';\n      const isOverFloatingEl = contains(elements.floating, target);\n      const isOverReferenceEl = contains(elements.domReference, target);\n      const refRect = elements.domReference.getBoundingClientRect();\n      const rect = elements.floating.getBoundingClientRect();\n      const side = placement.split('-')[0];\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\n      const isOverReferenceRect = isInside(clientPoint, refRect);\n      const isFloatingWider = rect.width > refRect.width;\n      const isFloatingTaller = rect.height > refRect.height;\n      const left = (isFloatingWider ? refRect : rect).left;\n      const right = (isFloatingWider ? refRect : rect).right;\n      const top = (isFloatingTaller ? refRect : rect).top;\n      const bottom = (isFloatingTaller ? refRect : rect).bottom;\n      if (isOverFloatingEl) {\n        hasLanded = true;\n        if (!isLeave) {\n          return;\n        }\n      }\n      if (isOverReferenceEl) {\n        hasLanded = false;\n      }\n      if (isOverReferenceEl && !isLeave) {\n        hasLanded = true;\n        return;\n      }\n\n      // Prevent overlapping floating element from being stuck in an open-close\n      // loop: https://github.com/floating-ui/floating-ui/issues/1910\n      if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {\n        return;\n      }\n\n      // If any nested child is open, abort.\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {\n        let {\n          context\n        } = _ref2;\n        return context == null ? void 0 : context.open;\n      })) {\n        return;\n      }\n\n      // If the pointer is leaving from the opposite side, the \"buffer\" logic\n      // creates a point where the floating element remains open, but should be\n      // ignored.\n      // A constant of 1 handles floating point rounding errors.\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\n        return close();\n      }\n\n      // Ignore when the cursor is within the rectangular trough between the\n      // two elements. Since the triangle is created from the cursor point,\n      // which can start beyond the ref element's edge, traversing back and\n      // forth from the ref to the floating element can cause it to close. This\n      // ensures it always remains open in that case.\n      let rectPoly = [];\n      switch (side) {\n        case 'top':\n          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];\n          break;\n        case 'bottom':\n          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];\n          break;\n        case 'left':\n          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];\n          break;\n        case 'right':\n          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];\n          break;\n      }\n      function getPolygon(_ref3) {\n        let [x, y] = _ref3;\n        switch (side) {\n          case 'top':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'bottom':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'left':\n            {\n              const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\n            }\n          case 'right':\n            {\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n        }\n      }\n      if (isPointInPolygon([clientX, clientY], rectPoly)) {\n        return;\n      }\n      if (hasLanded && !isOverReferenceRect) {\n        return close();\n      }\n      if (!isLeave && requireIntent) {\n        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);\n        const cursorSpeedThreshold = 0.1;\n        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {\n          return close();\n        }\n      }\n      if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {\n        close();\n      } else if (!hasLanded && requireIntent) {\n        timeoutId = window.setTimeout(close, 40);\n      }\n    };\n  };\n  fn.__options = {\n    blockPointerEvents\n  };\n  return fn;\n}\n\nexport { Composite, CompositeItem, FloatingArrow, FloatingDelayGroup, FloatingFocusManager, FloatingList, FloatingNode, FloatingOverlay, FloatingPortal, FloatingTree, inner, safePolygon, useClick, useClientPoint, useDelayGroup, useDelayGroupContext, useDismiss, useFloating, useFloatingNodeId, useFloatingParentNodeId, useFloatingPortalNode, useFloatingRootContext, useFloatingTree, useFocus, useHover, useId, useInnerOffset, useInteractions, useListItem, useListNavigation, useMergeRefs, useRole, useTransitionStatus, useTransitionStyles, useTypeahead };\n","import { useRef } from 'react';\nimport {\n  arrow,\n  flip,\n  inline,\n  limitShift,\n  Middleware,\n  offset,\n  shift,\n  size,\n  useFloating,\n  UseFloatingReturn,\n} from '@floating-ui/react';\nimport { useDidUpdate, useUncontrolled } from '@mantine/hooks';\nimport {\n  FloatingAxesOffsets,\n  FloatingPosition,\n  FloatingStrategy,\n  useFloatingAutoUpdate,\n} from '../Floating';\nimport { PopoverMiddlewares, PopoverWidth } from './Popover.types';\n\ninterface UsePopoverOptions {\n  offset: number | FloatingAxesOffsets;\n  position: FloatingPosition;\n  positionDependencies: any[] | undefined;\n  onPositionChange?: (position: FloatingPosition) => void;\n  opened: boolean | undefined;\n  defaultOpened: boolean | undefined;\n  onChange?: (opened: boolean) => void;\n  onClose?: () => void;\n  onOpen?: () => void;\n  width: PopoverWidth;\n  middlewares: PopoverMiddlewares | undefined;\n  arrowRef: React.RefObject<HTMLDivElement | null>;\n  arrowOffset: number;\n  strategy?: FloatingStrategy;\n}\n\nfunction getDefaultMiddlewares(middlewares: PopoverMiddlewares | undefined): PopoverMiddlewares {\n  if (middlewares === undefined) {\n    return { shift: true, flip: true };\n  }\n\n  const result = { ...middlewares };\n  if (middlewares.shift === undefined) {\n    result.shift = true;\n  }\n\n  if (middlewares.flip === undefined) {\n    result.flip = true;\n  }\n\n  return result;\n}\n\nfunction getPopoverMiddlewares(\n  options: UsePopoverOptions,\n  getFloating: () => UseFloatingReturn<Element>\n) {\n  const middlewaresOptions = getDefaultMiddlewares(options.middlewares);\n  const middlewares: Middleware[] = [offset(options.offset)];\n\n  if (middlewaresOptions.shift) {\n    middlewares.push(\n      shift(\n        typeof middlewaresOptions.shift === 'boolean'\n          ? { limiter: limitShift(), padding: 5 }\n          : { limiter: limitShift(), padding: 5, ...middlewaresOptions.shift }\n      )\n    );\n  }\n\n  if (middlewaresOptions.flip) {\n    middlewares.push(\n      typeof middlewaresOptions.flip === 'boolean' ? flip() : flip(middlewaresOptions.flip)\n    );\n  }\n\n  if (middlewaresOptions.inline) {\n    middlewares.push(\n      typeof middlewaresOptions.inline === 'boolean' ? inline() : inline(middlewaresOptions.inline)\n    );\n  }\n\n  middlewares.push(arrow({ element: options.arrowRef, padding: options.arrowOffset }));\n\n  if (middlewaresOptions.size || options.width === 'target') {\n    middlewares.push(\n      size({\n        ...(typeof middlewaresOptions.size === 'boolean' ? {} : middlewaresOptions.size),\n        apply({ rects, availableWidth, availableHeight, ...rest }) {\n          const floating = getFloating();\n          const styles = floating.refs.floating.current?.style ?? {};\n\n          if (middlewaresOptions.size) {\n            //If custom apply function is given use that else set defaults\n            if (typeof middlewaresOptions.size === 'object' && !!middlewaresOptions.size.apply) {\n              middlewaresOptions.size.apply({ rects, availableWidth, availableHeight, ...rest });\n            } else {\n              Object.assign(styles, {\n                maxWidth: `${availableWidth}px`,\n                maxHeight: `${availableHeight}px`,\n              });\n            }\n          }\n\n          if (options.width === 'target') {\n            Object.assign(styles, {\n              width: `${rects.reference.width}px`,\n            });\n          }\n        },\n      })\n    );\n  }\n\n  return middlewares;\n}\n\nexport function usePopover(options: UsePopoverOptions) {\n  const [_opened, setOpened] = useUncontrolled({\n    value: options.opened,\n    defaultValue: options.defaultOpened,\n    finalValue: false,\n    onChange: options.onChange,\n  });\n  const previouslyOpened = useRef(_opened);\n\n  const onClose = () => {\n    if (_opened) {\n      setOpened(false);\n    }\n  };\n\n  const onToggle = () => setOpened(!_opened);\n\n  const floating: UseFloatingReturn<Element> = useFloating({\n    strategy: options.strategy,\n    placement: options.position,\n    middleware: getPopoverMiddlewares(options, () => floating),\n  });\n\n  useFloatingAutoUpdate({\n    opened: _opened,\n    position: options.position,\n    positionDependencies: options.positionDependencies || [],\n    floating,\n  });\n\n  useDidUpdate(() => {\n    options.onPositionChange?.(floating.placement);\n  }, [floating.placement]);\n\n  useDidUpdate(() => {\n    if (_opened !== previouslyOpened.current) {\n      if (!_opened) {\n        options.onClose?.();\n      } else {\n        options.onOpen?.();\n      }\n    }\n\n    previouslyOpened.current = _opened;\n  }, [_opened, options.onClose, options.onOpen]);\n\n  return {\n    floating,\n    controlled: typeof options.opened === 'boolean',\n    opened: _opened,\n    onClose,\n    onToggle,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { autoUpdate } from '@floating-ui/react';\nimport { useDidUpdate } from '@mantine/hooks';\nimport { FloatingPosition } from './types';\n\ninterface Payload {\n  opened: boolean | undefined;\n  floating: {\n    update: () => void;\n    refs: {\n      floating: React.MutableRefObject<any>;\n      reference: React.MutableRefObject<any>;\n    };\n  };\n  positionDependencies: any[];\n  position: FloatingPosition;\n}\n\nexport function useFloatingAutoUpdate({\n  opened,\n  floating,\n  position,\n  positionDependencies,\n}: Payload) {\n  const [delayedUpdate, setDelayedUpdate] = useState(0);\n\n  useEffect(() => {\n    if (floating.refs.reference.current && floating.refs.floating.current && opened) {\n      return autoUpdate(\n        floating.refs.reference.current,\n        floating.refs.floating.current,\n        floating.update\n      );\n    }\n\n    return undefined;\n  }, [\n    floating.refs.reference.current,\n    floating.refs.floating.current,\n    opened,\n    delayedUpdate,\n    position,\n  ]);\n\n  useDidUpdate(() => {\n    floating.update();\n  }, positionDependencies);\n\n  useDidUpdate(() => {\n    setDelayedUpdate((c) => c + 1);\n  }, [opened]);\n}\n","import { useCallback, useRef, useState } from 'react';\nimport { useClickOutside, useId } from '@mantine/hooks';\nimport {\n  createVarsResolver,\n  ElementProps,\n  ExtendComponent,\n  Factory,\n  getDefaultZIndex,\n  getRadius,\n  getShadow,\n  MantineRadius,\n  MantineShadow,\n  StylesApiProps,\n  useDirection,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport {\n  ArrowPosition,\n  FloatingAxesOffsets,\n  FloatingPosition,\n  FloatingStrategy,\n  getFloatingPosition,\n} from '../Floating';\nimport { Overlay, OverlayProps } from '../Overlay';\nimport { OptionalPortal, PortalProps } from '../Portal';\nimport { Transition, TransitionOverride } from '../Transition';\nimport { PopoverContextProvider } from './Popover.context';\nimport { PopoverMiddlewares, PopoverWidth } from './Popover.types';\nimport { PopoverDropdown } from './PopoverDropdown/PopoverDropdown';\nimport { PopoverTarget } from './PopoverTarget/PopoverTarget';\nimport { usePopover } from './use-popover';\nimport classes from './Popover.module.css';\n\nexport type PopoverStylesNames = 'dropdown' | 'arrow' | 'overlay';\nexport type PopoverCssVariables = {\n  dropdown: '--popover-radius' | '--popover-shadow';\n};\n\nexport interface __PopoverProps {\n  /** Dropdown position relative to the target element, `'bottom'` by default */\n  position?: FloatingPosition;\n\n  /** Offset of the dropdown element, `8` by default */\n  offset?: number | FloatingAxesOffsets;\n\n  /** Called when dropdown position changes */\n  onPositionChange?: (position: FloatingPosition) => void;\n\n  /** `useEffect` dependencies to force update dropdown position, `[]` by default */\n  positionDependencies?: any[];\n\n  /** Called when dropdown closes */\n  onClose?: () => void;\n\n  /** Called when dropdown opens */\n  onOpen?: () => void;\n\n  /** If set dropdown will not be unmounted from the DOM when it is hidden, `display: none` styles will be added instead */\n  keepMounted?: boolean;\n\n  /** Props passed down to the `Transition` component that used to animate dropdown presence, use to configure duration and animation type, `{ duration: 150, transition: 'fade' }` by default */\n  transitionProps?: TransitionOverride;\n\n  /** Called when exit transition ends */\n  onExitTransitionEnd?: () => void;\n\n  /** Called when enter transition ends */\n  onEnterTransitionEnd?: () => void;\n\n  /** Dropdown width, or `'target'` to make dropdown width the same as target element, `'max-content'` by default */\n  width?: PopoverWidth;\n\n  /** Floating ui middlewares to configure position handling, `{ flip: true, shift: true, inline: false }` by default */\n  middlewares?: PopoverMiddlewares;\n\n  /** Determines whether component should have an arrow, `false` by default */\n  withArrow?: boolean;\n\n  /** Determines whether the overlay should be displayed when the dropdown is opened, `false` by default */\n  withOverlay?: boolean;\n\n  /** Props passed down to `Overlay` component */\n  overlayProps?: OverlayProps & ElementProps<'div'>;\n\n  /** Arrow size in px, `7` by default */\n  arrowSize?: number;\n\n  /** Arrow offset in px, `5` by default */\n  arrowOffset?: number;\n\n  /** Arrow `border-radius` in px, `0` by default */\n  arrowRadius?: number;\n\n  /** Arrow position */\n  arrowPosition?: ArrowPosition;\n\n  /** Determines whether dropdown should be rendered within the `Portal`, `true` by default */\n  withinPortal?: boolean;\n\n  /** Props to pass down to the `Portal` when `withinPortal` is true */\n  portalProps?: Omit<PortalProps, 'children'>;\n\n  /** Dropdown `z-index`, `300` by default */\n  zIndex?: string | number;\n\n  /** Key of `theme.radius` or any valid CSS value to set border-radius, `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Key of `theme.shadows` or any other valid CSS `box-shadow` value */\n  shadow?: MantineShadow;\n\n  /** If set, popover dropdown will not be rendered */\n  disabled?: boolean;\n\n  /** Determines whether focus should be automatically returned to control when dropdown closes, `false` by default */\n  returnFocus?: boolean;\n\n  /** Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy), `'absolute'` by default */\n  floatingStrategy?: FloatingStrategy;\n}\n\nexport interface PopoverProps extends __PopoverProps, StylesApiProps<PopoverFactory> {\n  __staticSelector?: string;\n\n  /** `Popover.Target` and `Popover.Dropdown` components */\n  children?: React.ReactNode;\n\n  /** Initial opened state for uncontrolled component */\n  defaultOpened?: boolean;\n\n  /** Controlled dropdown opened state */\n  opened?: boolean;\n\n  /** Called with current state when dropdown opens or closes */\n  onChange?: (opened: boolean) => void;\n\n  /** Determines whether dropdown should be closed on outside clicks, `true` by default */\n  closeOnClickOutside?: boolean;\n\n  /** Events that trigger outside clicks */\n  clickOutsideEvents?: string[];\n\n  /** Determines whether focus should be trapped within dropdown, `false` by default */\n  trapFocus?: boolean;\n\n  /** Determines whether dropdown should be closed when `Escape` key is pressed, `true` by default */\n  closeOnEscape?: boolean;\n\n  /** Id base to create accessibility connections */\n  id?: string;\n\n  /** Determines whether dropdown and target elements should have accessible roles, `true` by default */\n  withRoles?: boolean;\n}\n\nexport type PopoverFactory = Factory<{\n  props: PopoverProps;\n  stylesNames: PopoverStylesNames;\n  vars: PopoverCssVariables;\n}>;\n\nconst defaultProps: Partial<PopoverProps> = {\n  position: 'bottom',\n  offset: 8,\n  positionDependencies: [],\n  transitionProps: { transition: 'fade', duration: 150 },\n  middlewares: { flip: true, shift: true, inline: false },\n  arrowSize: 7,\n  arrowOffset: 5,\n  arrowRadius: 0,\n  arrowPosition: 'side',\n  closeOnClickOutside: true,\n  withinPortal: true,\n  closeOnEscape: true,\n  trapFocus: false,\n  withRoles: true,\n  returnFocus: false,\n  withOverlay: false,\n  clickOutsideEvents: ['mousedown', 'touchstart'],\n  zIndex: getDefaultZIndex('popover'),\n  __staticSelector: 'Popover',\n  width: 'max-content',\n};\n\nconst varsResolver = createVarsResolver<PopoverFactory>((_, { radius, shadow }) => ({\n  dropdown: {\n    '--popover-radius': radius === undefined ? undefined : getRadius(radius),\n    '--popover-shadow': getShadow(shadow),\n  },\n}));\n\nexport function Popover(_props: PopoverProps) {\n  const props = useProps('Popover', defaultProps, _props);\n  const {\n    children,\n    position,\n    offset,\n    onPositionChange,\n    positionDependencies,\n    opened,\n    transitionProps,\n    onExitTransitionEnd,\n    onEnterTransitionEnd,\n    width,\n    middlewares,\n    withArrow,\n    arrowSize,\n    arrowOffset,\n    arrowRadius,\n    arrowPosition,\n    unstyled,\n    classNames,\n    styles,\n    closeOnClickOutside,\n    withinPortal,\n    portalProps,\n    closeOnEscape,\n    clickOutsideEvents,\n    trapFocus,\n    onClose,\n    onOpen,\n    onChange,\n    zIndex,\n    radius,\n    shadow,\n    id,\n    defaultOpened,\n    __staticSelector,\n    withRoles,\n    disabled,\n    returnFocus,\n    variant,\n    keepMounted,\n    vars,\n    floatingStrategy,\n    withOverlay,\n    overlayProps,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<PopoverFactory>({\n    name: __staticSelector!,\n    props,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: 'dropdown',\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedStyles } = useResolvedStylesApi<PopoverFactory>({ classNames, styles, props });\n\n  const arrowRef = useRef<HTMLDivElement | null>(null);\n  const [targetNode, setTargetNode] = useState<HTMLElement | null>(null);\n  const [dropdownNode, setDropdownNode] = useState<HTMLElement | null>(null);\n  const { dir } = useDirection();\n\n  const uid = useId(id);\n  const popover = usePopover({\n    middlewares,\n    width,\n    position: getFloatingPosition(dir, position!),\n    offset: typeof offset === 'number' ? offset + (withArrow ? arrowSize! / 2 : 0) : offset!,\n    arrowRef,\n    arrowOffset: arrowOffset!,\n    onPositionChange,\n    positionDependencies,\n    opened,\n    defaultOpened,\n    onChange,\n    onOpen,\n    onClose,\n    strategy: floatingStrategy,\n  });\n\n  useClickOutside(() => closeOnClickOutside && popover.onClose(), clickOutsideEvents, [\n    targetNode,\n    dropdownNode,\n  ]);\n\n  const reference = useCallback(\n    (node: HTMLElement) => {\n      setTargetNode(node);\n      popover.floating.refs.setReference(node);\n    },\n    [popover.floating.refs.setReference]\n  );\n\n  const floating = useCallback(\n    (node: HTMLElement) => {\n      setDropdownNode(node);\n      popover.floating.refs.setFloating(node);\n    },\n    [popover.floating.refs.setFloating]\n  );\n\n  const onExited = useCallback(() => {\n    transitionProps?.onExited?.();\n    onExitTransitionEnd?.();\n  }, [transitionProps?.onExited, onExitTransitionEnd]);\n\n  const onEntered = useCallback(() => {\n    transitionProps?.onEntered?.();\n    onEnterTransitionEnd?.();\n  }, [transitionProps?.onEntered, onEnterTransitionEnd]);\n\n  return (\n    <PopoverContextProvider\n      value={{\n        returnFocus,\n        disabled,\n        controlled: popover.controlled,\n        reference,\n        floating,\n        x: popover.floating.x!,\n        y: popover.floating.y!,\n        arrowX: popover.floating?.middlewareData?.arrow?.x,\n        arrowY: popover.floating?.middlewareData?.arrow?.y,\n        opened: popover.opened,\n        arrowRef,\n        transitionProps: { ...transitionProps, onExited, onEntered },\n        width,\n        withArrow,\n        arrowSize: arrowSize!,\n        arrowOffset: arrowOffset!,\n        arrowRadius: arrowRadius!,\n        arrowPosition: arrowPosition!,\n        placement: popover.floating.placement,\n        trapFocus,\n        withinPortal,\n        portalProps,\n        zIndex,\n        radius,\n        shadow,\n        closeOnEscape,\n        onClose: popover.onClose,\n        onToggle: popover.onToggle,\n        getTargetId: () => `${uid}-target`,\n        getDropdownId: () => `${uid}-dropdown`,\n        withRoles,\n        targetProps: others,\n        __staticSelector: __staticSelector!,\n        classNames,\n        styles,\n        unstyled,\n        variant,\n        keepMounted,\n        getStyles,\n        resolvedStyles,\n        floatingStrategy,\n      }}\n    >\n      {children}\n      {withOverlay && (\n        <Transition\n          transition=\"fade\"\n          mounted={popover.opened}\n          duration={transitionProps?.duration || 250}\n          exitDuration={transitionProps?.exitDuration || 250}\n        >\n          {(transitionStyles) => (\n            <OptionalPortal withinPortal={withinPortal}>\n              <Overlay\n                {...overlayProps}\n                {...getStyles('overlay', {\n                  className: overlayProps?.className,\n                  style: [transitionStyles, overlayProps?.style],\n                })}\n              />\n            </OptionalPortal>\n          )}\n        </Transition>\n      )}\n    </PopoverContextProvider>\n  );\n}\n\nPopover.Target = PopoverTarget;\nPopover.Dropdown = PopoverDropdown;\nPopover.displayName = '@mantine/core/Popover';\nPopover.extend = (input: ExtendComponent<PopoverFactory>) => input;\n","import { createSafeContext, GetStylesApi, MantineSize } from '../../core';\nimport type { ComboboxFactory } from './Combobox';\nimport type { ComboboxOptionProps } from './ComboboxOption/ComboboxOption';\nimport type { ComboboxStore } from './use-combobox/use-combobox';\n\nexport interface ComboboxContextValue {\n  getStyles: GetStylesApi<ComboboxFactory>;\n  store: ComboboxStore;\n  onOptionSubmit?: (value: string, optionProps: ComboboxOptionProps) => void;\n  size: MantineSize | (string & {});\n  resetSelectionOnOptionHover: boolean | undefined;\n  readOnly: boolean | undefined;\n}\n\nexport const [ComboboxProvider, useComboboxContext] = createSafeContext<ComboboxContextValue>(\n  'Combobox component was not found in tree'\n);\n","import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  Factory,\n  factory,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxChevronStylesNames = 'chevron';\nexport type ComboboxChevronCSSVariables = {\n  chevron: '--combobox-chevron-size' | '--combobox-chevron-color';\n};\n\nexport interface ComboboxChevronProps\n  extends BoxProps,\n    StylesApiProps<ComboboxChevronFactory>,\n    ElementProps<'svg', 'opacity' | 'display'> {\n  size?: MantineSize | (string & {});\n  error?: React.ReactNode;\n  color?: MantineColor;\n}\n\nexport type ComboboxChevronFactory = Factory<{\n  props: ComboboxChevronProps;\n  ref: SVGSVGElement;\n  stylesNames: ComboboxChevronStylesNames;\n  vars: ComboboxChevronCSSVariables;\n}>;\n\nconst defaultProps: Partial<ComboboxChevronProps> = {\n  error: null,\n};\n\nconst varsResolver = createVarsResolver<ComboboxChevronFactory>((theme, { size, color }) => ({\n  chevron: {\n    '--combobox-chevron-size': getSize(size, 'combobox-chevron-size'),\n    '--combobox-chevron-color': color ? getThemeColor(color, theme) : undefined,\n  },\n}));\n\nexport const ComboboxChevron = factory<ComboboxChevronFactory>((_props, ref) => {\n  const props = useProps('ComboboxChevron', defaultProps, _props);\n  const { size, error, style, className, classNames, styles, unstyled, vars, mod, ...others } =\n    props;\n\n  const getStyles = useStyles<ComboboxChevronFactory>({\n    name: 'ComboboxChevron',\n    classes,\n    props,\n    style,\n    className,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'chevron',\n  });\n\n  return (\n    <Box\n      component=\"svg\"\n      {...others}\n      {...getStyles('chevron')}\n      size={size}\n      viewBox=\"0 0 15 15\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      mod={['combobox-chevron', { error }, mod]}\n      ref={ref}\n    >\n      <path\n        d=\"M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n      />\n    </Box>\n  );\n});\n\nComboboxChevron.classes = classes;\nComboboxChevron.displayName = '@mantine/core/ComboboxChevron';\n","import { forwardRef } from 'react';\nimport { ElementProps } from '../../../core';\nimport { Input, InputClearButtonProps } from '../../Input';\n\nexport interface ComboboxClearButtonProps extends InputClearButtonProps, ElementProps<'button'> {\n  onClear: () => void;\n}\n\nexport const ComboboxClearButton = forwardRef<HTMLButtonElement, ComboboxClearButtonProps>(\n  ({ size, onMouseDown, onClick, onClear, ...others }, ref) => (\n    <Input.ClearButton\n      ref={ref}\n      tabIndex={-1}\n      aria-hidden\n      {...others}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        onMouseDown?.(event);\n      }}\n      onClick={(event) => {\n        onClear();\n        onClick?.(event);\n      }}\n    />\n  )\n);\n\nComboboxClearButton.displayName = '@mantine/core/ComboboxClearButton';\n","import { factory, Factory, useProps } from '../../../core';\nimport { Popover, PopoverDropdownProps } from '../../Popover';\nimport { useComboboxContext } from '../Combobox.context';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxDropdownStylesNames = 'dropdown';\n\nexport interface ComboboxDropdownProps extends PopoverDropdownProps {\n  /** Determines whether the dropdown should be hidden, for example, when there are no options to display */\n  hidden?: boolean;\n}\n\nexport type ComboboxDropdownFactory = Factory<{\n  props: ComboboxDropdownProps;\n  ref: HTMLDivElement;\n  stylesNames: ComboboxDropdownStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ComboboxDropdownProps> = {};\n\nexport const ComboboxDropdown = factory<ComboboxDropdownFactory>((props, ref) => {\n  const { classNames, styles, className, style, hidden, ...others } = useProps(\n    'ComboboxDropdown',\n    defaultProps,\n    props\n  );\n\n  const ctx = useComboboxContext();\n\n  return (\n    <Popover.Dropdown\n      {...others}\n      ref={ref}\n      role=\"presentation\"\n      data-hidden={hidden || undefined}\n      {...ctx.getStyles('dropdown', { className, style, classNames, styles })}\n    />\n  );\n});\n\nComboboxDropdown.classes = classes;\nComboboxDropdown.displayName = '@mantine/core/ComboboxDropdown';\n","import { factory, Factory, isElement, useProps } from '../../../core';\nimport { Popover } from '../../Popover';\nimport { useComboboxContext } from '../Combobox.context';\n\nexport interface ComboboxDropdownTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to access element ref */\n  refProp?: string;\n}\n\nconst defaultProps: Partial<ComboboxDropdownTargetProps> = {\n  refProp: 'ref',\n};\n\nexport type ComboboxDropdownTargetFactory = Factory<{\n  props: ComboboxDropdownTargetProps;\n  ref: HTMLElement;\n  compound: true;\n}>;\n\nexport const ComboboxDropdownTarget = factory<ComboboxDropdownTargetFactory>((props, ref) => {\n  const { children, refProp } = useProps('ComboboxDropdownTarget', defaultProps, props);\n  useComboboxContext();\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Combobox.DropdownTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  return (\n    <Popover.Target ref={ref} refProp={refProp}>\n      {children}\n    </Popover.Target>\n  );\n});\n\nComboboxDropdownTarget.displayName = '@mantine/core/ComboboxDropdownTarget';\n","import {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  useProps,\n} from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxEmptyStylesNames = 'empty';\n\nexport interface ComboboxEmptyProps\n  extends BoxProps,\n    CompoundStylesApiProps<ComboboxEmptyFactory>,\n    ElementProps<'div'> {}\n\nexport type ComboboxEmptyFactory = Factory<{\n  props: ComboboxEmptyProps;\n  ref: HTMLDivElement;\n  stylesNames: ComboboxEmptyStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ComboboxEmptyProps> = {};\n\nexport const ComboboxEmpty = factory<ComboboxEmptyFactory>((props, ref) => {\n  const { classNames, className, style, styles, vars, ...others } = useProps(\n    'ComboboxEmpty',\n    defaultProps,\n    props\n  );\n\n  const ctx = useComboboxContext();\n\n  return (\n    <Box\n      ref={ref}\n      {...ctx.getStyles('empty', { className, classNames, styles, style })}\n      {...others}\n    />\n  );\n});\n\nComboboxEmpty.classes = classes;\nComboboxEmpty.displayName = '@mantine/core/ComboboxEmpty';\n","import { useState } from 'react';\nimport { useComboboxContext } from '../Combobox.context';\n\ninterface UseComboboxTargetPropsInput {\n  targetType: 'input' | 'button' | undefined;\n  withAriaAttributes: boolean | undefined;\n  withKeyboardNavigation: boolean | undefined;\n  withExpandedAttribute: boolean | undefined;\n  onKeyDown: React.KeyboardEventHandler<HTMLInputElement> | undefined;\n  autoComplete: string | undefined;\n}\n\nexport function useComboboxTargetProps({\n  onKeyDown,\n  withKeyboardNavigation,\n  withAriaAttributes,\n  withExpandedAttribute,\n  targetType,\n  autoComplete,\n}: UseComboboxTargetPropsInput) {\n  const ctx = useComboboxContext();\n  const [selectedOptionId, setSelectedOptionId] = useState<string | null>(null);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(event);\n\n    if (ctx.readOnly) {\n      return;\n    }\n\n    if (withKeyboardNavigation) {\n      // Ignore during composition in IME\n      if (event.nativeEvent.isComposing) {\n        return;\n      }\n\n      if (event.nativeEvent.code === 'ArrowDown') {\n        event.preventDefault();\n\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown('keyboard');\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex('selected', { scrollIntoView: true });\n        } else {\n          setSelectedOptionId(ctx.store.selectNextOption());\n        }\n      }\n\n      if (event.nativeEvent.code === 'ArrowUp') {\n        event.preventDefault();\n\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown('keyboard');\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex('selected', { scrollIntoView: true });\n        } else {\n          setSelectedOptionId(ctx.store.selectPreviousOption());\n        }\n      }\n\n      if (event.nativeEvent.code === 'Enter' || event.nativeEvent.code === 'NumpadEnter') {\n        // This is a workaround for handling differences in behavior of isComposing property in Safari\n        // See: https://dninomiya.github.io/form-guide/stop-enter-submit\n        if (event.nativeEvent.keyCode === 229) {\n          return;\n        }\n\n        const selectedOptionIndex = ctx.store.getSelectedOptionIndex();\n\n        if (ctx.store.dropdownOpened && selectedOptionIndex !== -1) {\n          event.preventDefault();\n          ctx.store.clickSelectedOption();\n        } else if (targetType === 'button') {\n          event.preventDefault();\n          ctx.store.openDropdown('keyboard');\n        }\n      }\n\n      if (event.key === 'Escape') {\n        ctx.store.closeDropdown('keyboard');\n      }\n\n      if (event.nativeEvent.code === 'Space') {\n        if (targetType === 'button') {\n          event.preventDefault();\n          ctx.store.toggleDropdown('keyboard');\n        }\n      }\n    }\n  };\n\n  const ariaAttributes = withAriaAttributes\n    ? {\n        'aria-haspopup': 'listbox',\n        'aria-expanded':\n          (withExpandedAttribute && !!(ctx.store.listId && ctx.store.dropdownOpened)) || undefined,\n        'aria-controls': ctx.store.dropdownOpened ? ctx.store.listId : undefined,\n        'aria-activedescendant': ctx.store.dropdownOpened\n          ? selectedOptionId || undefined\n          : undefined,\n        autoComplete,\n        'data-expanded': ctx.store.dropdownOpened || undefined,\n        'data-mantine-stop-propagation': ctx.store.dropdownOpened || undefined,\n      }\n    : {};\n\n  return {\n    ...ariaAttributes,\n    onKeyDown: handleKeyDown,\n  };\n}\n","import { cloneElement } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { factory, Factory, getRefProp, isElement, useProps } from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\nimport { useComboboxTargetProps } from '../use-combobox-target-props/use-combobox-target-props';\n\nexport interface ComboboxEventsTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to access element ref */\n  refProp?: string;\n\n  /** Determines whether component should respond to keyboard events, `true` by default */\n  withKeyboardNavigation?: boolean;\n\n  /** Determines whether the target should have `aria-` attributes, `true` by default */\n  withAriaAttributes?: boolean;\n\n  /** Determines whether the target should have `aria-expanded` attribute, `false` by default */\n  withExpandedAttribute?: boolean;\n\n  /** Determines which events should be handled by the target element.\n   * `button` target type handles `Space` and `Enter` keys to toggle dropdown opened state.\n   * `input` by default.\n   * */\n  targetType?: 'button' | 'input';\n\n  /** Input autocomplete attribute */\n  autoComplete?: string;\n}\n\nconst defaultProps: Partial<ComboboxEventsTargetProps> = {\n  refProp: 'ref',\n  targetType: 'input',\n  withKeyboardNavigation: true,\n  withAriaAttributes: true,\n  withExpandedAttribute: false,\n  autoComplete: 'off',\n};\n\nexport type ComboboxEventsTargetFactory = Factory<{\n  props: ComboboxEventsTargetProps;\n  ref: HTMLElement;\n  compound: true;\n}>;\n\nexport const ComboboxEventsTarget = factory<ComboboxEventsTargetFactory>((props, ref) => {\n  const {\n    children,\n    refProp,\n    withKeyboardNavigation,\n    withAriaAttributes,\n    withExpandedAttribute,\n    targetType,\n    autoComplete,\n    ...others\n  } = useProps('ComboboxEventsTarget', defaultProps, props);\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Combobox.EventsTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  const ctx = useComboboxContext();\n  const targetProps = useComboboxTargetProps({\n    targetType,\n    withAriaAttributes,\n    withKeyboardNavigation,\n    withExpandedAttribute,\n    onKeyDown: (children.props as any).onKeyDown,\n    autoComplete,\n  });\n\n  return cloneElement(children, {\n    ...targetProps,\n    ...others,\n    [refProp!]: useMergedRef(ref, ctx.store.targetRef, getRefProp(children)),\n  });\n});\n\nComboboxEventsTarget.displayName = '@mantine/core/ComboboxEventsTarget';\n","import {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  useProps,\n} from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxFooterStylesNames = 'footer';\n\nexport interface ComboboxFooterProps\n  extends BoxProps,\n    CompoundStylesApiProps<ComboboxFooterFactory>,\n    ElementProps<'div'> {}\n\nexport type ComboboxFooterFactory = Factory<{\n  props: ComboboxFooterProps;\n  ref: HTMLDivElement;\n  stylesNames: ComboboxFooterStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ComboboxFooterProps> = {};\n\nexport const ComboboxFooter = factory<ComboboxFooterFactory>((props, ref) => {\n  const { classNames, className, style, styles, vars, ...others } = useProps(\n    'ComboboxFooter',\n    defaultProps,\n    props\n  );\n\n  const ctx = useComboboxContext();\n\n  return (\n    <Box\n      ref={ref}\n      {...ctx.getStyles('footer', { className, classNames, style, styles })}\n      {...others}\n      onMouseDown={(event) => {\n        event.preventDefault();\n      }}\n    />\n  );\n});\n\nComboboxFooter.classes = classes;\nComboboxFooter.displayName = '@mantine/core/ComboboxFooter';\n","import {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  useProps,\n} from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxGroupStylesNames = 'group' | 'groupLabel';\n\nexport interface ComboboxGroupProps\n  extends BoxProps,\n    CompoundStylesApiProps<ComboboxGroupFactory>,\n    ElementProps<'div'> {\n  /** Group label */\n  label?: React.ReactNode;\n}\n\nexport type ComboboxGroupFactory = Factory<{\n  props: ComboboxGroupProps;\n  ref: HTMLDivElement;\n  stylesNames: ComboboxGroupStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ComboboxGroupProps> = {};\n\nexport const ComboboxGroup = factory<ComboboxGroupFactory>((props, ref) => {\n  const { classNames, className, style, styles, vars, children, label, ...others } = useProps(\n    'ComboboxGroup',\n    defaultProps,\n    props\n  );\n\n  const ctx = useComboboxContext();\n\n  return (\n    <Box\n      ref={ref}\n      {...ctx.getStyles('group', { className, classNames, style, styles })}\n      {...others}\n    >\n      {label && <div {...ctx.getStyles('groupLabel', { classNames, styles })}>{label}</div>}\n      {children}\n    </Box>\n  );\n});\n\nComboboxGroup.classes = classes;\nComboboxGroup.displayName = '@mantine/core/ComboboxGroup';\n","import {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  useProps,\n} from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxHeaderStylesNames = 'header';\n\nexport interface ComboboxHeaderProps\n  extends BoxProps,\n    CompoundStylesApiProps<ComboboxHeaderFactory>,\n    ElementProps<'div'> {}\n\nexport type ComboboxHeaderFactory = Factory<{\n  props: ComboboxHeaderProps;\n  ref: HTMLDivElement;\n  stylesNames: ComboboxHeaderStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ComboboxHeaderProps> = {};\n\nexport const ComboboxHeader = factory<ComboboxHeaderFactory>((props, ref) => {\n  const { classNames, className, style, styles, vars, ...others } = useProps(\n    'ComboboxHeader',\n    defaultProps,\n    props\n  );\n\n  const ctx = useComboboxContext();\n\n  return (\n    <Box\n      ref={ref}\n      {...ctx.getStyles('header', { className, classNames, style, styles })}\n      {...others}\n      onMouseDown={(event) => {\n        event.preventDefault();\n      }}\n    />\n  );\n});\n\nComboboxHeader.classes = classes;\nComboboxHeader.displayName = '@mantine/core/ComboboxHeader';\n","export interface ComboboxHiddenInputProps\n  extends Omit<React.ComponentPropsWithoutRef<'input'>, 'value'> {\n  /** Input value */\n  value: string | string[] | null;\n\n  /** Divider character that is used to transform array values to string, `','` by default */\n  valuesDivider?: string;\n}\n\nexport function ComboboxHiddenInput({\n  value,\n  valuesDivider = ',',\n  ...others\n}: ComboboxHiddenInputProps) {\n  return (\n    <input\n      type=\"hidden\"\n      value={Array.isArray(value) ? value.join(valuesDivider) : value || ''}\n      {...others}\n    />\n  );\n}\n\nComboboxHiddenInput.displayName = '@mantine/core/ComboboxHiddenInput';\n","import { useId } from 'react';\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  useProps,\n} from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxOptionStylesNames = 'option';\n\nexport interface ComboboxOptionProps\n  extends BoxProps,\n    CompoundStylesApiProps<ComboboxOptionFactory>,\n    ElementProps<'div'> {\n  /** Option value */\n  value: string;\n\n  /** Determines whether the option is selected */\n  active?: boolean;\n\n  /** Determines whether the option can be selected */\n  disabled?: boolean;\n\n  /** Determines whether item is selected, useful for virtualized comboboxes */\n  selected?: boolean;\n}\n\nexport type ComboboxOptionFactory = Factory<{\n  props: ComboboxOptionProps;\n  ref: HTMLDivElement;\n  stylesNames: ComboboxOptionStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ComboboxOptionProps> = {};\n\nexport const ComboboxOption = factory<ComboboxOptionFactory>((_props, ref) => {\n  const props = useProps('ComboboxOption', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    vars,\n    onClick,\n    id,\n    active,\n    onMouseDown,\n    onMouseOver,\n    disabled,\n    selected,\n    mod,\n    ...others\n  } = props;\n\n  const ctx = useComboboxContext();\n  const uuid = useId();\n  const _id = id || uuid;\n\n  return (\n    <Box\n      {...ctx.getStyles('option', { className, classNames, styles, style })}\n      {...others}\n      ref={ref}\n      id={_id}\n      mod={[\n        'combobox-option',\n        { 'combobox-active': active, 'combobox-disabled': disabled, 'combobox-selected': selected },\n        mod,\n      ]}\n      role=\"option\"\n      onClick={(event) => {\n        if (!disabled) {\n          ctx.onOptionSubmit?.(props.value, props);\n          onClick?.(event);\n        } else {\n          event.preventDefault();\n        }\n      }}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        onMouseDown?.(event);\n      }}\n      onMouseOver={(event) => {\n        if (ctx.resetSelectionOnOptionHover) {\n          ctx.store.resetSelectedOption();\n        }\n        onMouseOver?.(event);\n      }}\n    />\n  );\n});\n\nComboboxOption.classes = classes;\nComboboxOption.displayName = '@mantine/core/ComboboxOption';\n","import { useEffect } from 'react';\nimport { useId } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  useProps,\n} from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxOptionsStylesNames = 'options';\n\nexport interface ComboboxOptionsProps\n  extends BoxProps,\n    CompoundStylesApiProps<ComboboxOptionsFactory>,\n    ElementProps<'div'> {\n  /** Id of the element that should label the options list */\n  labelledBy?: string;\n}\n\nexport type ComboboxOptionsFactory = Factory<{\n  props: ComboboxOptionsProps;\n  ref: HTMLDivElement;\n  stylesNames: ComboboxOptionsStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ComboboxOptionsProps> = {};\n\nexport const ComboboxOptions = factory<ComboboxOptionsFactory>((_props, ref) => {\n  const props = useProps('ComboboxOptions', defaultProps, _props);\n  const { classNames, className, style, styles, id, onMouseDown, labelledBy, ...others } = props;\n  const ctx = useComboboxContext();\n  const _id = useId(id);\n\n  useEffect(() => {\n    ctx.store.setListId(_id);\n  }, [_id]);\n\n  return (\n    <Box\n      ref={ref}\n      {...ctx.getStyles('options', { className, style, classNames, styles })}\n      {...others}\n      id={_id}\n      role=\"listbox\"\n      aria-labelledby={labelledBy}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        onMouseDown?.(event);\n      }}\n    />\n  );\n});\n\nComboboxOptions.classes = classes;\nComboboxOptions.displayName = '@mantine/core/ComboboxOptions';\n","import { useMergedRef } from '@mantine/hooks';\nimport { ElementProps, factory, Factory, useProps } from '../../../core';\nimport { Input, InputProps, InputStylesNames } from '../../Input/Input';\nimport { useComboboxContext } from '../Combobox.context';\nimport { useComboboxTargetProps } from '../use-combobox-target-props/use-combobox-target-props';\nimport classes from '../Combobox.module.css';\n\nexport type ComboboxSearchStylesNames = InputStylesNames;\n\nexport interface ComboboxSearchProps extends InputProps, ElementProps<'input', 'size'> {\n  /** Determines whether the search input should have `aria-` attribute, `true` by default */\n  withAriaAttributes?: boolean;\n\n  /** Determines whether the search input should handle keyboard navigation, `true` by default */\n  withKeyboardNavigation?: boolean;\n}\n\nexport type ComboboxSearchFactory = Factory<{\n  props: ComboboxSearchProps;\n  ref: HTMLInputElement;\n  stylesNames: ComboboxSearchStylesNames;\n}>;\n\nconst defaultProps: Partial<ComboboxSearchProps> = {\n  withAriaAttributes: true,\n  withKeyboardNavigation: true,\n};\n\nexport const ComboboxSearch = factory<ComboboxSearchFactory>((_props, ref) => {\n  const props = useProps('ComboboxSearch', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    withAriaAttributes,\n    onKeyDown,\n    withKeyboardNavigation,\n    size,\n    ...others\n  } = props;\n\n  const ctx = useComboboxContext();\n  const _styles = ctx.getStyles('search');\n\n  const targetProps = useComboboxTargetProps({\n    targetType: 'input',\n    withAriaAttributes,\n    withKeyboardNavigation,\n    withExpandedAttribute: false,\n    onKeyDown,\n    autoComplete: 'off',\n  });\n\n  return (\n    <Input\n      ref={useMergedRef(ref, ctx.store.searchRef)}\n      classNames={[{ input: _styles.className }, classNames] as any}\n      styles={[{ input: _styles.style }, styles] as any}\n      size={size || ctx.size}\n      {...targetProps}\n      {...others}\n      __staticSelector=\"Combobox\"\n    />\n  );\n});\n\nComboboxSearch.classes = classes;\nComboboxSearch.displayName = '@mantine/core/ComboboxSearch';\n","import { cloneElement } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { factory, Factory, isElement, useProps } from '../../../core';\nimport { Popover } from '../../Popover';\nimport { useComboboxContext } from '../Combobox.context';\nimport { useComboboxTargetProps } from '../use-combobox-target-props/use-combobox-target-props';\n\nexport interface ComboboxTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to access element ref */\n  refProp?: string;\n\n  /** Determines whether component should respond to keyboard events, `true` by default */\n  withKeyboardNavigation?: boolean;\n\n  /** Determines whether the target should have `aria-` attributes, `true` by default */\n  withAriaAttributes?: boolean;\n\n  /** Determines whether the target should have `aria-expanded` attribute, `false` by default */\n  withExpandedAttribute?: boolean;\n\n  /** Determines which events should be handled by the target element.\n   * `button` target type handles `Space` and `Enter` keys to toggle dropdown opened state.\n   * `input` by default.\n   * */\n  targetType?: 'button' | 'input';\n\n  /** Input autocomplete attribute */\n  autoComplete?: string;\n}\n\nconst defaultProps: Partial<ComboboxTargetProps> = {\n  refProp: 'ref',\n  targetType: 'input',\n  withKeyboardNavigation: true,\n  withAriaAttributes: true,\n  withExpandedAttribute: false,\n  autoComplete: 'off',\n};\n\nexport type ComboboxTargetFactory = Factory<{\n  props: ComboboxTargetProps;\n  ref: HTMLElement;\n  compound: true;\n}>;\n\nexport const ComboboxTarget = factory<ComboboxTargetFactory>((props, ref) => {\n  const {\n    children,\n    refProp,\n    withKeyboardNavigation,\n    withAriaAttributes,\n    withExpandedAttribute,\n    targetType,\n    autoComplete,\n    ...others\n  } = useProps('ComboboxTarget', defaultProps, props);\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Combobox.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  const ctx = useComboboxContext();\n\n  const targetProps = useComboboxTargetProps({\n    targetType,\n    withAriaAttributes,\n    withKeyboardNavigation,\n    withExpandedAttribute,\n    onKeyDown: (children.props as any).onKeyDown,\n    autoComplete,\n  });\n\n  const clonedElement = cloneElement(children, {\n    ...targetProps,\n    ...others,\n  });\n\n  return (\n    <Popover.Target ref={useMergedRef(ref, ctx.store.targetRef)}>{clonedElement}</Popover.Target>\n  );\n});\n\nComboboxTarget.displayName = '@mantine/core/ComboboxTarget';\n","import { useCallback, useEffect, useRef } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { getFirstIndex, getNextIndex, getPreviousIndex } from './get-index/get-index';\n\nexport type ComboboxDropdownEventSource = 'keyboard' | 'mouse' | 'unknown';\n\nexport interface ComboboxStore {\n  /** Current dropdown opened state */\n  dropdownOpened: boolean;\n\n  /** Opens dropdown */\n  openDropdown: (eventSource?: ComboboxDropdownEventSource) => void;\n\n  /** Closes dropdown */\n  closeDropdown: (eventSource?: ComboboxDropdownEventSource) => void;\n\n  /** Toggles dropdown opened state */\n  toggleDropdown: (eventSource?: ComboboxDropdownEventSource) => void;\n\n  /** Selected option index ref */\n  selectedOptionIndex: number;\n\n  /** Returns currently selected option index or `-1` if none of the options is selected */\n  getSelectedOptionIndex: () => number;\n\n  /** Selects `Combobox.Option` by index */\n  selectOption: (index: number) => void;\n\n  /** Selects first `Combobox.Option` with `active` prop.\n   *  If there are no such options, the function does nothing.\n   */\n  selectActiveOption: () => string | null;\n\n  /** Selects first `Combobox.Option` that is not disabled.\n   *  If there are no such options, the function does nothing.\n   * */\n  selectFirstOption: () => string | null;\n\n  /** Selects next `Combobox.Option` that is not disabled.\n   *  If the current option is the last one, the function selects first option, if `loop` is true.\n   */\n  selectNextOption: () => string | null;\n\n  /** Selects previous `Combobox.Option` that is not disabled.\n   *  If the current option is the first one, the function selects last option, if `loop` is true.\n   * */\n  selectPreviousOption: () => string | null;\n\n  /** Resets selected option index to -1, removes `data-combobox-selected` from selected option */\n  resetSelectedOption: () => void;\n\n  /** Triggers `onClick` event of selected option.\n   *  If there is no selected option, the function does nothing.\n   */\n  clickSelectedOption: () => void;\n\n  /** Updates selected option index to currently selected or active option.\n   *  The function is required to be used with searchable components to update selected option index\n   *  when options list changes based on search query.\n   */\n  updateSelectedOptionIndex: (\n    target?: 'active' | 'selected',\n    options?: { scrollIntoView?: boolean }\n  ) => void;\n\n  /** List id, used for `aria-*` attributes */\n  listId: string | null;\n\n  /** Sets list id */\n  setListId: (id: string) => void;\n\n  /** Ref of `Combobox.Search` input */\n  searchRef: React.MutableRefObject<HTMLInputElement | null>;\n\n  /** Moves focus to `Combobox.Search` input */\n  focusSearchInput: () => void;\n\n  /** Ref of the target element */\n  targetRef: React.MutableRefObject<HTMLElement | null>;\n\n  /** Moves focus to the target element */\n  focusTarget: () => void;\n}\n\nexport interface UseComboboxOptions {\n  /** Default value for `dropdownOpened`, `false` by default */\n  defaultOpened?: boolean;\n\n  /** Controlled `dropdownOpened` state */\n  opened?: boolean;\n\n  /** Called when `dropdownOpened` state changes */\n  onOpenedChange?: (opened: boolean) => void;\n\n  /** Called when dropdown closes with event source: keyboard, mouse or unknown */\n  onDropdownClose?: (eventSource: ComboboxDropdownEventSource) => void;\n\n  /** Called when dropdown opens with event source: keyboard, mouse or unknown */\n  onDropdownOpen?: (eventSource: ComboboxDropdownEventSource) => void;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first), `true` by default */\n  loop?: boolean;\n\n  /** `behavior` passed down to `element.scrollIntoView`, `'instant'` by default */\n  scrollBehavior?: ScrollBehavior;\n}\n\nexport function useCombobox({\n  defaultOpened,\n  opened,\n  onOpenedChange,\n  onDropdownClose,\n  onDropdownOpen,\n  loop = true,\n  scrollBehavior = 'instant',\n}: UseComboboxOptions = {}): ComboboxStore {\n  const [dropdownOpened, setDropdownOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange: onOpenedChange,\n  });\n\n  const listId = useRef<string | null>(null);\n  const selectedOptionIndex = useRef<number>(-1);\n  const searchRef = useRef<HTMLInputElement | null>(null);\n  const targetRef = useRef<HTMLElement | null>(null);\n  const focusSearchTimeout = useRef<number>(-1);\n  const focusTargetTimeout = useRef<number>(-1);\n  const selectedIndexUpdateTimeout = useRef<number>(-1);\n\n  const openDropdown: ComboboxStore['openDropdown'] = useCallback(\n    (eventSource = 'unknown') => {\n      if (!dropdownOpened) {\n        setDropdownOpened(true);\n        onDropdownOpen?.(eventSource);\n      }\n    },\n    [setDropdownOpened, onDropdownOpen, dropdownOpened]\n  );\n\n  const closeDropdown: ComboboxStore['closeDropdown'] = useCallback(\n    (eventSource = 'unknown') => {\n      if (dropdownOpened) {\n        setDropdownOpened(false);\n        onDropdownClose?.(eventSource);\n      }\n    },\n    [setDropdownOpened, onDropdownClose, dropdownOpened]\n  );\n\n  const toggleDropdown: ComboboxStore['toggleDropdown'] = useCallback(\n    (eventSource = 'unknown') => {\n      if (dropdownOpened) {\n        closeDropdown(eventSource);\n      } else {\n        openDropdown(eventSource);\n      }\n    },\n    [closeDropdown, openDropdown, dropdownOpened]\n  );\n\n  const clearSelectedItem = useCallback(() => {\n    const selected = document.querySelector(`#${listId.current} [data-combobox-selected]`);\n    selected?.removeAttribute('data-combobox-selected');\n    selected?.removeAttribute('aria-selected');\n  }, []);\n\n  const selectOption = useCallback(\n    (index: number) => {\n      const list = document.getElementById(listId.current!);\n      const items = list?.querySelectorAll('[data-combobox-option]');\n\n      if (!items) {\n        return null;\n      }\n\n      const nextIndex = index >= items!.length ? 0 : index < 0 ? items!.length - 1 : index;\n      selectedOptionIndex.current = nextIndex;\n\n      if (items?.[nextIndex] && !items[nextIndex].hasAttribute('data-combobox-disabled')) {\n        clearSelectedItem();\n        items[nextIndex].setAttribute('data-combobox-selected', 'true');\n        items[nextIndex].setAttribute('aria-selected', 'true');\n        items[nextIndex].scrollIntoView({ block: 'nearest', behavior: scrollBehavior });\n        return items[nextIndex].id;\n      }\n\n      return null;\n    },\n    [scrollBehavior, clearSelectedItem]\n  );\n\n  const selectActiveOption = useCallback(() => {\n    const activeOption = document.querySelector<HTMLDivElement>(\n      `#${listId.current} [data-combobox-active]`\n    );\n\n    if (activeOption) {\n      const items = document.querySelectorAll<HTMLDivElement>(\n        `#${listId.current} [data-combobox-option]`\n      );\n      const index = Array.from(items).findIndex((option) => option === activeOption);\n      return selectOption(index);\n    }\n\n    return selectOption(0);\n  }, [selectOption]);\n\n  const selectNextOption = useCallback(\n    () =>\n      selectOption(\n        getNextIndex(\n          selectedOptionIndex.current,\n          document.querySelectorAll<HTMLDivElement>(`#${listId.current} [data-combobox-option]`),\n          loop\n        )\n      ),\n    [selectOption, loop]\n  );\n\n  const selectPreviousOption = useCallback(\n    () =>\n      selectOption(\n        getPreviousIndex(\n          selectedOptionIndex.current,\n          document.querySelectorAll<HTMLDivElement>(`#${listId.current} [data-combobox-option]`),\n          loop\n        )\n      ),\n    [selectOption, loop]\n  );\n\n  const selectFirstOption = useCallback(\n    () =>\n      selectOption(\n        getFirstIndex(\n          document.querySelectorAll<HTMLDivElement>(`#${listId.current} [data-combobox-option]`)\n        )\n      ),\n    [selectOption]\n  );\n\n  const updateSelectedOptionIndex = useCallback(\n    (target: 'active' | 'selected' = 'selected', options?: { scrollIntoView?: boolean }) => {\n      selectedIndexUpdateTimeout.current = window.setTimeout(() => {\n        const items = document.querySelectorAll<HTMLDivElement>(\n          `#${listId.current} [data-combobox-option]`\n        );\n        const index = Array.from(items).findIndex((option) =>\n          option.hasAttribute(`data-combobox-${target}`)\n        );\n\n        selectedOptionIndex.current = index;\n\n        if (options?.scrollIntoView) {\n          items[index]?.scrollIntoView({ block: 'nearest', behavior: scrollBehavior });\n        }\n      }, 0);\n    },\n    []\n  );\n\n  const resetSelectedOption = useCallback(() => {\n    selectedOptionIndex.current = -1;\n    clearSelectedItem();\n  }, [clearSelectedItem]);\n\n  const clickSelectedOption = useCallback(() => {\n    const items = document.querySelectorAll<HTMLDivElement>(\n      `#${listId.current} [data-combobox-option]`\n    );\n    const item = items?.[selectedOptionIndex.current];\n    item?.click();\n  }, []);\n\n  const setListId = useCallback((id: string) => {\n    listId.current = id;\n  }, []);\n\n  const focusSearchInput = useCallback(() => {\n    focusSearchTimeout.current = window.setTimeout(() => searchRef.current!.focus(), 0);\n  }, []);\n\n  const focusTarget = useCallback(() => {\n    focusTargetTimeout.current = window.setTimeout(() => targetRef.current!.focus(), 0);\n  }, []);\n\n  const getSelectedOptionIndex = useCallback(() => selectedOptionIndex.current, []);\n\n  useEffect(\n    () => () => {\n      window.clearTimeout(focusSearchTimeout.current);\n      window.clearTimeout(focusTargetTimeout.current);\n      window.clearTimeout(selectedIndexUpdateTimeout.current);\n    },\n    []\n  );\n\n  return {\n    dropdownOpened,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n\n    selectedOptionIndex: selectedOptionIndex.current,\n    getSelectedOptionIndex,\n    selectOption,\n    selectFirstOption,\n    selectActiveOption,\n    selectNextOption,\n    selectPreviousOption,\n    resetSelectedOption,\n    updateSelectedOptionIndex,\n\n    listId: listId.current,\n    setListId,\n    clickSelectedOption,\n\n    searchRef,\n    focusSearchInput,\n\n    targetRef,\n    focusTarget,\n  };\n}\n","export function getPreviousIndex(\n  currentIndex: number,\n  elements: NodeListOf<HTMLDivElement> | HTMLDivElement[],\n  loop: boolean\n) {\n  for (let i = currentIndex - 1; i >= 0; i -= 1) {\n    if (!elements[i].hasAttribute('data-combobox-disabled')) {\n      return i;\n    }\n  }\n\n  if (loop) {\n    for (let i = elements.length - 1; i > -1; i -= 1) {\n      if (!elements[i].hasAttribute('data-combobox-disabled')) {\n        return i;\n      }\n    }\n  }\n\n  return currentIndex;\n}\n\nexport function getNextIndex(\n  currentIndex: number,\n  elements: NodeListOf<HTMLDivElement> | HTMLDivElement[],\n  loop: boolean\n) {\n  for (let i = currentIndex + 1; i < elements.length; i += 1) {\n    if (!elements[i].hasAttribute('data-combobox-disabled')) {\n      return i;\n    }\n  }\n\n  if (loop) {\n    for (let i = 0; i < elements.length; i += 1) {\n      if (!elements[i].hasAttribute('data-combobox-disabled')) {\n        return i;\n      }\n    }\n  }\n\n  return currentIndex;\n}\n\nexport function getFirstIndex(elements: NodeListOf<HTMLDivElement> | HTMLDivElement[]) {\n  for (let i = 0; i < elements.length; i += 1) {\n    if (!elements[i].hasAttribute('data-combobox-disabled')) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n","import {\n  createVarsResolver,\n  ExtendComponent,\n  Factory,\n  getFontSize,\n  getSize,\n  MantineSize,\n  MantineThemeComponent,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { __PopoverProps, Popover } from '../Popover';\nimport { ComboboxProvider } from './Combobox.context';\nimport { ComboboxChevron } from './ComboboxChevron/ComboboxChevron';\nimport { ComboboxClearButton } from './ComboboxClearButton/ComboboxClearButton';\nimport { ComboboxDropdown } from './ComboboxDropdown/ComboboxDropdown';\nimport { ComboboxDropdownTarget } from './ComboboxDropdownTarget/ComboboxDropdownTarget';\nimport { ComboboxEmpty } from './ComboboxEmpty/ComboboxEmpty';\nimport { ComboboxEventsTarget } from './ComboboxEventsTarget/ComboboxEventsTarget';\nimport { ComboboxFooter } from './ComboboxFooter/ComboboxFooter';\nimport { ComboboxGroup } from './ComboboxGroup/ComboboxGroup';\nimport { ComboboxHeader } from './ComboboxHeader/ComboboxHeader';\nimport { ComboboxHiddenInput } from './ComboboxHiddenInput/ComboboxHiddenInput';\nimport { ComboboxOption, ComboboxOptionProps } from './ComboboxOption/ComboboxOption';\nimport { ComboboxOptions } from './ComboboxOptions/ComboboxOptions';\nimport { ComboboxSearch } from './ComboboxSearch/ComboboxSearch';\nimport { ComboboxTarget } from './ComboboxTarget/ComboboxTarget';\nimport { ComboboxStore, useCombobox } from './use-combobox/use-combobox';\nimport classes from './Combobox.module.css';\n\nexport type ComboboxStylesNames =\n  | 'options'\n  | 'dropdown'\n  | 'option'\n  | 'search'\n  | 'empty'\n  | 'footer'\n  | 'header'\n  | 'group'\n  | 'groupLabel';\n\nexport type ComboboxCSSVariables = {\n  options: '--combobox-option-fz' | '--combobox-option-padding';\n  dropdown: '--combobox-padding' | '--combobox-option-fz' | '--combobox-option-padding';\n};\n\nexport interface ComboboxProps extends __PopoverProps, StylesApiProps<ComboboxFactory> {\n  __staticSelector?: string;\n\n  /** Combobox content */\n  children?: React.ReactNode;\n\n  /** Combobox store, can be used to control combobox state */\n  store?: ComboboxStore;\n\n  /** Called when item is selected with `Enter` key or by clicking it */\n  onOptionSubmit?: (value: string, optionProps: ComboboxOptionProps) => void;\n\n  /** Controls items `font-size` and `padding`, `'sm'` by default */\n  size?: MantineSize | (string & {});\n\n  /** Controls `padding` of the dropdown, `4` by default */\n  dropdownPadding?: React.CSSProperties['padding'];\n\n  /** Determines whether selection should be reset when option is hovered, `false` by default */\n  resetSelectionOnOptionHover?: boolean;\n\n  /** Determines whether Combobox value can be changed */\n  readOnly?: boolean;\n}\n\nexport type ComboboxFactory = Factory<{\n  props: ComboboxProps;\n  ref: HTMLDivElement;\n  stylesNames: ComboboxStylesNames;\n  vars: ComboboxCSSVariables;\n  staticComponents: {\n    Target: typeof ComboboxTarget;\n    Dropdown: typeof ComboboxDropdown;\n    Options: typeof ComboboxOptions;\n    Option: typeof ComboboxOption;\n    Search: typeof ComboboxSearch;\n    Empty: typeof ComboboxEmpty;\n    Chevron: typeof ComboboxChevron;\n    Footer: typeof ComboboxFooter;\n    Header: typeof ComboboxHeader;\n    EventsTarget: typeof ComboboxEventsTarget;\n    DropdownTarget: typeof ComboboxDropdownTarget;\n    Group: typeof ComboboxGroup;\n    ClearButton: typeof ComboboxClearButton;\n    HiddenInput: typeof ComboboxHiddenInput;\n  };\n}>;\n\nconst defaultProps: Partial<ComboboxProps> = {\n  keepMounted: true,\n  withinPortal: true,\n  resetSelectionOnOptionHover: false,\n  width: 'target',\n  transitionProps: { transition: 'fade', duration: 0 },\n};\n\nconst varsResolver = createVarsResolver<ComboboxFactory>((_, { size, dropdownPadding }) => ({\n  options: {\n    '--combobox-option-fz': getFontSize(size),\n    '--combobox-option-padding': getSize(size, 'combobox-option-padding'),\n  },\n\n  dropdown: {\n    '--combobox-padding': dropdownPadding === undefined ? undefined : rem(dropdownPadding),\n    '--combobox-option-fz': getFontSize(size),\n    '--combobox-option-padding': getSize(size, 'combobox-option-padding'),\n  },\n}));\n\nexport function Combobox(_props: ComboboxProps) {\n  const props = useProps('Combobox', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    unstyled,\n    children,\n    store: controlledStore,\n    vars,\n    onOptionSubmit,\n    onClose,\n    size,\n    dropdownPadding,\n    resetSelectionOnOptionHover,\n    __staticSelector,\n    readOnly,\n    ...others\n  } = props;\n\n  const uncontrolledStore = useCombobox();\n  const store = controlledStore || uncontrolledStore;\n\n  const getStyles = useStyles<ComboboxFactory>({\n    name: __staticSelector || 'Combobox',\n    classes,\n    props,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const onDropdownClose = () => {\n    onClose?.();\n    store.closeDropdown();\n  };\n\n  return (\n    <ComboboxProvider\n      value={{\n        getStyles,\n        store,\n        onOptionSubmit,\n        size: size!,\n        resetSelectionOnOptionHover,\n        readOnly,\n      }}\n    >\n      <Popover\n        opened={store.dropdownOpened}\n        {...others}\n        onChange={(_opened) => !_opened && onDropdownClose()}\n        withRoles={false}\n        unstyled={unstyled}\n      >\n        {children}\n      </Popover>\n    </ComboboxProvider>\n  );\n}\n\nconst extendCombobox = (c: ExtendComponent<ComboboxFactory>): MantineThemeComponent => c;\n\nCombobox.extend = extendCombobox;\nCombobox.classes = classes;\nCombobox.displayName = '@mantine/core/Combobox';\nCombobox.Target = ComboboxTarget;\nCombobox.Dropdown = ComboboxDropdown;\nCombobox.Options = ComboboxOptions;\nCombobox.Option = ComboboxOption;\nCombobox.Search = ComboboxSearch;\nCombobox.Empty = ComboboxEmpty;\nCombobox.Chevron = ComboboxChevron;\nCombobox.Footer = ComboboxFooter;\nCombobox.Header = ComboboxHeader;\nCombobox.EventsTarget = ComboboxEventsTarget;\nCombobox.DropdownTarget = ComboboxDropdownTarget;\nCombobox.Group = ComboboxGroup;\nCombobox.ClearButton = ComboboxClearButton;\nCombobox.HiddenInput = ComboboxHiddenInput;\n","import { rem } from '../../core';\n\nexport interface CheckboxIconProps extends React.ComponentPropsWithoutRef<'svg'> {\n  indeterminate: boolean | undefined;\n}\n\nexport interface CheckIconProps extends React.ComponentPropsWithoutRef<'svg'> {\n  size?: number | string;\n}\n\nexport function CheckIcon({ size, style, ...others }: CheckIconProps) {\n  const _style = size !== undefined ? { width: rem(size), height: rem(size), ...style } : style;\n\n  return (\n    <svg\n      viewBox=\"0 0 10 7\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={_style}\n      aria-hidden\n      {...others}\n    >\n      <path\n        d=\"M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n\nexport function CheckboxIcon({ indeterminate, ...others }: CheckboxIconProps) {\n  if (indeterminate) {\n    return (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        viewBox=\"0 0 32 6\"\n        aria-hidden\n        {...others}\n      >\n        <rect width=\"32\" height=\"6\" fill=\"currentColor\" rx=\"3\" />\n      </svg>\n    );\n  }\n\n  return <CheckIcon {...others} />;\n}\n","import { createSafeContext } from '../../core';\n\nexport interface ScrollAreaContextValue {\n  type: 'auto' | 'always' | 'scroll' | 'hover' | 'never';\n  scrollHideDelay: number;\n  scrollArea: HTMLDivElement | null;\n  viewport: HTMLDivElement | null;\n  onViewportChange: (viewport: HTMLDivElement | null) => void;\n  content: HTMLDivElement | null;\n  onContentChange: (content: HTMLDivElement) => void;\n  scrollbarX: HTMLDivElement | null;\n  onScrollbarXChange: (scrollbar: HTMLDivElement | null) => void;\n  scrollbarXEnabled: boolean;\n  onScrollbarXEnabledChange: (rendered: boolean) => void;\n  scrollbarY: HTMLDivElement | null;\n  onScrollbarYChange: (scrollbar: HTMLDivElement | null) => void;\n  scrollbarYEnabled: boolean;\n  onScrollbarYEnabledChange: (rendered: boolean) => void;\n  onCornerWidthChange: (width: number) => void;\n  onCornerHeightChange: (height: number) => void;\n}\n\nexport const [ScrollAreaProvider, useScrollAreaContext] = createSafeContext<ScrollAreaContextValue>(\n  'ScrollArea.Root component was not found in tree'\n);\n","import { useEffect, useMemo, useRef } from 'react';\n\nexport function useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  return useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n","import { useCallbackRef, useIsomorphicEffect } from '@mantine/hooks';\n\nexport function useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n\n  useIsomorphicEffect(() => {\n    let rAF = 0;\n    if (element) {\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n\n      resizeObserver.observe(element);\n\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n\n    return undefined;\n  }, [element, handleResize]);\n}\n","import { forwardRef, useState } from 'react';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { useResizeObserver } from '../use-resize-observer';\n\ninterface ScrollAreaCornerProps extends React.ComponentPropsWithoutRef<'div'> {}\n\nexport const Corner = forwardRef<HTMLDivElement, ScrollAreaCornerProps>((props, ref) => {\n  const { style, ...others } = props;\n  const ctx = useScrollAreaContext();\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const hasSize = Boolean(width && height);\n\n  useResizeObserver(ctx.scrollbarX, () => {\n    const h = ctx.scrollbarX?.offsetHeight || 0;\n    ctx.onCornerHeightChange(h);\n    setHeight(h);\n  });\n\n  useResizeObserver(ctx.scrollbarY, () => {\n    const w = ctx.scrollbarY?.offsetWidth || 0;\n    ctx.onCornerWidthChange(w);\n    setWidth(w);\n  });\n\n  return hasSize ? <div {...others} ref={ref} style={{ ...style, width, height }} /> : null;\n});\n\nexport const ScrollAreaCorner = forwardRef<HTMLDivElement, ScrollAreaCornerProps>((props, ref) => {\n  const ctx = useScrollAreaContext();\n  const hasBothScrollbarsVisible = Boolean(ctx.scrollbarX && ctx.scrollbarY);\n  const hasCorner = ctx.type !== 'scroll' && hasBothScrollbarsVisible;\n  return hasCorner ? <Corner {...props} ref={ref} /> : null;\n});\n","import { forwardRef, useState } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { Box, BoxProps, ElementProps, Factory, useProps } from '../../../core';\nimport { ScrollAreaProvider } from '../ScrollArea.context';\n\nexport type ScrollAreaRootStylesNames =\n  | 'root'\n  | 'viewport'\n  | 'viewportInner'\n  | 'scrollbar'\n  | 'thumb'\n  | 'corner';\n\nexport type ScrollAreaRootCssVariables = {\n  root: '--sa-corner-width' | '--sa-corner-height';\n};\n\nexport interface ScrollAreaRootStylesCtx {\n  cornerWidth: number;\n  cornerHeight: number;\n}\n\nexport interface ScrollAreaRootProps extends BoxProps, ElementProps<'div'> {\n  /**\n   * Defines scrollbars behavior, `hover` by default\n   * - `hover` – scrollbars are visible when mouse is over the scroll area\n   * - `scroll` – scrollbars are visible when the scroll area is scrolled\n   * - `always` – scrollbars are always visible\n   * - `never` – scrollbars are always hidden\n   * - `auto` – similar to `overflow: auto` – scrollbars are always visible when the content is overflowing\n   * */\n  type?: 'auto' | 'always' | 'scroll' | 'hover' | 'never';\n\n  /** Axis at which scrollbars must be rendered, `'xy'` by default */\n  scrollbars?: 'x' | 'y' | 'xy' | false;\n\n  /** Scroll hide delay in ms, applicable only when type is set to `hover` or `scroll`, `1000` by default */\n  scrollHideDelay?: number;\n}\n\nexport type ScrollAreaRootFactory = Factory<{\n  props: ScrollAreaRootProps;\n  ref: HTMLDivElement;\n  stylesNames: ScrollAreaRootStylesNames;\n}>;\n\nconst defaultProps: Partial<ScrollAreaRootProps> = {\n  scrollHideDelay: 1000,\n  type: 'hover',\n};\n\nexport const ScrollAreaRoot = forwardRef<HTMLDivElement, ScrollAreaRootProps>((_props, ref) => {\n  const props = useProps('ScrollAreaRoot', defaultProps, _props);\n  const { type, scrollHideDelay, scrollbars, ...others } = props;\n\n  const [scrollArea, setScrollArea] = useState<HTMLDivElement | null>(null);\n  const [viewport, setViewport] = useState<HTMLDivElement | null>(null);\n  const [content, setContent] = useState<HTMLDivElement | null>(null);\n  const [scrollbarX, setScrollbarX] = useState<HTMLDivElement | null>(null);\n  const [scrollbarY, setScrollbarY] = useState<HTMLDivElement | null>(null);\n  const [cornerWidth, setCornerWidth] = useState(0);\n  const [cornerHeight, setCornerHeight] = useState(0);\n  const [scrollbarXEnabled, setScrollbarXEnabled] = useState(false);\n  const [scrollbarYEnabled, setScrollbarYEnabled] = useState(false);\n  const rootRef = useMergedRef(ref, (node) => setScrollArea(node));\n\n  return (\n    <ScrollAreaProvider\n      value={{\n        type: type!,\n        scrollHideDelay: scrollHideDelay!,\n        scrollArea,\n        viewport,\n        onViewportChange: setViewport,\n        content,\n        onContentChange: setContent,\n        scrollbarX,\n        onScrollbarXChange: setScrollbarX,\n        scrollbarXEnabled,\n        onScrollbarXEnabledChange: setScrollbarXEnabled,\n        scrollbarY,\n        onScrollbarYChange: setScrollbarY,\n        scrollbarYEnabled,\n        onScrollbarYEnabledChange: setScrollbarYEnabled,\n        onCornerWidthChange: setCornerWidth,\n        onCornerHeightChange: setCornerHeight,\n      }}\n    >\n      <Box\n        {...others}\n        ref={rootRef}\n        __vars={{\n          '--sa-corner-width': scrollbars !== 'xy' ? '0px' : `${cornerWidth}px`,\n          '--sa-corner-height': scrollbars !== 'xy' ? '0px' : `${cornerHeight}px`,\n        }}\n      />\n    </ScrollAreaProvider>\n  );\n});\n\nScrollAreaRoot.displayName = '@mantine/core/ScrollAreaRoot';\n","import { useCallback, useEffect, useRef } from 'react';\nimport { useCallbackRef } from '../use-callback-ref/use-callback-ref';\n\nconst noop = () => {};\n\nexport function useDebouncedCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  options: number | { delay: number; flushOnUnmount?: boolean }\n) {\n  const delay = typeof options === 'number' ? options : options.delay;\n  const flushOnUnmount = typeof options === 'number' ? false : options.flushOnUnmount;\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = useRef(0);\n\n  const lastCallback = Object.assign(\n    useCallback(\n      (...args: Parameters<T>) => {\n        window.clearTimeout(debounceTimerRef.current);\n        const flush = () => {\n          if (debounceTimerRef.current !== 0) {\n            debounceTimerRef.current = 0;\n            handleCallback(...args);\n          }\n        };\n        lastCallback.flush = flush;\n        debounceTimerRef.current = window.setTimeout(flush, delay);\n      },\n      [handleCallback, delay]\n    ),\n    { flush: noop }\n  );\n\n  useEffect(\n    () => () => {\n      window.clearTimeout(debounceTimerRef.current);\n      if (flushOnUnmount) {\n        lastCallback.flush();\n      }\n    },\n    [lastCallback, flushOnUnmount]\n  );\n\n  return lastCallback;\n}\n","export function getThumbRatio(viewportSize: number, contentSize: number) {\n  const ratio = viewportSize / contentSize;\n  return Number.isNaN(ratio) ? 0 : ratio;\n}\n","import type { Sizes } from '../ScrollArea.types';\nimport { getThumbRatio } from './get-thumb-ratio';\n\nexport function getThumbSize(sizes: Sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  return Math.max(thumbSize, 18);\n}\n","export function linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) {\n      return output[0];\n    }\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n","import type { Sizes } from '../ScrollArea.types';\nimport { getThumbSize } from './get-thumb-size';\nimport { linearScale } from './linear-scale';\n\nfunction clamp(value: number, [min, max]: [number, number]): number {\n  return Math.min(max, Math.max(min, value));\n}\n\nexport function getThumbOffsetFromScroll(\n  scrollPos: number,\n  sizes: Sizes,\n  dir: 'rtl' | 'ltr' = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n","export function isScrollingWithinScrollbarBounds(scrollPos: number, maxScrollPos: number) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\n","export function toInt(value?: string) {\n  return value ? parseInt(value, 10) : 0;\n}\n","export function composeEventHandlers<E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {}\n) {\n  return (event: E) => {\n    originalEventHandler?.(event);\n\n    if (checkForDefaultPrevented === false || !(event as unknown as Event).defaultPrevented) {\n      ourEventHandler?.(event);\n    }\n  };\n}\n","import { createSafeContext } from '../../../core';\n\nexport interface ScrollbarContextValue {\n  hasThumb: boolean;\n  scrollbar: HTMLDivElement | null;\n  onThumbChange: (thumb: HTMLDivElement | null) => void;\n  onThumbPointerUp: () => void;\n  onThumbPointerDown: (pointerPos: { x: number; y: number }) => void;\n  onThumbPositionChange: () => void;\n}\n\nexport const [ScrollbarProvider, useScrollbarContext] = createSafeContext<ScrollbarContextValue>(\n  'ScrollAreaScrollbar was not found in tree'\n);\n","import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { useCallbackRef, useDebouncedCallback, useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { Sizes } from '../ScrollArea.types';\nimport { useResizeObserver } from '../use-resize-observer';\nimport { composeEventHandlers } from '../utils';\nimport { ScrollbarContextValue, ScrollbarProvider } from './Scrollbar.context';\n\nexport interface ScrollbarPrivateProps {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContextValue['onThumbChange'];\n  onThumbPointerUp: ScrollbarContextValue['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContextValue['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContextValue['onThumbPositionChange'];\n  onWheelScroll: (event: WheelEvent, maxScrollPos: number) => void;\n  onDragScroll: (pointerPos: { x: number; y: number }) => void;\n  onResize: () => void;\n}\n\ninterface ScrollbarProps\n  extends ScrollbarPrivateProps,\n    Omit<React.ComponentPropsWithoutRef<'div'>, 'onResize'> {}\n\nexport const Scrollbar = forwardRef<HTMLDivElement, ScrollbarProps>((props, forwardedRef) => {\n  const {\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext();\n  const [scrollbar, setScrollbar] = useState<HTMLDivElement | null>(null);\n  const composeRefs = useMergedRef(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = useRef<DOMRect | null>(null);\n  const prevWebkitUserSelectRef = useRef<string>('');\n  const { viewport } = context;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebouncedCallback(onResize, 10);\n\n  const handleDragScroll = (event: React.PointerEvent<HTMLElement>) => {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  };\n\n  useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) {\n        handleWheelScroll(event, maxScrollPos);\n      }\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      value={{\n        scrollbar,\n        hasThumb,\n        onThumbChange: useCallbackRef(onThumbChange),\n        onThumbPointerUp: useCallbackRef(onThumbPointerUp),\n        onThumbPositionChange: handleThumbPositionChange,\n        onThumbPointerDown: useCallbackRef(onThumbPointerDown),\n      }}\n    >\n      <div\n        {...scrollbarProps}\n        ref={composeRefs}\n        data-mantine-scrollbar\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          event.preventDefault();\n\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          if (element.hasPointerCapture(event.pointerId)) {\n            event.preventDefault();\n            element.releasePointerCapture(event.pointerId);\n          }\n        })}\n        onLostPointerCapture={() => {\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          rectRef.current = null;\n        }}\n      />\n    </ScrollbarProvider>\n  );\n});\n","import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { ScrollAreaScrollbarAxisProps } from '../ScrollArea.types';\nimport { getThumbSize, isScrollingWithinScrollbarBounds, toInt } from '../utils';\nimport { Scrollbar } from './Scrollbar';\n\nexport const ScrollAreaScrollbarX = forwardRef<HTMLDivElement, ScrollAreaScrollbarAxisProps>(\n  (props, forwardedRef) => {\n    const { sizes, onSizesChange, style, ...others } = props;\n    const ctx = useScrollAreaContext();\n    const [computedStyle, setComputedStyle] = useState<CSSStyleDeclaration>();\n    const ref = useRef<HTMLDivElement>(null);\n    const composeRefs = useMergedRef(forwardedRef, ref, ctx.onScrollbarXChange);\n\n    useEffect(() => {\n      if (ref.current) {\n        setComputedStyle(getComputedStyle(ref.current));\n      }\n    }, [ref]);\n\n    return (\n      <Scrollbar\n        data-orientation=\"horizontal\"\n        {...others}\n        ref={composeRefs}\n        sizes={sizes}\n        style={{\n          ...style,\n          ['--sa-thumb-width' as any]: `${getThumbSize(sizes)}px`,\n        }}\n        onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.x)}\n        onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.x)}\n        onWheelScroll={(event, maxScrollPos) => {\n          if (ctx.viewport) {\n            const scrollPos = ctx.viewport.scrollLeft + event.deltaX;\n            props.onWheelScroll(scrollPos);\n            if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n              event.preventDefault();\n            }\n          }\n        }}\n        onResize={() => {\n          if (ref.current && ctx.viewport && computedStyle) {\n            onSizesChange({\n              content: ctx.viewport.scrollWidth,\n              viewport: ctx.viewport.offsetWidth,\n              scrollbar: {\n                size: ref.current.clientWidth,\n                paddingStart: toInt(computedStyle.paddingLeft),\n                paddingEnd: toInt(computedStyle.paddingRight),\n              },\n            });\n          }\n        }}\n      />\n    );\n  }\n);\n\nScrollAreaScrollbarX.displayName = '@mantine/core/ScrollAreaScrollbarX';\n","import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { ScrollAreaScrollbarAxisProps } from '../ScrollArea.types';\nimport { getThumbSize, isScrollingWithinScrollbarBounds, toInt } from '../utils';\nimport { Scrollbar } from './Scrollbar';\n\nexport const ScrollAreaScrollbarY = forwardRef<HTMLDivElement, ScrollAreaScrollbarAxisProps>(\n  (props, forwardedRef) => {\n    const { sizes, onSizesChange, style, ...others } = props;\n    const context = useScrollAreaContext();\n    const [computedStyle, setComputedStyle] = useState<CSSStyleDeclaration>();\n    const ref = useRef<HTMLDivElement>(null);\n    const composeRefs = useMergedRef(forwardedRef, ref, context.onScrollbarYChange);\n\n    useEffect(() => {\n      if (ref.current) {\n        setComputedStyle(window.getComputedStyle(ref.current));\n      }\n    }, []);\n\n    return (\n      <Scrollbar\n        {...others}\n        data-orientation=\"vertical\"\n        ref={composeRefs}\n        sizes={sizes}\n        style={{\n          ['--sa-thumb-height' as any]: `${getThumbSize(sizes)}px`,\n          ...style,\n        }}\n        onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n        onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n        onWheelScroll={(event, maxScrollPos) => {\n          if (context.viewport) {\n            const scrollPos = context.viewport.scrollTop + event.deltaY;\n            props.onWheelScroll(scrollPos);\n            if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n              event.preventDefault();\n            }\n          }\n        }}\n        onResize={() => {\n          if (ref.current && context.viewport && computedStyle) {\n            onSizesChange({\n              content: context.viewport.scrollHeight,\n              viewport: context.viewport.offsetHeight,\n              scrollbar: {\n                size: ref.current.clientHeight,\n                paddingStart: toInt(computedStyle.paddingTop),\n                paddingEnd: toInt(computedStyle.paddingBottom),\n              },\n            });\n          }\n        }}\n      />\n    );\n  }\n);\n\nScrollAreaScrollbarY.displayName = '@mantine/core/ScrollAreaScrollbarY';\n","import { forwardRef, useRef, useState } from 'react';\nimport { useDirection } from '../../../core';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport {\n  ScrollAreaScrollbarAxisPrivateProps,\n  ScrollAreaScrollbarAxisProps,\n  Sizes,\n} from '../ScrollArea.types';\nimport { getScrollPositionFromPointer, getThumbOffsetFromScroll, getThumbRatio } from '../utils';\nimport { ScrollAreaScrollbarX } from './ScrollbarX';\nimport { ScrollAreaScrollbarY } from './ScrollbarY';\n\nexport interface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nexport const ScrollAreaScrollbarVisible = forwardRef<\n  HTMLDivElement,\n  ScrollAreaScrollbarVisibleProps\n>((props, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const { dir } = useDirection();\n  const context = useScrollAreaContext();\n  const thumbRef = useRef<HTMLDivElement | null>(null);\n  const pointerOffsetRef = useRef(0);\n  const [sizes, setSizes] = useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  const commonProps: Omit<\n    ScrollAreaScrollbarAxisPrivateProps,\n    'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll'\n  > = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => {\n      thumbRef.current = thumb;\n    },\n    onThumbPointerUp: () => {\n      pointerOffsetRef.current = 0;\n    },\n    onThumbPointerDown: (pointerPos) => {\n      pointerOffsetRef.current = pointerPos;\n    },\n  };\n\n  const getScrollPosition = (pointerPos: number, direction?: 'ltr' | 'rtl') =>\n    getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, direction);\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = scrollPos;\n          }\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            if (sizes.scrollbar.size === 0) {\n              thumbRef.current.style.setProperty('--thumb-opacity', '0');\n            } else {\n              thumbRef.current.style.setProperty('--thumb-opacity', '1');\n            }\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) {\n            context.viewport.scrollTop = scrollPos;\n          }\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollTop = getScrollPosition(pointerPos);\n          }\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\nScrollAreaScrollbarVisible.displayName = '@mantine/core/ScrollAreaScrollbarVisible';\n","import type { Sizes } from '../ScrollArea.types';\nimport { getThumbSize } from './get-thumb-size';\nimport { linearScale } from './linear-scale';\n\nexport function getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: 'ltr' | 'rtl' = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n","import { forwardRef, useState } from 'react';\nimport { useDebouncedCallback } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { useResizeObserver } from '../use-resize-observer';\nimport {\n  ScrollAreaScrollbarVisible,\n  ScrollAreaScrollbarVisibleProps,\n} from './ScrollAreaScrollbarVisible';\n\nexport interface ScrollAreaScrollbarAutoProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nexport const ScrollAreaScrollbarAuto = forwardRef<HTMLDivElement, ScrollAreaScrollbarAutoProps>(\n  (props, ref) => {\n    const context = useScrollAreaContext();\n    const { forceMount, ...scrollbarProps } = props;\n    const [visible, setVisible] = useState(false);\n    const isHorizontal = props.orientation === 'horizontal';\n\n    const handleResize = useDebouncedCallback(() => {\n      if (context.viewport) {\n        const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n        const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n        setVisible(isHorizontal ? isOverflowX : isOverflowY);\n      }\n    }, 10);\n\n    useResizeObserver(context.viewport, handleResize);\n    useResizeObserver(context.content, handleResize);\n\n    if (forceMount || visible) {\n      return (\n        <ScrollAreaScrollbarVisible\n          data-state={visible ? 'visible' : 'hidden'}\n          {...scrollbarProps}\n          ref={ref}\n        />\n      );\n    }\n\n    return null;\n  }\n);\n\nScrollAreaScrollbarAuto.displayName = '@mantine/core/ScrollAreaScrollbarAuto';\n","import { forwardRef, useEffect, useState } from 'react';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { ScrollAreaScrollbarAuto, ScrollAreaScrollbarAutoProps } from './ScrollAreaScrollbarAuto';\n\ninterface ScrollAreaScrollbarHoverProps extends ScrollAreaScrollbarAutoProps {\n  forceMount?: true;\n}\n\nexport const ScrollAreaScrollbarHover = forwardRef<HTMLDivElement, ScrollAreaScrollbarHoverProps>(\n  (props, ref) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext();\n    const [visible, setVisible] = useState(false);\n\n    useEffect(() => {\n      const { scrollArea } = context;\n      let hideTimer = 0;\n      if (scrollArea) {\n        const handlePointerEnter = () => {\n          window.clearTimeout(hideTimer);\n          setVisible(true);\n        };\n        const handlePointerLeave = () => {\n          hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n        };\n        scrollArea.addEventListener('pointerenter', handlePointerEnter);\n        scrollArea.addEventListener('pointerleave', handlePointerLeave);\n\n        return () => {\n          window.clearTimeout(hideTimer);\n          scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n          scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n        };\n      }\n\n      return undefined;\n    }, [context.scrollArea, context.scrollHideDelay]);\n\n    if (forceMount || visible) {\n      return (\n        <ScrollAreaScrollbarAuto\n          data-state={visible ? 'visible' : 'hidden'}\n          {...scrollbarProps}\n          ref={ref}\n        />\n      );\n    }\n\n    return null;\n  }\n);\n\nScrollAreaScrollbarHover.displayName = '@mantine/core/ScrollAreaScrollbarHover';\n","import { forwardRef, useEffect, useState } from 'react';\nimport { useDebouncedCallback } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { composeEventHandlers } from '../utils';\nimport {\n  ScrollAreaScrollbarVisible,\n  ScrollAreaScrollbarVisibleProps,\n} from './ScrollAreaScrollbarVisible';\n\ninterface ScrollAreaScrollbarScrollProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nexport const ScrollAreaScrollbarScroll = forwardRef<HTMLDivElement, ScrollAreaScrollbarScrollProps>(\n  (props, red) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext();\n    const isHorizontal = props.orientation === 'horizontal';\n    const [state, setState] = useState<'hidden' | 'idle' | 'interacting' | 'scrolling'>('hidden');\n    const debounceScrollEnd = useDebouncedCallback(() => setState('idle'), 100);\n\n    useEffect(() => {\n      if (state === 'idle') {\n        const hideTimer = window.setTimeout(() => setState('hidden'), context.scrollHideDelay);\n        return () => window.clearTimeout(hideTimer);\n      }\n\n      return undefined;\n    }, [state, context.scrollHideDelay]);\n\n    useEffect(() => {\n      const { viewport } = context;\n      const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n      if (viewport) {\n        let prevScrollPos = viewport[scrollDirection];\n        const handleScroll = () => {\n          const scrollPos = viewport[scrollDirection];\n          const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n          if (hasScrollInDirectionChanged) {\n            setState('scrolling');\n            debounceScrollEnd();\n          }\n          prevScrollPos = scrollPos;\n        };\n        viewport.addEventListener('scroll', handleScroll);\n        return () => viewport.removeEventListener('scroll', handleScroll);\n      }\n\n      return undefined;\n    }, [context.viewport, isHorizontal, debounceScrollEnd]);\n\n    if (forceMount || state !== 'hidden') {\n      return (\n        <ScrollAreaScrollbarVisible\n          data-state={state === 'hidden' ? 'hidden' : 'visible'}\n          {...scrollbarProps}\n          ref={red}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, () => setState('interacting'))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, () => setState('idle'))}\n        />\n      );\n    }\n\n    return null;\n  }\n);\n","import { forwardRef, useEffect } from 'react';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { ScrollAreaScrollbarAuto } from './ScrollAreaScrollbarAuto';\nimport { ScrollAreaScrollbarHover } from './ScrollAreaScrollbarHover';\nimport { ScrollAreaScrollbarScroll } from './ScrollAreaScrollbarScroll';\nimport {\n  ScrollAreaScrollbarVisible,\n  ScrollAreaScrollbarVisibleProps,\n} from './ScrollAreaScrollbarVisible';\n\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nexport const ScrollAreaScrollbar = forwardRef<HTMLDivElement, ScrollAreaScrollbarProps>(\n  (props, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext();\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = '@mantine/core/ScrollAreaScrollbar';\n","import { forwardRef, useEffect, useRef } from 'react';\nimport { useDebouncedCallback, useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { useScrollbarContext } from '../ScrollAreaScrollbar/Scrollbar.context';\nimport { addUnlinkedScrollListener, composeEventHandlers } from '../utils';\n\ninterface ThumbProps extends React.ComponentPropsWithoutRef<'div'> {}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>((props, forwardedRef) => {\n  const { style, ...others } = props;\n  const scrollAreaContext = useScrollAreaContext();\n  const scrollbarContext = useScrollbarContext();\n  const { onThumbPositionChange } = scrollbarContext;\n  const composedRef = useMergedRef(forwardedRef, (node) => scrollbarContext.onThumbChange(node));\n  const removeUnlinkedScrollListenerRef = useRef<(() => void) | undefined>(undefined);\n  const debounceScrollEnd = useDebouncedCallback(() => {\n    if (removeUnlinkedScrollListenerRef.current) {\n      removeUnlinkedScrollListenerRef.current();\n      removeUnlinkedScrollListenerRef.current = undefined;\n    }\n  }, 100);\n\n  useEffect(() => {\n    const { viewport } = scrollAreaContext;\n    if (viewport) {\n      const handleScroll = () => {\n        debounceScrollEnd();\n        if (!removeUnlinkedScrollListenerRef.current) {\n          const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n          removeUnlinkedScrollListenerRef.current = listener;\n          onThumbPositionChange();\n        }\n      };\n      onThumbPositionChange();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n\n    return undefined;\n  }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n\n  return (\n    <div\n      data-state={scrollbarContext.hasThumb ? 'visible' : 'hidden'}\n      {...others}\n      ref={composedRef}\n      style={{\n        width: 'var(--sa-thumb-width)',\n        height: 'var(--sa-thumb-height)',\n        ...style,\n      }}\n      onPointerDownCapture={composeEventHandlers(props.onPointerDownCapture, (event) => {\n        const thumb = event.target as HTMLElement;\n        const thumbRect = thumb.getBoundingClientRect();\n        const x = event.clientX - thumbRect.left;\n        const y = event.clientY - thumbRect.top;\n        scrollbarContext.onThumbPointerDown({ x, y });\n      })}\n      onPointerUp={composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)}\n    />\n  );\n});\n\nThumb.displayName = '@mantine/core/ScrollAreaThumb';\n\ninterface ScrollAreaThumbProps extends ThumbProps {\n  forceMount?: true;\n}\n\nexport const ScrollAreaThumb = forwardRef<HTMLDivElement, ScrollAreaThumbProps>(\n  (props, forwardedRef) => {\n    const { forceMount, ...thumbProps } = props;\n    const scrollbarContext = useScrollbarContext();\n\n    if (forceMount || scrollbarContext.hasThumb) {\n      return <Thumb ref={forwardedRef} {...thumbProps} />;\n    }\n\n    return null;\n  }\n);\n\nScrollAreaThumb.displayName = '@mantine/core/ScrollAreaThumb';\n","export function addUnlinkedScrollListener(node: HTMLElement, handler = () => {}) {\n  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };\n  let rAF = 0;\n  (function loop() {\n    const position = { left: node.scrollLeft, top: node.scrollTop };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) {\n      handler();\n    }\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n}\n","import { forwardRef } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { Box, BoxProps, ElementProps } from '../../../core';\nimport { useScrollAreaContext } from '../ScrollArea.context';\n\nexport interface ScrollAreaViewportProps extends BoxProps, ElementProps<'div'> {}\n\nexport const ScrollAreaViewport = forwardRef<HTMLDivElement, ScrollAreaViewportProps>(\n  ({ children, style, ...others }, ref) => {\n    const ctx = useScrollAreaContext();\n    const rootRef = useMergedRef(ref, ctx.onViewportChange);\n\n    return (\n      <Box\n        {...others}\n        ref={rootRef}\n        style={{\n          overflowX: ctx.scrollbarXEnabled ? 'scroll' : 'hidden',\n          overflowY: ctx.scrollbarYEnabled ? 'scroll' : 'hidden',\n          ...style,\n        }}\n      >\n        <div style={{ minWidth: '100%', display: 'table' }} ref={ctx.onContentChange}>\n          {children}\n        </div>\n      </Box>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = '@mantine/core/ScrollAreaViewport';\n","import { useState } from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { ScrollAreaCorner } from './ScrollAreaCorner/ScrollAreaCorner';\nimport { ScrollAreaRoot } from './ScrollAreaRoot/ScrollAreaRoot';\nimport { ScrollAreaScrollbar } from './ScrollAreaScrollbar/ScrollAreaScrollbar';\nimport { ScrollAreaThumb } from './ScrollAreaThumb/ScrollAreaThumb';\nimport { ScrollAreaViewport } from './ScrollAreaViewport/ScrollAreaViewport';\nimport classes from './ScrollArea.module.css';\n\nexport type ScrollAreaStylesNames = 'root' | 'viewport' | 'scrollbar' | 'thumb' | 'corner';\nexport type ScrollAreaCssVariables = {\n  root: '--scrollarea-scrollbar-size';\n};\n\nexport interface ScrollAreaProps\n  extends BoxProps,\n    StylesApiProps<ScrollAreaFactory>,\n    ElementProps<'div'> {\n  /** Scrollbar size, any valid CSS value for width/height, numbers are converted to rem, default value is 0.75rem */\n  scrollbarSize?: number | string;\n\n  /**\n   * Defines scrollbars behavior, `hover` by default\n   * - `hover` – scrollbars are visible when mouse is over the scroll area\n   * - `scroll` – scrollbars are visible when the scroll area is scrolled\n   * - `always` – scrollbars are always visible\n   * - `never` – scrollbars are always hidden\n   * - `auto` – similar to `overflow: auto` – scrollbars are always visible when the content is overflowing\n   * */\n  type?: 'auto' | 'always' | 'scroll' | 'hover' | 'never';\n\n  /** Scroll hide delay in ms, applicable only when type is set to `hover` or `scroll`, `1000` by default */\n  scrollHideDelay?: number;\n\n  /** Axis at which scrollbars must be rendered, `'xy'` by default */\n  scrollbars?: 'x' | 'y' | 'xy' | false;\n\n  /** Determines whether scrollbars should be offset with padding on given axis, `false` by default */\n  offsetScrollbars?: boolean | 'x' | 'y';\n\n  /** Assigns viewport element (scrollable container) ref */\n  viewportRef?: React.ForwardedRef<HTMLDivElement>;\n\n  /** Props passed down to the viewport element */\n  viewportProps?: React.ComponentPropsWithRef<'div'>;\n\n  /** Called with current position (`x` and `y` coordinates) when viewport is scrolled */\n  onScrollPositionChange?: (position: { x: number; y: number }) => void;\n\n  /** Called when scrollarea is scrolled all the way to the bottom */\n  onBottomReached?: () => void;\n\n  /** Called when scrollarea is scrolled all the way to the top */\n  onTopReached?: () => void;\n}\n\nexport interface ScrollAreaAutosizeProps extends ScrollAreaProps {}\n\nexport type ScrollAreaFactory = Factory<{\n  props: ScrollAreaProps;\n  ref: HTMLDivElement;\n  stylesNames: ScrollAreaStylesNames;\n  vars: ScrollAreaCssVariables;\n  staticComponents: {\n    Autosize: typeof ScrollAreaAutosize;\n  };\n}>;\n\nconst defaultProps: Partial<ScrollAreaProps> = {\n  scrollHideDelay: 1000,\n  type: 'hover',\n  scrollbars: 'xy',\n};\n\nconst varsResolver = createVarsResolver<ScrollAreaFactory>((_, { scrollbarSize }) => ({\n  root: {\n    '--scrollarea-scrollbar-size': rem(scrollbarSize),\n  },\n}));\n\nexport const ScrollArea = factory<ScrollAreaFactory>((_props, ref) => {\n  const props = useProps('ScrollArea', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    scrollbarSize,\n    vars,\n    type,\n    scrollHideDelay,\n    viewportProps,\n    viewportRef,\n    onScrollPositionChange,\n    children,\n    offsetScrollbars,\n    scrollbars,\n    onBottomReached,\n    onTopReached,\n    ...others\n  } = props;\n\n  const [scrollbarHovered, setScrollbarHovered] = useState(false);\n\n  const getStyles = useStyles<ScrollAreaFactory>({\n    name: 'ScrollArea',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <ScrollAreaRoot\n      type={type === 'never' ? 'always' : type}\n      scrollHideDelay={scrollHideDelay}\n      ref={ref}\n      scrollbars={scrollbars}\n      {...getStyles('root')}\n      {...others}\n    >\n      <ScrollAreaViewport\n        {...viewportProps}\n        {...getStyles('viewport', { style: viewportProps?.style })}\n        ref={viewportRef}\n        data-offset-scrollbars={offsetScrollbars === true ? 'xy' : offsetScrollbars || undefined}\n        data-scrollbars={scrollbars || undefined}\n        onScroll={(e) => {\n          viewportProps?.onScroll?.(e);\n          onScrollPositionChange?.({ x: e.currentTarget.scrollLeft, y: e.currentTarget.scrollTop });\n          const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n          if (scrollTop - (scrollHeight - clientHeight) >= 0) {\n            onBottomReached?.();\n          }\n          if (scrollTop === 0) {\n            onTopReached?.();\n          }\n        }}\n      >\n        {children}\n      </ScrollAreaViewport>\n\n      {(scrollbars === 'xy' || scrollbars === 'x') && (\n        <ScrollAreaScrollbar\n          {...getStyles('scrollbar')}\n          orientation=\"horizontal\"\n          data-hidden={type === 'never' || undefined}\n          forceMount\n          onMouseEnter={() => setScrollbarHovered(true)}\n          onMouseLeave={() => setScrollbarHovered(false)}\n        >\n          <ScrollAreaThumb {...getStyles('thumb')} />\n        </ScrollAreaScrollbar>\n      )}\n\n      {(scrollbars === 'xy' || scrollbars === 'y') && (\n        <ScrollAreaScrollbar\n          {...getStyles('scrollbar')}\n          orientation=\"vertical\"\n          data-hidden={type === 'never' || undefined}\n          forceMount\n          onMouseEnter={() => setScrollbarHovered(true)}\n          onMouseLeave={() => setScrollbarHovered(false)}\n        >\n          <ScrollAreaThumb {...getStyles('thumb')} />\n        </ScrollAreaScrollbar>\n      )}\n\n      <ScrollAreaCorner\n        {...getStyles('corner')}\n        data-hovered={scrollbarHovered || undefined}\n        data-hidden={type === 'never' || undefined}\n      />\n    </ScrollAreaRoot>\n  );\n});\n\nScrollArea.displayName = '@mantine/core/ScrollArea';\n\nexport const ScrollAreaAutosize = factory<ScrollAreaFactory>((props, ref) => {\n  const {\n    children,\n    classNames,\n    styles,\n    scrollbarSize,\n    scrollHideDelay,\n    type,\n    dir,\n    offsetScrollbars,\n    viewportRef,\n    onScrollPositionChange,\n    unstyled,\n    variant,\n    viewportProps,\n    scrollbars,\n    style,\n    vars,\n    onBottomReached,\n    onTopReached,\n    ...others\n  } = useProps('ScrollAreaAutosize', defaultProps, props);\n\n  return (\n    <Box {...others} ref={ref} style={[{ display: 'flex', overflow: 'auto' }, style]}>\n      <Box style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n        <ScrollArea\n          classNames={classNames}\n          styles={styles}\n          scrollHideDelay={scrollHideDelay}\n          scrollbarSize={scrollbarSize}\n          type={type}\n          dir={dir}\n          offsetScrollbars={offsetScrollbars}\n          viewportRef={viewportRef}\n          onScrollPositionChange={onScrollPositionChange}\n          unstyled={unstyled}\n          variant={variant}\n          viewportProps={viewportProps}\n          vars={vars}\n          scrollbars={scrollbars}\n          onBottomReached={onBottomReached}\n          onTopReached={onTopReached}\n        >\n          {children}\n        </ScrollArea>\n      </Box>\n    </Box>\n  );\n});\n\nScrollArea.classes = classes;\nScrollAreaAutosize.displayName = '@mantine/core/ScrollAreaAutosize';\nScrollAreaAutosize.classes = classes;\nScrollArea.Autosize = ScrollAreaAutosize;\n","import { ComboboxParsedItem, ComboboxParsedItemGroup } from '../Combobox.types';\n\nexport function isOptionsGroup(item: ComboboxParsedItem): item is ComboboxParsedItemGroup {\n  return 'group' in item;\n}\n","import { ComboboxItem, ComboboxParsedItem } from '../Combobox.types';\nimport { isOptionsGroup } from './is-options-group';\n\nexport interface FilterOptionsInput {\n  options: ComboboxParsedItem[];\n  search: string;\n  limit: number;\n}\n\nexport function defaultOptionsFilter({\n  options,\n  search,\n  limit,\n}: FilterOptionsInput): ComboboxParsedItem[] {\n  const parsedSearch = search.trim().toLowerCase();\n  const result: ComboboxParsedItem[] = [];\n\n  for (let i = 0; i < options.length; i += 1) {\n    const item = options[i];\n\n    if (result.length === limit) {\n      return result;\n    }\n\n    if (isOptionsGroup(item)) {\n      result.push({\n        group: item.group,\n        items: defaultOptionsFilter({\n          options: item.items,\n          search,\n          limit: limit - result.length,\n        }) as ComboboxItem[],\n      });\n    }\n\n    if (!isOptionsGroup(item)) {\n      if (item.label.toLowerCase().includes(parsedSearch)) {\n        result.push(item);\n      }\n    }\n  }\n\n  return result;\n}\n","import { isOptionsGroup } from './is-options-group';\n\nexport function validateOptions(options: any[], valuesSet = new Set()) {\n  if (!Array.isArray(options)) {\n    return;\n  }\n\n  for (const option of options) {\n    if (isOptionsGroup(option)) {\n      validateOptions(option.items, valuesSet);\n    } else {\n      if (typeof option.value === 'undefined') {\n        throw new Error('[@mantine/core] Each option must have value property');\n      }\n\n      if (typeof option.value !== 'string') {\n        throw new Error(\n          `[@mantine/core] Option value must be a string, other data formats are not supported, got ${typeof option.value}`\n        );\n      }\n\n      if (valuesSet.has(option.value)) {\n        throw new Error(\n          `[@mantine/core] Duplicate options are not supported. Option with value \"${option.value}\" was provided more than once`\n        );\n      }\n\n      valuesSet.add(option.value);\n    }\n  }\n}\n","import cx from 'clsx';\nimport { CheckIcon } from '../../Checkbox';\nimport { ScrollArea, ScrollAreaProps } from '../../ScrollArea/ScrollArea';\nimport { Combobox } from '../Combobox';\nimport { ComboboxItem, ComboboxLikeRenderOptionInput, ComboboxParsedItem } from '../Combobox.types';\nimport { defaultOptionsFilter, FilterOptionsInput } from './default-options-filter';\nimport { isEmptyComboboxData } from './is-empty-combobox-data';\nimport { isOptionsGroup } from './is-options-group';\nimport { validateOptions } from './validate-options';\nimport classes from '../Combobox.module.css';\n\nexport type OptionsFilter = (input: FilterOptionsInput) => ComboboxParsedItem[];\n\nexport interface OptionsGroup {\n  group: string;\n  items: ComboboxItem[];\n}\n\nexport type OptionsData = (ComboboxItem | OptionsGroup)[];\n\ninterface OptionProps {\n  data: ComboboxItem | OptionsGroup;\n  withCheckIcon?: boolean;\n  value?: string | string[] | null;\n  checkIconPosition?: 'left' | 'right';\n  unstyled: boolean | undefined;\n  renderOption?: (input: ComboboxLikeRenderOptionInput<any>) => React.ReactNode;\n}\n\nfunction isValueChecked(value: string | string[] | undefined | null, optionValue: string) {\n  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;\n}\n\nfunction Option({\n  data,\n  withCheckIcon,\n  value,\n  checkIconPosition,\n  unstyled,\n  renderOption,\n}: OptionProps) {\n  if (!isOptionsGroup(data)) {\n    const checked = isValueChecked(value, data.value);\n    const check = withCheckIcon && checked && (\n      <CheckIcon className={classes.optionsDropdownCheckIcon} />\n    );\n\n    const defaultContent = (\n      <>\n        {checkIconPosition === 'left' && check}\n        <span>{data.label}</span>\n        {checkIconPosition === 'right' && check}\n      </>\n    );\n\n    return (\n      <Combobox.Option\n        value={data.value}\n        disabled={data.disabled}\n        className={cx({ [classes.optionsDropdownOption]: !unstyled })}\n        data-reverse={checkIconPosition === 'right' || undefined}\n        data-checked={checked || undefined}\n        aria-selected={checked}\n        active={checked}\n      >\n        {typeof renderOption === 'function'\n          ? renderOption({ option: data, checked })\n          : defaultContent}\n      </Combobox.Option>\n    );\n  }\n\n  const options = data.items.map((item) => (\n    <Option\n      data={item}\n      value={value}\n      key={item.value}\n      unstyled={unstyled}\n      withCheckIcon={withCheckIcon}\n      checkIconPosition={checkIconPosition}\n      renderOption={renderOption}\n    />\n  ));\n\n  return <Combobox.Group label={data.group}>{options}</Combobox.Group>;\n}\n\nexport interface OptionsDropdownProps {\n  data: OptionsData;\n  filter: OptionsFilter | undefined;\n  search: string | undefined;\n  limit: number | undefined;\n  withScrollArea: boolean | undefined;\n  maxDropdownHeight: number | string | undefined;\n  hidden?: boolean;\n  hiddenWhenEmpty?: boolean;\n  filterOptions?: boolean;\n  withCheckIcon?: boolean;\n  value?: string | string[] | null;\n  checkIconPosition?: 'left' | 'right';\n  nothingFoundMessage?: React.ReactNode;\n  unstyled: boolean | undefined;\n  labelId: string | undefined;\n  'aria-label': string | undefined;\n  renderOption?: (input: ComboboxLikeRenderOptionInput<any>) => React.ReactNode;\n  scrollAreaProps: ScrollAreaProps | undefined;\n}\n\nexport function OptionsDropdown({\n  data,\n  hidden,\n  hiddenWhenEmpty,\n  filter,\n  search,\n  limit,\n  maxDropdownHeight,\n  withScrollArea = true,\n  filterOptions = true,\n  withCheckIcon = false,\n  value,\n  checkIconPosition,\n  nothingFoundMessage,\n  unstyled,\n  labelId,\n  renderOption,\n  scrollAreaProps,\n  'aria-label': ariaLabel,\n}: OptionsDropdownProps) {\n  validateOptions(data);\n\n  const shouldFilter = typeof search === 'string';\n  const filteredData = shouldFilter\n    ? (filter || defaultOptionsFilter)({\n        options: data,\n        search: filterOptions ? search : '',\n        limit: limit ?? Infinity,\n      })\n    : data;\n  const isEmpty = isEmptyComboboxData(filteredData);\n\n  const options = filteredData.map((item) => (\n    <Option\n      data={item}\n      key={isOptionsGroup(item) ? item.group : item.value}\n      withCheckIcon={withCheckIcon}\n      value={value}\n      checkIconPosition={checkIconPosition}\n      unstyled={unstyled}\n      renderOption={renderOption}\n    />\n  ));\n\n  return (\n    <Combobox.Dropdown hidden={hidden || (hiddenWhenEmpty && isEmpty)} data-composed>\n      <Combobox.Options labelledBy={labelId} aria-label={ariaLabel}>\n        {withScrollArea ? (\n          <ScrollArea.Autosize\n            mah={maxDropdownHeight ?? 220}\n            type=\"scroll\"\n            scrollbarSize=\"var(--combobox-padding)\"\n            offsetScrollbars=\"y\"\n            {...scrollAreaProps}\n          >\n            {options}\n          </ScrollArea.Autosize>\n        ) : (\n          options\n        )}\n        {isEmpty && nothingFoundMessage && <Combobox.Empty>{nothingFoundMessage}</Combobox.Empty>}\n      </Combobox.Options>\n    </Combobox.Dropdown>\n  );\n}\n","import { ComboboxParsedItem, ComboboxParsedItemGroup } from '../Combobox.types';\n\nexport function isEmptyComboboxData(data: ComboboxParsedItem[]) {\n  if (data.length === 0) {\n    return true;\n  }\n\n  for (const item of data) {\n    if (!('group' in item)) {\n      return false;\n    }\n\n    if ((item as ComboboxParsedItemGroup).items.length > 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { useEffect, useMemo } from 'react';\nimport { useId, usePrevious, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  ElementProps,\n  Factory,\n  factory,\n  MantineColor,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '../../core';\nimport {\n  Combobox,\n  ComboboxItem,\n  ComboboxLikeProps,\n  ComboboxLikeRenderOptionInput,\n  ComboboxLikeStylesNames,\n  getOptionsLockup,\n  getParsedComboboxData,\n  OptionsDropdown,\n  useCombobox,\n} from '../Combobox';\nimport {\n  __BaseInputProps,\n  __InputStylesNames,\n  InputClearButtonProps,\n  InputVariant,\n} from '../Input';\nimport { InputBase } from '../InputBase';\nimport { ScrollAreaProps } from '../ScrollArea';\n\nexport type SelectStylesNames = __InputStylesNames | ComboboxLikeStylesNames;\n\nexport interface SelectProps\n  extends BoxProps,\n    __BaseInputProps,\n    ComboboxLikeProps,\n    StylesApiProps<SelectFactory>,\n    ElementProps<'input', 'onChange' | 'size' | 'value' | 'defaultValue'> {\n  /** Controlled component value */\n  value?: string | null;\n\n  /** Uncontrolled component default value */\n  defaultValue?: string | null;\n\n  /** Called when value changes */\n  onChange?: (value: string | null, option: ComboboxItem) => void;\n\n  /** Called when the clear button is clicked */\n  onClear?: () => void;\n\n  /** Determines whether the select should be searchable, `false` by default */\n  searchable?: boolean;\n\n  /** Determines whether check icon should be displayed near the selected option label, `true` by default */\n  withCheckIcon?: boolean;\n\n  /** Position of the check icon relative to the option label, `'left'` by default */\n  checkIconPosition?: 'left' | 'right';\n\n  /** Message displayed when no option matches the current search query while the `searchable` prop is set or there is no data */\n  nothingFoundMessage?: React.ReactNode;\n\n  /** Controlled search value */\n  searchValue?: string;\n\n  /** Default search value */\n  defaultSearchValue?: string;\n\n  /** Called when search changes */\n  onSearchChange?: (value: string) => void;\n\n  /** Determines whether it should be possible to deselect value by clicking on the selected option, `true` by default */\n  allowDeselect?: boolean;\n\n  /** Determines whether the clear button should be displayed in the right section when the component has value, `false` by default */\n  clearable?: boolean;\n\n  /** Props passed down to the clear button */\n  clearButtonProps?: InputClearButtonProps & ElementProps<'button'>;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: Omit<React.ComponentPropsWithoutRef<'input'>, 'value'>;\n\n  /** A function to render content of the option, replaces the default content of the option */\n  renderOption?: (item: ComboboxLikeRenderOptionInput<ComboboxItem>) => React.ReactNode;\n\n  /** Props passed down to the underlying `ScrollArea` component in the dropdown */\n  scrollAreaProps?: ScrollAreaProps;\n\n  /** Controls color of the default chevron, by default depends on the color scheme */\n  chevronColor?: MantineColor;\n}\n\nexport type SelectFactory = Factory<{\n  props: SelectProps;\n  ref: HTMLInputElement;\n  stylesNames: SelectStylesNames;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<SelectProps> = {\n  searchable: false,\n  withCheckIcon: true,\n  allowDeselect: true,\n  checkIconPosition: 'left',\n};\n\nexport const Select = factory<SelectFactory>((_props, ref) => {\n  const props = useProps('Select', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownClose,\n    onDropdownOpen,\n    onFocus,\n    onBlur,\n    onClick,\n    onChange,\n    data,\n    value,\n    defaultValue,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    readOnly,\n    disabled,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    size,\n    searchable,\n    rightSection,\n    checkIconPosition,\n    withCheckIcon,\n    nothingFoundMessage,\n    name,\n    form,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    allowDeselect,\n    error,\n    rightSectionPointerEvents,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    renderOption,\n    onClear,\n    autoComplete,\n    scrollAreaProps,\n    __defaultRightSection,\n    __clearSection,\n    __clearable,\n    chevronColor,\n    ...others\n  } = props;\n\n  const parsedData = useMemo(() => getParsedComboboxData(data), [data]);\n  const optionsLockup = useMemo(() => getOptionsLockup(parsedData), [parsedData]);\n  const _id = useId(id);\n\n  const [_value, setValue, controlled] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange,\n  });\n\n  const selectedOption = typeof _value === 'string' ? optionsLockup[_value] : undefined;\n  const previousSelectedOption = usePrevious(selectedOption);\n\n  const [search, setSearch] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: selectedOption ? selectedOption.label : '',\n    onChange: onSearchChange,\n  });\n\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen: () => {\n      onDropdownOpen?.();\n      combobox.updateSelectedOptionIndex('active', { scrollIntoView: true });\n    },\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    },\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<SelectFactory>({\n    props,\n    styles,\n    classNames,\n  });\n\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _value]);\n\n  useEffect(() => {\n    if (value === null) {\n      setSearch('');\n    }\n\n    if (\n      typeof value === 'string' &&\n      selectedOption &&\n      (previousSelectedOption?.value !== selectedOption.value ||\n        previousSelectedOption?.label !== selectedOption.label)\n    ) {\n      setSearch(selectedOption.label);\n    }\n  }, [value, selectedOption]);\n\n  const clearButton = (\n    <Combobox.ClearButton\n      {...clearButtonProps}\n      onClear={() => {\n        setValue(null, null);\n        setSearch('');\n        onClear?.();\n      }}\n    />\n  );\n\n  const _clearable = clearable && !!_value && !disabled && !readOnly;\n\n  return (\n    <>\n      <Combobox\n        store={combobox}\n        __staticSelector=\"Select\"\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        readOnly={readOnly}\n        onOptionSubmit={(val) => {\n          onOptionSubmit?.(val);\n          const optionLockup = allowDeselect\n            ? optionsLockup[val].value === _value\n              ? null\n              : optionsLockup[val]\n            : optionsLockup[val];\n\n          const nextValue = optionLockup ? optionLockup.value : null;\n\n          nextValue !== _value && setValue(nextValue, optionLockup);\n          !controlled && setSearch(typeof nextValue === 'string' ? optionLockup?.label || '' : '');\n          combobox.closeDropdown();\n        }}\n        size={size}\n        {...comboboxProps}\n      >\n        <Combobox.Target targetType={searchable ? 'input' : 'button'} autoComplete={autoComplete}>\n          <InputBase\n            id={_id}\n            ref={ref}\n            __defaultRightSection={\n              <Combobox.Chevron\n                size={size}\n                error={error}\n                unstyled={unstyled}\n                color={chevronColor}\n              />\n            }\n            __clearSection={clearButton}\n            __clearable={_clearable}\n            rightSection={rightSection}\n            rightSectionPointerEvents={rightSectionPointerEvents || (_clearable ? 'all' : 'none')}\n            {...others}\n            size={size}\n            __staticSelector=\"Select\"\n            disabled={disabled}\n            readOnly={readOnly || !searchable}\n            value={search}\n            onChange={(event) => {\n              setSearch(event.currentTarget.value);\n              combobox.openDropdown();\n              selectFirstOptionOnChange && combobox.selectFirstOption();\n            }}\n            onFocus={(event) => {\n              searchable && combobox.openDropdown();\n              onFocus?.(event);\n            }}\n            onBlur={(event) => {\n              searchable && combobox.closeDropdown();\n              setSearch(_value != null ? optionsLockup[_value]?.label || '' : '');\n              onBlur?.(event);\n            }}\n            onClick={(event) => {\n              searchable ? combobox.openDropdown() : combobox.toggleDropdown();\n              onClick?.(event);\n            }}\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            unstyled={unstyled}\n            pointer={!searchable}\n            error={error}\n          />\n        </Combobox.Target>\n        <OptionsDropdown\n          data={parsedData}\n          hidden={readOnly || disabled}\n          filter={filter}\n          search={search}\n          limit={limit}\n          hiddenWhenEmpty={!nothingFoundMessage}\n          withScrollArea={withScrollArea}\n          maxDropdownHeight={maxDropdownHeight}\n          filterOptions={searchable && selectedOption?.label !== search}\n          value={_value}\n          checkIconPosition={checkIconPosition}\n          withCheckIcon={withCheckIcon}\n          nothingFoundMessage={nothingFoundMessage}\n          unstyled={unstyled}\n          labelId={others.label ? `${_id}-label` : undefined}\n          aria-label={others.label ? undefined : others['aria-label']}\n          renderOption={renderOption}\n          scrollAreaProps={scrollAreaProps}\n        />\n      </Combobox>\n      <Combobox.HiddenInput\n        value={_value}\n        name={name}\n        form={form}\n        disabled={disabled}\n        {...hiddenInputProps}\n      />\n    </>\n  );\n});\n\nSelect.classes = { ...InputBase.classes, ...Combobox.classes };\nSelect.displayName = '@mantine/core/Select';\n","import { useEffect, useRef } from 'react';\n\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>(undefined);\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","import { useState } from 'react';\n\ninterface UseUncontrolledInput<T> {\n  /** Value for controlled state */\n  value?: T;\n\n  /** Initial value for uncontrolled state */\n  defaultValue?: T;\n\n  /** Final value for uncontrolled state when value and defaultValue are not provided */\n  finalValue?: T;\n\n  /** Controlled state onChange handler */\n  onChange?: (value: T, ...payload: any[]) => void;\n}\n\nexport function useUncontrolled<T>({\n  value,\n  defaultValue,\n  finalValue,\n  onChange = () => {},\n}: UseUncontrolledInput<T>): [T, (value: T, ...payload: any[]) => void, boolean] {\n  const [uncontrolledValue, setUncontrolledValue] = useState(\n    defaultValue !== undefined ? defaultValue : finalValue\n  );\n\n  const handleUncontrolledChange = (val: T, ...payload: any[]) => {\n    setUncontrolledValue(val);\n    onChange?.(val, ...payload);\n  };\n\n  if (value !== undefined) {\n    return [value as T, onChange, true];\n  }\n\n  return [uncontrolledValue as T, handleUncontrolledChange, false];\n}\n"],"names":["IconArrowRight","createReactComponent","d","key","IconCalendar","IconSearch","IconShare","IconUser","defaultProps","varsResolver","createVarsResolver","theme","_ref","radius","color","gradient","variant","size","autoContrast","colors","variantColorResolver","primaryColor","root","getSize","getRadius","background","border","getThemeColor","Badge","polymorphicFactory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","leftSection","rightSection","children","fullWidth","circle","mod","others","getStyles","useStyles","name","classes","jsxs","Box","block","jsx","displayName","_","fit","Image","onError","src","fallbackSrc","error","setError","useState","useEffect","component","event","parseItem","item","value","label","disabled","toString","group","items","map","i","getParsedComboboxData","data","getOptionsLockup","options","reduce","acc","DEFAULT_EVENTS","getFloatingPosition","dir","position","includes","side","placement","split","flippedPosition","PopoverContextProvider","usePopoverContext","createSafeContext","noop","closeOnEscape","callback","arguments","length","undefined","active","onTrigger","onKeyDown","horizontalSide","arrowY","arrowOffset","arrowPosition","top","bottom","verticalSide","arrowX","left","radiusByFloatingSide","right","getArrowPositionStyles","arrowSize","arrowRadius","baseStyles","width","height","transform","arrowPlacement","borderLeftColor","borderBottomColor","clipPath","borderRightColor","borderTopColor","FloatingArrow","forwardRef","visible","useDirection","PopoverDropdown","factory","onKeyDownCapture","ctx","returnFocus","useFocusReturn","opened","shouldReturnFocus","accessibleProps","withRoles","getTargetId","id","getDropdownId","role","tabIndex","mergedRef","useMergedRef","floating","OptionalPortal","portalProps","withinPortal","Transition","mounted","transitionProps","transition","duration","keepMounted","exitDuration","transitionStyles","FocusTrap","trapFocus","innerRef","onClose","floatingStrategy","zIndex","y","x","rem","resolvedStyles","dropdown","arrowRef","withArrow","getRefProp","element","version","React","startsWith","refProp","popupType","PopoverTarget","isElement","Error","forwardedProps","targetRef","reference","cloneElement","targetProps","cx","controlled","onClick","onToggle","min","Math","max","round","floor","createCoords","v","oppositeSideMap","oppositeAlignmentMap","start","end","clamp","evaluate","param","getSide","getAlignment","getOppositeAxis","axis","getAxisLength","getSideAxis","getAlignmentAxis","getOppositeAlignmentPlacement","replace","alignment","getOppositePlacement","getPaddingObject","padding","expandPaddingObject","rectToClientRect","rect","computeCoordsFromPlacement","rtl","sideAxis","alignmentAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","async","detectOverflow","state","_await$platform$isEle","platform","rects","elements","strategy","boundary","rootBoundary","elementContext","altBoundary","paddingObject","clippingClientRect","getClippingRect","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","getBoundingRect","minX","minY","hasWindow","window","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflow","overflowX","overflowY","display","getComputedStyle","test","isTableElement","isTopLayer","some","selector","matches","e","isContainingBlock","elementOrCss","webkit","isWebKit","css","containerType","backdropFilter","filter","willChange","contain","CSS","supports","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","scrollX","scrollY","getParentNode","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","list","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","win","frameElement","getFrameElement","concat","visualViewport","parent","Object","getPrototypeOf","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","isFixed","floatingOffsetParent","shouldAddVisualOffsets","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","leftScroll","getHTMLOffset","scroll","ignoreScrollbarX","htmlRect","getClientRectFromClippingAncestor","clippingAncestor","html","clientWidth","clientHeight","visualViewportBased","getViewportRect","scrollWidth","scrollHeight","direction","getDocumentRect","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","htmlOffset","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","svgOffsetParent","currentNode","getContainingBlock","topLayer","clippingAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","ancestor","set","getClippingElementAncestors","this","_c","firstClippingAncestor","clippingRect","accRect","getElementRects","getOffsetParentFn","getDimensionsFn","getDimensions","floatingDimensions","getClientRects","Array","from","isRTL","rectsAreEqual","a","b","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","onMove","timeoutId","io","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","elementRectForRootMargin","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","observe","observeMove","frameId","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","offset","fn","_middlewareData$offse","_middlewareData$arrow","middlewareData","diffCoords","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","convertValueToCoords","arrow","alignmentOffset","shift","checkMainAxis","checkCrossAxis","limiter","detectOverflowOptions","mainAxisCoord","crossAxisCoord","maxSide","limitedCoords","enabled","flip","_middlewareData$flip","initialPlacement","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","initialSideAxis","isBasePlacement","oppositePlacement","getExpandedPlacements","hasFallbackAxisSideDirection","push","isStart","lr","rl","tb","bt","getSideList","getOppositeAxisPlacements","placements","overflows","overflowsData","sides","mainAlignmentSide","getAlignmentSides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","reset","resetPlacement","sort","_overflowsData$filter2","currentSideAxis","_state$middlewareData","_state$middlewareData2","apply","isYAxis","heightSide","widthSide","maximumClippingHeight","maximumClippingWidth","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions","arrowDimensions","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","shouldAddOffset","centerOffset","inline","nativeClientRects","clientRects","sortedRects","slice","groups","prevRect","getRectsByLine","fallback","resetRects","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse2","isOriginSide","computePosition","Map","mergedOptions","platformWithCache","config","middleware","validMiddleware","Boolean","statefulPlacement","resetCount","nextX","nextY","computePosition$1","useLayoutEffect","deepEqual","keys","isArray","hasOwnProperty","call","$$typeof","getDPR","devicePixelRatio","roundByDPR","dpr","useLatestRef","current","arrow$1","arrow$2","deps","offset$1","limitShift$1","flip$1","inline$1","SafeReact","useSafeInsertionEffect","useInsertionEffect","useEffectEvent","process","_len","args","_key","ARROW_UP","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","horizontalKeys","verticalKeys","serverHandoffComplete","count","genId","random","useId","setId","createPubSub","emit","_map$get","handler","on","listener","off","_map$get2","l","FloatingNodeContext","FloatingTreeContext","useFloatingParentNodeId","_React$useContext","useFloatingTree","useFloating","nodeId","internalRootContext","open","onOpenChange","onOpenChangeProp","elementsProp","floatingId","dataRef","events","nested","positionReference","setPositionReference","reason","openEvent","refs","domReference","useFloatingRootContext","rootContext","computedElements","_domReference","setDomReference","_setPositionReference","domReferenceRef","tree","externalReference","externalFloating","whileElementsMounted","setData","isPositioned","latestMiddleware","setLatestMiddleware","_reference","_setReference","_floating","_setFloating","setReference","referenceRef","setFloating","floatingRef","floatingEl","hasWhileElementsMounted","whileElementsMountedRef","platformRef","openRef","then","fullData","isMountedRef","ReactDOM","floatingStyles","initialStyles","useFloating$1","computedPositionReference","context","floatingContext","nodesRef","getPopoverMiddlewares","getFloating","middlewaresOptions","middlewares","getDefaultMiddlewares","shift$1","size$1","rest","assign","maxWidth","maxHeight","usePopover","_opened","setOpened","useUncontrolled","defaultValue","defaultOpened","finalValue","onChange","previouslyOpened","useRef","positionDependencies","delayedUpdate","setDelayedUpdate","useDidUpdate","c","useFloatingAutoUpdate","onPositionChange","onOpen","closeOnClickOutside","withOverlay","clickOutsideEvents","getDefaultZIndex","__staticSelector","shadow","getShadow","Popover","onExitTransitionEnd","onEnterTransitionEnd","overlayProps","rootSelector","useResolvedStylesApi","targetNode","setTargetNode","dropdownNode","setDropdownNode","uid","popover","nodes","shouldIgnore","hasAttribute","contains","tagName","composedPath","useClickOutside","useCallback","onExited","onEntered","Overlay","Target","Dropdown","extend","input","ComboboxProvider","useComboboxContext","chevron","ComboboxChevron","viewBox","fill","xmlns","fillRule","clipRule","ComboboxClearButton","onMouseDown","onClear","Input","ClearButton","preventDefault","ComboboxDropdown","hidden","ComboboxDropdownTarget","ComboboxEmpty","useComboboxTargetProps","withKeyboardNavigation","withAriaAttributes","withExpandedAttribute","targetType","autoComplete","selectedOptionId","setSelectedOptionId","store","listId","dropdownOpened","readOnly","nativeEvent","isComposing","code","selectNextOption","openDropdown","selectActiveOption","updateSelectedOptionIndex","scrollIntoView","selectPreviousOption","keyCode","selectedOptionIndex","getSelectedOptionIndex","clickSelectedOption","closeDropdown","toggleDropdown","ComboboxEventsTarget","ComboboxFooter","ComboboxGroup","ComboboxHeader","ComboboxHiddenInput","valuesDivider","type","join","ComboboxOption","onMouseOver","selected","uuid","_id","onOptionSubmit","resetSelectionOnOptionHover","resetSelectedOption","ComboboxOptions","labelledBy","setListId","ComboboxSearch","_styles","searchRef","ComboboxTarget","clonedElement","useCombobox","onOpenedChange","onDropdownClose","onDropdownOpen","loop","scrollBehavior","setDropdownOpened","focusSearchTimeout","focusTargetTimeout","selectedIndexUpdateTimeout","eventSource","clearSelectedItem","querySelector","removeAttribute","selectOption","getElementById","querySelectorAll","setAttribute","behavior","activeOption","findIndex","option","currentIndex","getNextIndex","getPreviousIndex","selectFirstOption","getFirstIndex","click","focusSearchInput","focus","focusTarget","dropdownPadding","getFontSize","Combobox","controlledStore","uncontrolledStore","CheckIcon","_style","Options","Option","Search","Empty","Chevron","Footer","Header","EventsTarget","DropdownTarget","Group","HiddenInput","ScrollAreaProvider","useScrollAreaContext","useCallbackRef","callbackRef","useMemo","useResizeObserver","onResize","handleResize","useIsomorphicEffect","rAF","Corner","setWidth","setHeight","hasSize","scrollbarX","h","onCornerHeightChange","scrollbarY","w","onCornerWidthChange","ScrollAreaCorner","hasBothScrollbarsVisible","scrollHideDelay","ScrollAreaRoot","scrollbars","scrollArea","setScrollArea","viewport","setViewport","content","setContent","setScrollbarX","setScrollbarY","cornerWidth","setCornerWidth","cornerHeight","setCornerHeight","scrollbarXEnabled","setScrollbarXEnabled","scrollbarYEnabled","setScrollbarYEnabled","rootRef","onViewportChange","onContentChange","onScrollbarXChange","onScrollbarXEnabledChange","onScrollbarYChange","onScrollbarYEnabledChange","__vars","useDebouncedCallback","delay","flushOnUnmount","handleCallback","debounceTimerRef","lastCallback","flush","getThumbRatio","viewportSize","contentSize","isNaN","getThumbSize","sizes","scrollbarPadding","scrollbar","paddingStart","paddingEnd","thumbSize","linearScale","output","getThumbOffsetFromScroll","scrollPos","thumbSizePx","maxScrollPos","maxThumbPos","scrollWithoutMomentum","interpolate","isScrollingWithinScrollbarBounds","toInt","parseInt","composeEventHandlers","originalEventHandler","ourEventHandler","checkForDefaultPrevented","defaultPrevented","ScrollbarProvider","useScrollbarContext","Scrollbar","forwardedRef","hasThumb","onThumbChange","onThumbPointerUp","onThumbPointerDown","onThumbPositionChange","onDragScroll","onWheelScroll","scrollbarProps","setScrollbar","composeRefs","rectRef","prevWebkitUserSelectRef","handleWheelScroll","handleThumbPositionChange","handleDragScroll","clientX","clientY","handleWheel","isScrollbarWheel","onPointerDown","button","setPointerCapture","pointerId","webkitUserSelect","onPointerMove","onPointerUp","hasPointerCapture","releasePointerCapture","onLostPointerCapture","ScrollAreaScrollbarX","onSizesChange","setComputedStyle","pointerPos","deltaX","paddingRight","ScrollAreaScrollbarY","deltaY","paddingBottom","ScrollAreaScrollbarVisible","orientation","thumbRef","pointerOffsetRef","setSizes","thumbRatio","commonProps","thumb","getScrollPosition","pointerOffset","thumbOffsetFromEnd","minPointerPos","maxPointerPos","getScrollPositionFromPointer","setProperty","ScrollAreaScrollbarAuto","forceMount","setVisible","isHorizontal","isOverflowX","isOverflowY","ScrollAreaScrollbarHover","hideTimer","handlePointerEnter","handlePointerLeave","ScrollAreaScrollbarScroll","red","setState","debounceScrollEnd","scrollDirection","prevScrollPos","handleScroll","onPointerEnter","onPointerLeave","ScrollAreaScrollbar","Thumb","scrollAreaContext","scrollbarContext","composedRef","removeUnlinkedScrollListenerRef","prevPosition","isHorizontalScroll","isVerticalScroll","addUnlinkedScrollListener","onPointerDownCapture","thumbRect","ScrollAreaThumb","thumbProps","ScrollAreaViewport","minWidth","scrollbarSize","ScrollArea","viewportProps","viewportRef","onScrollPositionChange","offsetScrollbars","onBottomReached","onTopReached","scrollbarHovered","setScrollbarHovered","onScroll","currentTarget","onMouseEnter","onMouseLeave","ScrollAreaAutosize","flexDirection","flex","isOptionsGroup","defaultOptionsFilter","search","limit","parsedSearch","trim","validateOptions","valuesSet","Set","has","add","withCheckIcon","checkIconPosition","renderOption","checked","optionValue","isValueChecked","check","optionsDropdownCheckIcon","defaultContent","Fragment","optionsDropdownOption","OptionsDropdown","_ref2","hiddenWhenEmpty","maxDropdownHeight","withScrollArea","filterOptions","nothingFoundMessage","labelId","scrollAreaProps","ariaLabel","filteredData","Infinity","isEmpty","isEmptyComboboxData","Autosize","mah","searchable","allowDeselect","Select","defaultDropdownOpened","onFocus","onBlur","selectFirstOptionOnChange","comboboxProps","form","searchValue","defaultSearchValue","onSearchChange","rightSectionPointerEvents","clearable","clearButtonProps","hiddenInputProps","__defaultRightSection","__clearSection","__clearable","chevronColor","parsedData","optionsLockup","_value","setValue","selectedOption","previousSelectedOption","usePrevious","setSearch","combobox","resolvedClassNames","clearButton","_clearable","val","optionLockup","nextValue","InputBase","pointer","uncontrolledValue","setUncontrolledValue","payload"],"sourceRoot":""}